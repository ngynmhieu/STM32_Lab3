
Lab3inLab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044dc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080045e8  080045e8  000145e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004674  08004674  000200b4  2**0
                  CONTENTS
  4 .ARM          00000000  08004674  08004674  000200b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004674  08004674  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004674  08004674  00014674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004678  08004678  00014678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  0800467c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  200000b4  08004730  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  08004730  000201f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011f07  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000297c  00000000  00000000  00031fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e00  00000000  00000000  00034960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf8  00000000  00000000  00035760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000194e6  00000000  00000000  00036458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010fc1  00000000  00000000  0004f93e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008976c  00000000  00000000  000608ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ea06b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c70  00000000  00000000  000ea0c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b4 	.word	0x200000b4
 8000128:	00000000 	.word	0x00000000
 800012c:	080045d0 	.word	0x080045d0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b8 	.word	0x200000b8
 8000148:	080045d0 	.word	0x080045d0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <isButtonPressed>:


int button_flag[4] = {0,0,0,0};
int TimeOutForKeyPress =  200;

int isButtonPressed(int index){
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	if (button_flag[index] == 1){
 8000164:	4a09      	ldr	r2, [pc, #36]	; (800018c <isButtonPressed+0x30>)
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800016c:	2b01      	cmp	r3, #1
 800016e:	d106      	bne.n	800017e <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000170:	4a06      	ldr	r2, [pc, #24]	; (800018c <isButtonPressed+0x30>)
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	2100      	movs	r1, #0
 8000176:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800017a:	2301      	movs	r3, #1
 800017c:	e000      	b.n	8000180 <isButtonPressed+0x24>
	}
	return 0;
 800017e:	2300      	movs	r3, #0
}
 8000180:	4618      	mov	r0, r3
 8000182:	370c      	adds	r7, #12
 8000184:	46bd      	mov	sp, r7
 8000186:	bc80      	pop	{r7}
 8000188:	4770      	bx	lr
 800018a:	bf00      	nop
 800018c:	200000d0 	.word	0x200000d0

08000190 <subKeyProcess>:

void subKeyProcess(int i){
 8000190:	b480      	push	{r7}
 8000192:	b083      	sub	sp, #12
 8000194:	af00      	add	r7, sp, #0
 8000196:	6078      	str	r0, [r7, #4]
	button_flag[i] = 1;
 8000198:	4a04      	ldr	r2, [pc, #16]	; (80001ac <subKeyProcess+0x1c>)
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2101      	movs	r1, #1
 800019e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80001a2:	bf00      	nop
 80001a4:	370c      	adds	r7, #12
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	200000d0 	.word	0x200000d0

080001b0 <ReadPin>:

GPIO_PinState ReadPin(int index){
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b082      	sub	sp, #8
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	6078      	str	r0, [r7, #4]
	if (index == 0) return HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d106      	bne.n	80001cc <ReadPin+0x1c>
 80001be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001c2:	480f      	ldr	r0, [pc, #60]	; (8000200 <ReadPin+0x50>)
 80001c4:	f001 ff22 	bl	800200c <HAL_GPIO_ReadPin>
 80001c8:	4603      	mov	r3, r0
 80001ca:	e014      	b.n	80001f6 <ReadPin+0x46>
	else if (index == 1) return HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	2b01      	cmp	r3, #1
 80001d0:	d106      	bne.n	80001e0 <ReadPin+0x30>
 80001d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001d6:	480a      	ldr	r0, [pc, #40]	; (8000200 <ReadPin+0x50>)
 80001d8:	f001 ff18 	bl	800200c <HAL_GPIO_ReadPin>
 80001dc:	4603      	mov	r3, r0
 80001de:	e00a      	b.n	80001f6 <ReadPin+0x46>
	else if (index == 2) return HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	2b02      	cmp	r3, #2
 80001e4:	d106      	bne.n	80001f4 <ReadPin+0x44>
 80001e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001ea:	4805      	ldr	r0, [pc, #20]	; (8000200 <ReadPin+0x50>)
 80001ec:	f001 ff0e 	bl	800200c <HAL_GPIO_ReadPin>
 80001f0:	4603      	mov	r3, r0
 80001f2:	e000      	b.n	80001f6 <ReadPin+0x46>
	else return 0;
 80001f4:	2300      	movs	r3, #0
}
 80001f6:	4618      	mov	r0, r3
 80001f8:	3708      	adds	r7, #8
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}
 80001fe:	bf00      	nop
 8000200:	40011000 	.word	0x40011000

08000204 <getKeyinput>:

void getKeyinput(){
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
	for (int i = 0 ; i < 3; i++){
 800020a:	2300      	movs	r3, #0
 800020c:	607b      	str	r3, [r7, #4]
 800020e:	e05c      	b.n	80002ca <getKeyinput+0xc6>
		KeyReg0[i] = KeyReg1[i];
 8000210:	4a32      	ldr	r2, [pc, #200]	; (80002dc <getKeyinput+0xd8>)
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000218:	4931      	ldr	r1, [pc, #196]	; (80002e0 <getKeyinput+0xdc>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 8000220:	4a30      	ldr	r2, [pc, #192]	; (80002e4 <getKeyinput+0xe0>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000228:	492c      	ldr	r1, [pc, #176]	; (80002dc <getKeyinput+0xd8>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg2[i] = ReadPin(i);
 8000230:	6878      	ldr	r0, [r7, #4]
 8000232:	f7ff ffbd 	bl	80001b0 <ReadPin>
 8000236:	4603      	mov	r3, r0
 8000238:	4619      	mov	r1, r3
 800023a:	4a2a      	ldr	r2, [pc, #168]	; (80002e4 <getKeyinput+0xe0>)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])){
 8000242:	4a27      	ldr	r2, [pc, #156]	; (80002e0 <getKeyinput+0xdc>)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800024a:	4924      	ldr	r1, [pc, #144]	; (80002dc <getKeyinput+0xd8>)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000252:	429a      	cmp	r2, r3
 8000254:	d136      	bne.n	80002c4 <getKeyinput+0xc0>
 8000256:	4a21      	ldr	r2, [pc, #132]	; (80002dc <getKeyinput+0xd8>)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800025e:	4921      	ldr	r1, [pc, #132]	; (80002e4 <getKeyinput+0xe0>)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000266:	429a      	cmp	r2, r3
 8000268:	d12c      	bne.n	80002c4 <getKeyinput+0xc0>
			if (KeyReg3[i] != KeyReg2[i]){
 800026a:	4a1f      	ldr	r2, [pc, #124]	; (80002e8 <getKeyinput+0xe4>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000272:	491c      	ldr	r1, [pc, #112]	; (80002e4 <getKeyinput+0xe0>)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800027a:	429a      	cmp	r2, r3
 800027c:	d014      	beq.n	80002a8 <getKeyinput+0xa4>
				KeyReg3[i] = KeyReg2[i];
 800027e:	4a19      	ldr	r2, [pc, #100]	; (80002e4 <getKeyinput+0xe0>)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000286:	4918      	ldr	r1, [pc, #96]	; (80002e8 <getKeyinput+0xe4>)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if (KeyReg3[i] == PRESSED_STATE){
 800028e:	4a16      	ldr	r2, [pc, #88]	; (80002e8 <getKeyinput+0xe4>)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d114      	bne.n	80002c4 <getKeyinput+0xc0>
					TimeOutForKeyPress= 200;
 800029a:	4b14      	ldr	r3, [pc, #80]	; (80002ec <getKeyinput+0xe8>)
 800029c:	22c8      	movs	r2, #200	; 0xc8
 800029e:	601a      	str	r2, [r3, #0]
					subKeyProcess(i);
 80002a0:	6878      	ldr	r0, [r7, #4]
 80002a2:	f7ff ff75 	bl	8000190 <subKeyProcess>
 80002a6:	e00d      	b.n	80002c4 <getKeyinput+0xc0>
				}
			}
			else{
				TimeOutForKeyPress --;
 80002a8:	4b10      	ldr	r3, [pc, #64]	; (80002ec <getKeyinput+0xe8>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	3b01      	subs	r3, #1
 80002ae:	4a0f      	ldr	r2, [pc, #60]	; (80002ec <getKeyinput+0xe8>)
 80002b0:	6013      	str	r3, [r2, #0]
				if (TimeOutForKeyPress ==0 ){
 80002b2:	4b0e      	ldr	r3, [pc, #56]	; (80002ec <getKeyinput+0xe8>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d104      	bne.n	80002c4 <getKeyinput+0xc0>
					KeyReg3[i] = NORMAL_STATE;
 80002ba:	4a0b      	ldr	r2, [pc, #44]	; (80002e8 <getKeyinput+0xe4>)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	2101      	movs	r1, #1
 80002c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0 ; i < 3; i++){
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	3301      	adds	r3, #1
 80002c8:	607b      	str	r3, [r7, #4]
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	2b02      	cmp	r3, #2
 80002ce:	dd9f      	ble.n	8000210 <getKeyinput+0xc>
				}
			}
		}
	}

}
 80002d0:	bf00      	nop
 80002d2:	bf00      	nop
 80002d4:	3708      	adds	r7, #8
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	2000000c 	.word	0x2000000c
 80002e0:	20000000 	.word	0x20000000
 80002e4:	20000018 	.word	0x20000018
 80002e8:	20000024 	.word	0x20000024
 80002ec:	20000030 	.word	0x20000030

080002f0 <fsm_auto>:
int red_time_show = 0 ; // temp variable for red time length
int yellow_time_show = 0 ;
int green_time_show = 0 ;


void fsm_auto(){
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
	switch (status){
 80002f4:	4b4a      	ldr	r3, [pc, #296]	; (8000420 <fsm_auto+0x130>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	3b5a      	subs	r3, #90	; 0x5a
 80002fa:	2b04      	cmp	r3, #4
 80002fc:	f200 8082 	bhi.w	8000404 <fsm_auto+0x114>
 8000300:	a201      	add	r2, pc, #4	; (adr r2, 8000308 <fsm_auto+0x18>)
 8000302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000306:	bf00      	nop
 8000308:	0800031d 	.word	0x0800031d
 800030c:	08000339 	.word	0x08000339
 8000310:	08000367 	.word	0x08000367
 8000314:	0800039f 	.word	0x0800039f
 8000318:	080003cd 	.word	0x080003cd
	case INIT:
		red_time_show = red_time - 1; // time length = 5s, start at 4 and end at 0
 800031c:	4b41      	ldr	r3, [pc, #260]	; (8000424 <fsm_auto+0x134>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	3b01      	subs	r3, #1
 8000322:	4a41      	ldr	r2, [pc, #260]	; (8000428 <fsm_auto+0x138>)
 8000324:	6013      	str	r3, [r2, #0]
		green_time_show = green_time - 1;
 8000326:	4b41      	ldr	r3, [pc, #260]	; (800042c <fsm_auto+0x13c>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	3b01      	subs	r3, #1
 800032c:	4a40      	ldr	r2, [pc, #256]	; (8000430 <fsm_auto+0x140>)
 800032e:	6013      	str	r3, [r2, #0]
		status = AUTO_RED_GREEN;
 8000330:	4b3b      	ldr	r3, [pc, #236]	; (8000420 <fsm_auto+0x130>)
 8000332:	225b      	movs	r2, #91	; 0x5b
 8000334:	601a      	str	r2, [r3, #0]
		break;
 8000336:	e06e      	b.n	8000416 <fsm_auto+0x126>
	case AUTO_RED_GREEN:
		red_time_show --;
 8000338:	4b3b      	ldr	r3, [pc, #236]	; (8000428 <fsm_auto+0x138>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	3b01      	subs	r3, #1
 800033e:	4a3a      	ldr	r2, [pc, #232]	; (8000428 <fsm_auto+0x138>)
 8000340:	6013      	str	r3, [r2, #0]
		green_time_show --;
 8000342:	4b3b      	ldr	r3, [pc, #236]	; (8000430 <fsm_auto+0x140>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	3b01      	subs	r3, #1
 8000348:	4a39      	ldr	r2, [pc, #228]	; (8000430 <fsm_auto+0x140>)
 800034a:	6013      	str	r3, [r2, #0]
		if (green_time_show < 0){
 800034c:	4b38      	ldr	r3, [pc, #224]	; (8000430 <fsm_auto+0x140>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	2b00      	cmp	r3, #0
 8000352:	da59      	bge.n	8000408 <fsm_auto+0x118>
			status = AUTO_RED_YELLOW;
 8000354:	4b32      	ldr	r3, [pc, #200]	; (8000420 <fsm_auto+0x130>)
 8000356:	225c      	movs	r2, #92	; 0x5c
 8000358:	601a      	str	r2, [r3, #0]
			yellow_time_show = yellow_time - 1;
 800035a:	4b36      	ldr	r3, [pc, #216]	; (8000434 <fsm_auto+0x144>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	3b01      	subs	r3, #1
 8000360:	4a35      	ldr	r2, [pc, #212]	; (8000438 <fsm_auto+0x148>)
 8000362:	6013      	str	r3, [r2, #0]
		}
		break;
 8000364:	e050      	b.n	8000408 <fsm_auto+0x118>
	case AUTO_RED_YELLOW:
		red_time_show --;
 8000366:	4b30      	ldr	r3, [pc, #192]	; (8000428 <fsm_auto+0x138>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	3b01      	subs	r3, #1
 800036c:	4a2e      	ldr	r2, [pc, #184]	; (8000428 <fsm_auto+0x138>)
 800036e:	6013      	str	r3, [r2, #0]
		yellow_time_show --;
 8000370:	4b31      	ldr	r3, [pc, #196]	; (8000438 <fsm_auto+0x148>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	3b01      	subs	r3, #1
 8000376:	4a30      	ldr	r2, [pc, #192]	; (8000438 <fsm_auto+0x148>)
 8000378:	6013      	str	r3, [r2, #0]
		if (yellow_time_show < 0){
 800037a:	4b2f      	ldr	r3, [pc, #188]	; (8000438 <fsm_auto+0x148>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	2b00      	cmp	r3, #0
 8000380:	da44      	bge.n	800040c <fsm_auto+0x11c>
			status = AUTO_GREEN_RED;
 8000382:	4b27      	ldr	r3, [pc, #156]	; (8000420 <fsm_auto+0x130>)
 8000384:	225d      	movs	r2, #93	; 0x5d
 8000386:	601a      	str	r2, [r3, #0]
			red_time_show = red_time - 1;
 8000388:	4b26      	ldr	r3, [pc, #152]	; (8000424 <fsm_auto+0x134>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	3b01      	subs	r3, #1
 800038e:	4a26      	ldr	r2, [pc, #152]	; (8000428 <fsm_auto+0x138>)
 8000390:	6013      	str	r3, [r2, #0]
			green_time_show = green_time - 1;
 8000392:	4b26      	ldr	r3, [pc, #152]	; (800042c <fsm_auto+0x13c>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	3b01      	subs	r3, #1
 8000398:	4a25      	ldr	r2, [pc, #148]	; (8000430 <fsm_auto+0x140>)
 800039a:	6013      	str	r3, [r2, #0]
		}
		break;
 800039c:	e036      	b.n	800040c <fsm_auto+0x11c>
	case AUTO_GREEN_RED:
		red_time_show --;
 800039e:	4b22      	ldr	r3, [pc, #136]	; (8000428 <fsm_auto+0x138>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	3b01      	subs	r3, #1
 80003a4:	4a20      	ldr	r2, [pc, #128]	; (8000428 <fsm_auto+0x138>)
 80003a6:	6013      	str	r3, [r2, #0]
		green_time_show --;
 80003a8:	4b21      	ldr	r3, [pc, #132]	; (8000430 <fsm_auto+0x140>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	3b01      	subs	r3, #1
 80003ae:	4a20      	ldr	r2, [pc, #128]	; (8000430 <fsm_auto+0x140>)
 80003b0:	6013      	str	r3, [r2, #0]
		if (green_time_show < 0){
 80003b2:	4b1f      	ldr	r3, [pc, #124]	; (8000430 <fsm_auto+0x140>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	da2a      	bge.n	8000410 <fsm_auto+0x120>
			status = AUTO_YELLOW_RED;
 80003ba:	4b19      	ldr	r3, [pc, #100]	; (8000420 <fsm_auto+0x130>)
 80003bc:	225e      	movs	r2, #94	; 0x5e
 80003be:	601a      	str	r2, [r3, #0]
			yellow_time_show = yellow_time - 1;
 80003c0:	4b1c      	ldr	r3, [pc, #112]	; (8000434 <fsm_auto+0x144>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	3b01      	subs	r3, #1
 80003c6:	4a1c      	ldr	r2, [pc, #112]	; (8000438 <fsm_auto+0x148>)
 80003c8:	6013      	str	r3, [r2, #0]
		}
		break;
 80003ca:	e021      	b.n	8000410 <fsm_auto+0x120>
	case AUTO_YELLOW_RED:
		red_time_show --;
 80003cc:	4b16      	ldr	r3, [pc, #88]	; (8000428 <fsm_auto+0x138>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	3b01      	subs	r3, #1
 80003d2:	4a15      	ldr	r2, [pc, #84]	; (8000428 <fsm_auto+0x138>)
 80003d4:	6013      	str	r3, [r2, #0]
		yellow_time_show --;
 80003d6:	4b18      	ldr	r3, [pc, #96]	; (8000438 <fsm_auto+0x148>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	3b01      	subs	r3, #1
 80003dc:	4a16      	ldr	r2, [pc, #88]	; (8000438 <fsm_auto+0x148>)
 80003de:	6013      	str	r3, [r2, #0]
		if (yellow_time_show < 0){
 80003e0:	4b15      	ldr	r3, [pc, #84]	; (8000438 <fsm_auto+0x148>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	da15      	bge.n	8000414 <fsm_auto+0x124>
			status = AUTO_RED_GREEN;
 80003e8:	4b0d      	ldr	r3, [pc, #52]	; (8000420 <fsm_auto+0x130>)
 80003ea:	225b      	movs	r2, #91	; 0x5b
 80003ec:	601a      	str	r2, [r3, #0]
			red_time_show  = red_time - 1;
 80003ee:	4b0d      	ldr	r3, [pc, #52]	; (8000424 <fsm_auto+0x134>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	3b01      	subs	r3, #1
 80003f4:	4a0c      	ldr	r2, [pc, #48]	; (8000428 <fsm_auto+0x138>)
 80003f6:	6013      	str	r3, [r2, #0]
			green_time_show = green_time - 1;
 80003f8:	4b0c      	ldr	r3, [pc, #48]	; (800042c <fsm_auto+0x13c>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	3b01      	subs	r3, #1
 80003fe:	4a0c      	ldr	r2, [pc, #48]	; (8000430 <fsm_auto+0x140>)
 8000400:	6013      	str	r3, [r2, #0]
		}
		break;
 8000402:	e007      	b.n	8000414 <fsm_auto+0x124>
	default: break;
 8000404:	bf00      	nop
 8000406:	e006      	b.n	8000416 <fsm_auto+0x126>
		break;
 8000408:	bf00      	nop
 800040a:	e004      	b.n	8000416 <fsm_auto+0x126>
		break;
 800040c:	bf00      	nop
 800040e:	e002      	b.n	8000416 <fsm_auto+0x126>
		break;
 8000410:	bf00      	nop
 8000412:	e000      	b.n	8000416 <fsm_auto+0x126>
		break;
 8000414:	bf00      	nop
	}
}
 8000416:	bf00      	nop
 8000418:	46bd      	mov	sp, r7
 800041a:	bc80      	pop	{r7}
 800041c:	4770      	bx	lr
 800041e:	bf00      	nop
 8000420:	20000034 	.word	0x20000034
 8000424:	20000038 	.word	0x20000038
 8000428:	200000e0 	.word	0x200000e0
 800042c:	20000040 	.word	0x20000040
 8000430:	200000e8 	.word	0x200000e8
 8000434:	2000003c 	.word	0x2000003c
 8000438:	200000e4 	.word	0x200000e4

0800043c <turnbackINIT>:
#include "fsm_manual.h"


int red_time_tmp, yellow_time_tmp, green_time_tmp;

void turnbackINIT(){
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
	if (red_time < 1 || yellow_time < 1 ||
 8000440:	4b11      	ldr	r3, [pc, #68]	; (8000488 <turnbackINIT+0x4c>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	2b00      	cmp	r3, #0
 8000446:	dd07      	ble.n	8000458 <turnbackINIT+0x1c>
 8000448:	4b10      	ldr	r3, [pc, #64]	; (800048c <turnbackINIT+0x50>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	2b00      	cmp	r3, #0
 800044e:	dd03      	ble.n	8000458 <turnbackINIT+0x1c>
			green_time < 1){
 8000450:	4b0f      	ldr	r3, [pc, #60]	; (8000490 <turnbackINIT+0x54>)
 8000452:	681b      	ldr	r3, [r3, #0]
	if (red_time < 1 || yellow_time < 1 ||
 8000454:	2b00      	cmp	r3, #0
 8000456:	dc08      	bgt.n	800046a <turnbackINIT+0x2e>
		red_time = 5;
 8000458:	4b0b      	ldr	r3, [pc, #44]	; (8000488 <turnbackINIT+0x4c>)
 800045a:	2205      	movs	r2, #5
 800045c:	601a      	str	r2, [r3, #0]
		yellow_time = 2;
 800045e:	4b0b      	ldr	r3, [pc, #44]	; (800048c <turnbackINIT+0x50>)
 8000460:	2202      	movs	r2, #2
 8000462:	601a      	str	r2, [r3, #0]
		green_time = 3;
 8000464:	4b0a      	ldr	r3, [pc, #40]	; (8000490 <turnbackINIT+0x54>)
 8000466:	2203      	movs	r2, #3
 8000468:	601a      	str	r2, [r3, #0]
	}
	red_time = green_time + yellow_time;
 800046a:	4b09      	ldr	r3, [pc, #36]	; (8000490 <turnbackINIT+0x54>)
 800046c:	681a      	ldr	r2, [r3, #0]
 800046e:	4b07      	ldr	r3, [pc, #28]	; (800048c <turnbackINIT+0x50>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4413      	add	r3, r2
 8000474:	4a04      	ldr	r2, [pc, #16]	; (8000488 <turnbackINIT+0x4c>)
 8000476:	6013      	str	r3, [r2, #0]
	status = INIT;
 8000478:	4b06      	ldr	r3, [pc, #24]	; (8000494 <turnbackINIT+0x58>)
 800047a:	225a      	movs	r2, #90	; 0x5a
 800047c:	601a      	str	r2, [r3, #0]
}
 800047e:	bf00      	nop
 8000480:	46bd      	mov	sp, r7
 8000482:	bc80      	pop	{r7}
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	20000038 	.word	0x20000038
 800048c:	2000003c 	.word	0x2000003c
 8000490:	20000040 	.word	0x20000040
 8000494:	20000034 	.word	0x20000034

08000498 <checkButton1>:
void checkButton1(){
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
	if (isButtonPressed(0) == 1){
 800049c:	2000      	movs	r0, #0
 800049e:	f7ff fe5d 	bl	800015c <isButtonPressed>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b01      	cmp	r3, #1
 80004a6:	d119      	bne.n	80004dc <checkButton1+0x44>
		//reset set timer
		if (status == MANUAL_RED) {
 80004a8:	4b0d      	ldr	r3, [pc, #52]	; (80004e0 <checkButton1+0x48>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	2b14      	cmp	r3, #20
 80004ae:	d103      	bne.n	80004b8 <checkButton1+0x20>
			status = MANUAL_YELLOW;
 80004b0:	4b0b      	ldr	r3, [pc, #44]	; (80004e0 <checkButton1+0x48>)
 80004b2:	2215      	movs	r2, #21
 80004b4:	601a      	str	r2, [r3, #0]
		}
		else {
			status = MANUAL_INIT;
		}
	}
}
 80004b6:	e011      	b.n	80004dc <checkButton1+0x44>
		else if (status == MANUAL_YELLOW) {
 80004b8:	4b09      	ldr	r3, [pc, #36]	; (80004e0 <checkButton1+0x48>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	2b15      	cmp	r3, #21
 80004be:	d103      	bne.n	80004c8 <checkButton1+0x30>
			status = MANUAL_GREEN;
 80004c0:	4b07      	ldr	r3, [pc, #28]	; (80004e0 <checkButton1+0x48>)
 80004c2:	2216      	movs	r2, #22
 80004c4:	601a      	str	r2, [r3, #0]
}
 80004c6:	e009      	b.n	80004dc <checkButton1+0x44>
		else if (status == MANUAL_GREEN) {
 80004c8:	4b05      	ldr	r3, [pc, #20]	; (80004e0 <checkButton1+0x48>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	2b16      	cmp	r3, #22
 80004ce:	d102      	bne.n	80004d6 <checkButton1+0x3e>
			turnbackINIT();
 80004d0:	f7ff ffb4 	bl	800043c <turnbackINIT>
}
 80004d4:	e002      	b.n	80004dc <checkButton1+0x44>
			status = MANUAL_INIT;
 80004d6:	4b02      	ldr	r3, [pc, #8]	; (80004e0 <checkButton1+0x48>)
 80004d8:	2217      	movs	r2, #23
 80004da:	601a      	str	r2, [r3, #0]
}
 80004dc:	bf00      	nop
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	20000034 	.word	0x20000034

080004e4 <checkButton2>:

void checkButton2(){
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
	if (isButtonPressed(1) == 1){
 80004e8:	2001      	movs	r0, #1
 80004ea:	f7ff fe37 	bl	800015c <isButtonPressed>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d126      	bne.n	8000542 <checkButton2+0x5e>
		if (status == MANUAL_RED){
 80004f4:	4b14      	ldr	r3, [pc, #80]	; (8000548 <checkButton2+0x64>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	2b14      	cmp	r3, #20
 80004fa:	d108      	bne.n	800050e <checkButton2+0x2a>
			if (red_time_tmp < 99) {
 80004fc:	4b13      	ldr	r3, [pc, #76]	; (800054c <checkButton2+0x68>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	2b62      	cmp	r3, #98	; 0x62
 8000502:	dc04      	bgt.n	800050e <checkButton2+0x2a>
				red_time_tmp++;
 8000504:	4b11      	ldr	r3, [pc, #68]	; (800054c <checkButton2+0x68>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	3301      	adds	r3, #1
 800050a:	4a10      	ldr	r2, [pc, #64]	; (800054c <checkButton2+0x68>)
 800050c:	6013      	str	r3, [r2, #0]
			}
		}
		if (status == MANUAL_YELLOW){
 800050e:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <checkButton2+0x64>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	2b15      	cmp	r3, #21
 8000514:	d108      	bne.n	8000528 <checkButton2+0x44>
			if (yellow_time_tmp < 99){
 8000516:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <checkButton2+0x6c>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	2b62      	cmp	r3, #98	; 0x62
 800051c:	dc04      	bgt.n	8000528 <checkButton2+0x44>
				yellow_time_tmp++;
 800051e:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <checkButton2+0x6c>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	3301      	adds	r3, #1
 8000524:	4a0a      	ldr	r2, [pc, #40]	; (8000550 <checkButton2+0x6c>)
 8000526:	6013      	str	r3, [r2, #0]
			}
		}
		if (status == MANUAL_GREEN){
 8000528:	4b07      	ldr	r3, [pc, #28]	; (8000548 <checkButton2+0x64>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	2b16      	cmp	r3, #22
 800052e:	d108      	bne.n	8000542 <checkButton2+0x5e>
			if (green_time_tmp < 99) {
 8000530:	4b08      	ldr	r3, [pc, #32]	; (8000554 <checkButton2+0x70>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	2b62      	cmp	r3, #98	; 0x62
 8000536:	dc04      	bgt.n	8000542 <checkButton2+0x5e>
				green_time_tmp++;
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <checkButton2+0x70>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	3301      	adds	r3, #1
 800053e:	4a05      	ldr	r2, [pc, #20]	; (8000554 <checkButton2+0x70>)
 8000540:	6013      	str	r3, [r2, #0]
			}
		}
	}
}
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	20000034 	.word	0x20000034
 800054c:	2000010c 	.word	0x2000010c
 8000550:	20000104 	.word	0x20000104
 8000554:	20000108 	.word	0x20000108

08000558 <checkButton3>:
void checkButton3(){
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
	if (isButtonPressed(2) == 1){
 800055c:	2002      	movs	r0, #2
 800055e:	f7ff fdfd 	bl	800015c <isButtonPressed>
 8000562:	4603      	mov	r3, r0
 8000564:	2b01      	cmp	r3, #1
 8000566:	d119      	bne.n	800059c <checkButton3+0x44>
		if (status == MANUAL_RED){
 8000568:	4b0d      	ldr	r3, [pc, #52]	; (80005a0 <checkButton3+0x48>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	2b14      	cmp	r3, #20
 800056e:	d104      	bne.n	800057a <checkButton3+0x22>
			red_time = red_time_tmp;
 8000570:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <checkButton3+0x4c>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a0c      	ldr	r2, [pc, #48]	; (80005a8 <checkButton3+0x50>)
 8000576:	6013      	str	r3, [r2, #0]
		else if (status == MANUAL_GREEN){
			green_time = green_time_tmp;
		}
		//when confirm the time, flag =0 to reset timer again
	}
}
 8000578:	e010      	b.n	800059c <checkButton3+0x44>
		else if (status == MANUAL_YELLOW){
 800057a:	4b09      	ldr	r3, [pc, #36]	; (80005a0 <checkButton3+0x48>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	2b15      	cmp	r3, #21
 8000580:	d104      	bne.n	800058c <checkButton3+0x34>
			yellow_time = yellow_time_tmp;
 8000582:	4b0a      	ldr	r3, [pc, #40]	; (80005ac <checkButton3+0x54>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4a0a      	ldr	r2, [pc, #40]	; (80005b0 <checkButton3+0x58>)
 8000588:	6013      	str	r3, [r2, #0]
}
 800058a:	e007      	b.n	800059c <checkButton3+0x44>
		else if (status == MANUAL_GREEN){
 800058c:	4b04      	ldr	r3, [pc, #16]	; (80005a0 <checkButton3+0x48>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	2b16      	cmp	r3, #22
 8000592:	d103      	bne.n	800059c <checkButton3+0x44>
			green_time = green_time_tmp;
 8000594:	4b07      	ldr	r3, [pc, #28]	; (80005b4 <checkButton3+0x5c>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a07      	ldr	r2, [pc, #28]	; (80005b8 <checkButton3+0x60>)
 800059a:	6013      	str	r3, [r2, #0]
}
 800059c:	bf00      	nop
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20000034 	.word	0x20000034
 80005a4:	2000010c 	.word	0x2000010c
 80005a8:	20000038 	.word	0x20000038
 80005ac:	20000104 	.word	0x20000104
 80005b0:	2000003c 	.word	0x2000003c
 80005b4:	20000108 	.word	0x20000108
 80005b8:	20000040 	.word	0x20000040

080005bc <fsm_manual>:


void fsm_manual(){
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	checkButton1();
 80005c0:	f7ff ff6a 	bl	8000498 <checkButton1>
	switch (status){
 80005c4:	4b16      	ldr	r3, [pc, #88]	; (8000620 <fsm_manual+0x64>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	3b14      	subs	r3, #20
 80005ca:	2b03      	cmp	r3, #3
 80005cc:	d825      	bhi.n	800061a <fsm_manual+0x5e>
 80005ce:	a201      	add	r2, pc, #4	; (adr r2, 80005d4 <fsm_manual+0x18>)
 80005d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005d4:	080005fd 	.word	0x080005fd
 80005d8:	08000607 	.word	0x08000607
 80005dc:	08000611 	.word	0x08000611
 80005e0:	080005e5 	.word	0x080005e5
	case MANUAL_INIT:
		red_time_tmp = 0;
 80005e4:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <fsm_manual+0x68>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
		yellow_time_tmp= 0;
 80005ea:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <fsm_manual+0x6c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
		green_time_tmp = 0;
 80005f0:	4b0e      	ldr	r3, [pc, #56]	; (800062c <fsm_manual+0x70>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
		status = MANUAL_RED; //auto state -> manual state
 80005f6:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <fsm_manual+0x64>)
 80005f8:	2214      	movs	r2, #20
 80005fa:	601a      	str	r2, [r3, #0]
	case MANUAL_RED:
		checkButton2();
 80005fc:	f7ff ff72 	bl	80004e4 <checkButton2>
		checkButton3();
 8000600:	f7ff ffaa 	bl	8000558 <checkButton3>
		break;
 8000604:	e00a      	b.n	800061c <fsm_manual+0x60>
	case MANUAL_YELLOW:
		checkButton2();
 8000606:	f7ff ff6d 	bl	80004e4 <checkButton2>
		checkButton3();
 800060a:	f7ff ffa5 	bl	8000558 <checkButton3>
		break;
 800060e:	e005      	b.n	800061c <fsm_manual+0x60>
	case MANUAL_GREEN:
		checkButton2();
 8000610:	f7ff ff68 	bl	80004e4 <checkButton2>
		checkButton3();
 8000614:	f7ff ffa0 	bl	8000558 <checkButton3>
		break;
 8000618:	e000      	b.n	800061c <fsm_manual+0x60>
	default: break;
 800061a:	bf00      	nop
	}




}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000034 	.word	0x20000034
 8000624:	2000010c 	.word	0x2000010c
 8000628:	20000104 	.word	0x20000104
 800062c:	20000108 	.word	0x20000108

08000630 <sendSignal>:

/**
  * @brief  The application entry point.
  * @retval int
  */
void sendSignal(char *str){
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,(void *) str, strlen(str), 10);
 8000638:	6878      	ldr	r0, [r7, #4]
 800063a:	f7ff fd87 	bl	800014c <strlen>
 800063e:	4603      	mov	r3, r0
 8000640:	b29a      	uxth	r2, r3
 8000642:	230a      	movs	r3, #10
 8000644:	6879      	ldr	r1, [r7, #4]
 8000646:	4803      	ldr	r0, [pc, #12]	; (8000654 <sendSignal+0x24>)
 8000648:	f002 fd72 	bl	8003130 <HAL_UART_Transmit>
}
 800064c:	bf00      	nop
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000110 	.word	0x20000110

08000658 <main>:
int main(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065c:	f001 f93a 	bl	80018d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000660:	f000 f824 	bl	80006ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000664:	f000 f8d4 	bl	8000810 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000668:	f000 f85c 	bl	8000724 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800066c:	f000 f8a6 	bl	80007bc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start_IT(&htim2);
 8000670:	480a      	ldr	r0, [pc, #40]	; (800069c <main+0x44>)
 8000672:	f002 f975 	bl	8002960 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	SCH_Add_Task(fsm_auto, 0, 100);
 8000676:	2264      	movs	r2, #100	; 0x64
 8000678:	2100      	movs	r1, #0
 800067a:	4809      	ldr	r0, [pc, #36]	; (80006a0 <main+0x48>)
 800067c:	f000 fe96 	bl	80013ac <SCH_Add_Task>
	SCH_Add_Task(fsm_manual, 1, 10);
 8000680:	220a      	movs	r2, #10
 8000682:	2101      	movs	r1, #1
 8000684:	4807      	ldr	r0, [pc, #28]	; (80006a4 <main+0x4c>)
 8000686:	f000 fe91 	bl	80013ac <SCH_Add_Task>
	SCH_Add_Task(scanLed, 2, 25);
 800068a:	2219      	movs	r2, #25
 800068c:	2102      	movs	r1, #2
 800068e:	4806      	ldr	r0, [pc, #24]	; (80006a8 <main+0x50>)
 8000690:	f000 fe8c 	bl	80013ac <SCH_Add_Task>
//	SCH_Add_Task(getKeyinput, 4, 1);

  while (1)
  {
    /* USER CODE END WHILE */
	  SCH_Dispatch_Tasks();
 8000694:	f000 ff76 	bl	8001584 <SCH_Dispatch_Tasks>
 8000698:	e7fc      	b.n	8000694 <main+0x3c>
 800069a:	bf00      	nop
 800069c:	20000158 	.word	0x20000158
 80006a0:	080002f1 	.word	0x080002f1
 80006a4:	080005bd 	.word	0x080005bd
 80006a8:	080012ad 	.word	0x080012ad

080006ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b090      	sub	sp, #64	; 0x40
 80006b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	f107 0318 	add.w	r3, r7, #24
 80006b6:	2228      	movs	r2, #40	; 0x28
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f003 fb46 	bl	8003d4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
 80006cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ce:	2302      	movs	r3, #2
 80006d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d2:	2301      	movs	r3, #1
 80006d4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d6:	2310      	movs	r3, #16
 80006d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006da:	2300      	movs	r3, #0
 80006dc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006de:	f107 0318 	add.w	r3, r7, #24
 80006e2:	4618      	mov	r0, r3
 80006e4:	f001 fcde 	bl	80020a4 <HAL_RCC_OscConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80006ee:	f000 f90d 	bl	800090c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f2:	230f      	movs	r3, #15
 80006f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f001 ff4a 	bl	80025a4 <HAL_RCC_ClockConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000716:	f000 f8f9 	bl	800090c <Error_Handler>
  }
}
 800071a:	bf00      	nop
 800071c:	3740      	adds	r7, #64	; 0x40
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800072a:	f107 0308 	add.w	r3, r7, #8
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000738:	463b      	mov	r3, r7
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000740:	4b1d      	ldr	r3, [pc, #116]	; (80007b8 <MX_TIM2_Init+0x94>)
 8000742:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000746:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000748:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <MX_TIM2_Init+0x94>)
 800074a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800074e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000750:	4b19      	ldr	r3, [pc, #100]	; (80007b8 <MX_TIM2_Init+0x94>)
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8000756:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <MX_TIM2_Init+0x94>)
 8000758:	220a      	movs	r2, #10
 800075a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800075c:	4b16      	ldr	r3, [pc, #88]	; (80007b8 <MX_TIM2_Init+0x94>)
 800075e:	2200      	movs	r2, #0
 8000760:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000762:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <MX_TIM2_Init+0x94>)
 8000764:	2200      	movs	r2, #0
 8000766:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000768:	4813      	ldr	r0, [pc, #76]	; (80007b8 <MX_TIM2_Init+0x94>)
 800076a:	f002 f8a9 	bl	80028c0 <HAL_TIM_Base_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000774:	f000 f8ca 	bl	800090c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000778:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800077c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800077e:	f107 0308 	add.w	r3, r7, #8
 8000782:	4619      	mov	r1, r3
 8000784:	480c      	ldr	r0, [pc, #48]	; (80007b8 <MX_TIM2_Init+0x94>)
 8000786:	f002 fa3f 	bl	8002c08 <HAL_TIM_ConfigClockSource>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000790:	f000 f8bc 	bl	800090c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000794:	2300      	movs	r3, #0
 8000796:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000798:	2300      	movs	r3, #0
 800079a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800079c:	463b      	mov	r3, r7
 800079e:	4619      	mov	r1, r3
 80007a0:	4805      	ldr	r0, [pc, #20]	; (80007b8 <MX_TIM2_Init+0x94>)
 80007a2:	f002 fc0b 	bl	8002fbc <HAL_TIMEx_MasterConfigSynchronization>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80007ac:	f000 f8ae 	bl	800090c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007b0:	bf00      	nop
 80007b2:	3718      	adds	r7, #24
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000158 	.word	0x20000158

080007bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007c0:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_USART1_UART_Init+0x4c>)
 80007c2:	4a12      	ldr	r2, [pc, #72]	; (800080c <MX_USART1_UART_Init+0x50>)
 80007c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007c6:	4b10      	ldr	r3, [pc, #64]	; (8000808 <MX_USART1_UART_Init+0x4c>)
 80007c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_USART1_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_USART1_UART_Init+0x4c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <MX_USART1_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_USART1_UART_Init+0x4c>)
 80007e2:	220c      	movs	r2, #12
 80007e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <MX_USART1_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_USART1_UART_Init+0x4c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_USART1_UART_Init+0x4c>)
 80007f4:	f002 fc4c 	bl	8003090 <HAL_UART_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007fe:	f000 f885 	bl	800090c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000110 	.word	0x20000110
 800080c:	40013800 	.word	0x40013800

08000810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b088      	sub	sp, #32
 8000814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000816:	f107 0310 	add.w	r3, r7, #16
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000824:	4b2f      	ldr	r3, [pc, #188]	; (80008e4 <MX_GPIO_Init+0xd4>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	4a2e      	ldr	r2, [pc, #184]	; (80008e4 <MX_GPIO_Init+0xd4>)
 800082a:	f043 0310 	orr.w	r3, r3, #16
 800082e:	6193      	str	r3, [r2, #24]
 8000830:	4b2c      	ldr	r3, [pc, #176]	; (80008e4 <MX_GPIO_Init+0xd4>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	f003 0310 	and.w	r3, r3, #16
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083c:	4b29      	ldr	r3, [pc, #164]	; (80008e4 <MX_GPIO_Init+0xd4>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	4a28      	ldr	r2, [pc, #160]	; (80008e4 <MX_GPIO_Init+0xd4>)
 8000842:	f043 0304 	orr.w	r3, r3, #4
 8000846:	6193      	str	r3, [r2, #24]
 8000848:	4b26      	ldr	r3, [pc, #152]	; (80008e4 <MX_GPIO_Init+0xd4>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	f003 0304 	and.w	r3, r3, #4
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000854:	4b23      	ldr	r3, [pc, #140]	; (80008e4 <MX_GPIO_Init+0xd4>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	4a22      	ldr	r2, [pc, #136]	; (80008e4 <MX_GPIO_Init+0xd4>)
 800085a:	f043 0308 	orr.w	r3, r3, #8
 800085e:	6193      	str	r3, [r2, #24]
 8000860:	4b20      	ldr	r3, [pc, #128]	; (80008e4 <MX_GPIO_Init+0xd4>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	f003 0308 	and.w	r3, r3, #8
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, red1_Pin|yellow1_Pin|green1_Pin|red2_Pin
 800086c:	2200      	movs	r2, #0
 800086e:	f641 11fe 	movw	r1, #6654	; 0x19fe
 8000872:	481d      	ldr	r0, [pc, #116]	; (80008e8 <MX_GPIO_Init+0xd8>)
 8000874:	f001 fbe1 	bl	800203a <HAL_GPIO_WritePin>
                          |yellow2_Pin|green2_Pin|en0_Pin|en1_Pin
                          |en2_Pin|en3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a1_Pin|b1_Pin|c1_Pin|d2_Pin
 8000878:	2200      	movs	r2, #0
 800087a:	f643 71ff 	movw	r1, #16383	; 0x3fff
 800087e:	481b      	ldr	r0, [pc, #108]	; (80008ec <MX_GPIO_Init+0xdc>)
 8000880:	f001 fbdb 	bl	800203a <HAL_GPIO_WritePin>
                          |e2_Pin|f2_Pin|g2_Pin|d1_Pin
                          |e1_Pin|f1_Pin|g1_Pin|a2_Pin
                          |b2_Pin|c2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Button1_Pin Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin|Button3_Pin;
 8000884:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000888:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088a:	2300      	movs	r3, #0
 800088c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800088e:	2301      	movs	r3, #1
 8000890:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000892:	f107 0310 	add.w	r3, r7, #16
 8000896:	4619      	mov	r1, r3
 8000898:	4815      	ldr	r0, [pc, #84]	; (80008f0 <MX_GPIO_Init+0xe0>)
 800089a:	f001 fa3d 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : red1_Pin yellow1_Pin green1_Pin red2_Pin
                           yellow2_Pin green2_Pin en0_Pin en1_Pin
                           en2_Pin en3_Pin */
  GPIO_InitStruct.Pin = red1_Pin|yellow1_Pin|green1_Pin|red2_Pin
 800089e:	f641 13fe 	movw	r3, #6654	; 0x19fe
 80008a2:	613b      	str	r3, [r7, #16]
                          |yellow2_Pin|green2_Pin|en0_Pin|en1_Pin
                          |en2_Pin|en3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a4:	2301      	movs	r3, #1
 80008a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2302      	movs	r3, #2
 80008ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b0:	f107 0310 	add.w	r3, r7, #16
 80008b4:	4619      	mov	r1, r3
 80008b6:	480c      	ldr	r0, [pc, #48]	; (80008e8 <MX_GPIO_Init+0xd8>)
 80008b8:	f001 fa2e 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : a1_Pin b1_Pin c1_Pin d2_Pin
                           e2_Pin f2_Pin g2_Pin d1_Pin
                           e1_Pin f1_Pin g1_Pin a2_Pin
                           b2_Pin c2_Pin */
  GPIO_InitStruct.Pin = a1_Pin|b1_Pin|c1_Pin|d2_Pin
 80008bc:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80008c0:	613b      	str	r3, [r7, #16]
                          |e2_Pin|f2_Pin|g2_Pin|d1_Pin
                          |e1_Pin|f1_Pin|g1_Pin|a2_Pin
                          |b2_Pin|c2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c2:	2301      	movs	r3, #1
 80008c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2302      	movs	r3, #2
 80008cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ce:	f107 0310 	add.w	r3, r7, #16
 80008d2:	4619      	mov	r1, r3
 80008d4:	4805      	ldr	r0, [pc, #20]	; (80008ec <MX_GPIO_Init+0xdc>)
 80008d6:	f001 fa1f 	bl	8001d18 <HAL_GPIO_Init>

}
 80008da:	bf00      	nop
 80008dc:	3720      	adds	r7, #32
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40021000 	.word	0x40021000
 80008e8:	40010800 	.word	0x40010800
 80008ec:	40010c00 	.word	0x40010c00
 80008f0:	40011000 	.word	0x40011000

080008f4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	SCH_Update();
 80008fc:	f000 fe84 	bl	8001608 <SCH_Update>
//	timerRun();
	getKeyinput();
 8000900:	f7ff fc80 	bl	8000204 <getKeyinput>
}
 8000904:	bf00      	nop
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000910:	b672      	cpsid	i
}
 8000912:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000914:	e7fe      	b.n	8000914 <Error_Handler+0x8>
	...

08000918 <turnoffAll>:


#include "scanLed.h"

int enableChange = 0;
void turnoffAll(){
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, SET);
 800091c:	2201      	movs	r2, #1
 800091e:	2102      	movs	r1, #2
 8000920:	480e      	ldr	r0, [pc, #56]	; (800095c <turnoffAll+0x44>)
 8000922:	f001 fb8a 	bl	800203a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, SET);
 8000926:	2201      	movs	r2, #1
 8000928:	2110      	movs	r1, #16
 800092a:	480c      	ldr	r0, [pc, #48]	; (800095c <turnoffAll+0x44>)
 800092c:	f001 fb85 	bl	800203a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, SET);
 8000930:	2201      	movs	r2, #1
 8000932:	2104      	movs	r1, #4
 8000934:	4809      	ldr	r0, [pc, #36]	; (800095c <turnoffAll+0x44>)
 8000936:	f001 fb80 	bl	800203a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, SET);
 800093a:	2201      	movs	r2, #1
 800093c:	2120      	movs	r1, #32
 800093e:	4807      	ldr	r0, [pc, #28]	; (800095c <turnoffAll+0x44>)
 8000940:	f001 fb7b 	bl	800203a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, SET);
 8000944:	2201      	movs	r2, #1
 8000946:	2140      	movs	r1, #64	; 0x40
 8000948:	4804      	ldr	r0, [pc, #16]	; (800095c <turnoffAll+0x44>)
 800094a:	f001 fb76 	bl	800203a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, SET);
 800094e:	2201      	movs	r2, #1
 8000950:	2108      	movs	r1, #8
 8000952:	4802      	ldr	r0, [pc, #8]	; (800095c <turnoffAll+0x44>)
 8000954:	f001 fb71 	bl	800203a <HAL_GPIO_WritePin>
}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40010800 	.word	0x40010800

08000960 <display7SEGtopbottom>:
void display7SEGtopbottom(int num){
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
	  if (num == 0){
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d123      	bne.n	80009b6 <display7SEGtopbottom+0x56>
		  HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	2101      	movs	r1, #1
 8000972:	48c2      	ldr	r0, [pc, #776]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000974:	f001 fb61 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, RESET);
 8000978:	2200      	movs	r2, #0
 800097a:	2102      	movs	r1, #2
 800097c:	48bf      	ldr	r0, [pc, #764]	; (8000c7c <display7SEGtopbottom+0x31c>)
 800097e:	f001 fb5c 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	2104      	movs	r1, #4
 8000986:	48bd      	ldr	r0, [pc, #756]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000988:	f001 fb57 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, RESET);
 800098c:	2200      	movs	r2, #0
 800098e:	2108      	movs	r1, #8
 8000990:	48ba      	ldr	r0, [pc, #744]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000992:	f001 fb52 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	2110      	movs	r1, #16
 800099a:	48b8      	ldr	r0, [pc, #736]	; (8000c7c <display7SEGtopbottom+0x31c>)
 800099c:	f001 fb4d 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2120      	movs	r1, #32
 80009a4:	48b5      	ldr	r0, [pc, #724]	; (8000c7c <display7SEGtopbottom+0x31c>)
 80009a6:	f001 fb48 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, SET);
 80009aa:	2201      	movs	r2, #1
 80009ac:	2140      	movs	r1, #64	; 0x40
 80009ae:	48b3      	ldr	r0, [pc, #716]	; (8000c7c <display7SEGtopbottom+0x31c>)
 80009b0:	f001 fb43 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, RESET);
		  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, SET);
		  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, RESET);
		  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, RESET);
	  }
}
 80009b4:	e15d      	b.n	8000c72 <display7SEGtopbottom+0x312>
	  else if (num == 1){
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d123      	bne.n	8000a04 <display7SEGtopbottom+0xa4>
		  HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, SET);
 80009bc:	2201      	movs	r2, #1
 80009be:	2101      	movs	r1, #1
 80009c0:	48ae      	ldr	r0, [pc, #696]	; (8000c7c <display7SEGtopbottom+0x31c>)
 80009c2:	f001 fb3a 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2102      	movs	r1, #2
 80009ca:	48ac      	ldr	r0, [pc, #688]	; (8000c7c <display7SEGtopbottom+0x31c>)
 80009cc:	f001 fb35 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, RESET);
 80009d0:	2200      	movs	r2, #0
 80009d2:	2104      	movs	r1, #4
 80009d4:	48a9      	ldr	r0, [pc, #676]	; (8000c7c <display7SEGtopbottom+0x31c>)
 80009d6:	f001 fb30 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, SET);
 80009da:	2201      	movs	r2, #1
 80009dc:	2108      	movs	r1, #8
 80009de:	48a7      	ldr	r0, [pc, #668]	; (8000c7c <display7SEGtopbottom+0x31c>)
 80009e0:	f001 fb2b 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, SET);
 80009e4:	2201      	movs	r2, #1
 80009e6:	2110      	movs	r1, #16
 80009e8:	48a4      	ldr	r0, [pc, #656]	; (8000c7c <display7SEGtopbottom+0x31c>)
 80009ea:	f001 fb26 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, SET);
 80009ee:	2201      	movs	r2, #1
 80009f0:	2120      	movs	r1, #32
 80009f2:	48a2      	ldr	r0, [pc, #648]	; (8000c7c <display7SEGtopbottom+0x31c>)
 80009f4:	f001 fb21 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, SET);
 80009f8:	2201      	movs	r2, #1
 80009fa:	2140      	movs	r1, #64	; 0x40
 80009fc:	489f      	ldr	r0, [pc, #636]	; (8000c7c <display7SEGtopbottom+0x31c>)
 80009fe:	f001 fb1c 	bl	800203a <HAL_GPIO_WritePin>
}
 8000a02:	e136      	b.n	8000c72 <display7SEGtopbottom+0x312>
	  else if (num == 2){
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2b02      	cmp	r3, #2
 8000a08:	d123      	bne.n	8000a52 <display7SEGtopbottom+0xf2>
		  HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	489b      	ldr	r0, [pc, #620]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000a10:	f001 fb13 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	2102      	movs	r1, #2
 8000a18:	4898      	ldr	r0, [pc, #608]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000a1a:	f001 fb0e 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, SET);
 8000a1e:	2201      	movs	r2, #1
 8000a20:	2104      	movs	r1, #4
 8000a22:	4896      	ldr	r0, [pc, #600]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000a24:	f001 fb09 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, RESET);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2108      	movs	r1, #8
 8000a2c:	4893      	ldr	r0, [pc, #588]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000a2e:	f001 fb04 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2110      	movs	r1, #16
 8000a36:	4891      	ldr	r0, [pc, #580]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000a38:	f001 faff 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, SET);
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	2120      	movs	r1, #32
 8000a40:	488e      	ldr	r0, [pc, #568]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000a42:	f001 fafa 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, RESET);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2140      	movs	r1, #64	; 0x40
 8000a4a:	488c      	ldr	r0, [pc, #560]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000a4c:	f001 faf5 	bl	800203a <HAL_GPIO_WritePin>
}
 8000a50:	e10f      	b.n	8000c72 <display7SEGtopbottom+0x312>
	  else if (num == 3){
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2b03      	cmp	r3, #3
 8000a56:	d123      	bne.n	8000aa0 <display7SEGtopbottom+0x140>
		  HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	4887      	ldr	r0, [pc, #540]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000a5e:	f001 faec 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, RESET);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2102      	movs	r1, #2
 8000a66:	4885      	ldr	r0, [pc, #532]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000a68:	f001 fae7 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, RESET);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2104      	movs	r1, #4
 8000a70:	4882      	ldr	r0, [pc, #520]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000a72:	f001 fae2 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, RESET);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2108      	movs	r1, #8
 8000a7a:	4880      	ldr	r0, [pc, #512]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000a7c:	f001 fadd 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, SET);
 8000a80:	2201      	movs	r2, #1
 8000a82:	2110      	movs	r1, #16
 8000a84:	487d      	ldr	r0, [pc, #500]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000a86:	f001 fad8 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, SET);
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	2120      	movs	r1, #32
 8000a8e:	487b      	ldr	r0, [pc, #492]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000a90:	f001 fad3 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, RESET);
 8000a94:	2200      	movs	r2, #0
 8000a96:	2140      	movs	r1, #64	; 0x40
 8000a98:	4878      	ldr	r0, [pc, #480]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000a9a:	f001 face 	bl	800203a <HAL_GPIO_WritePin>
}
 8000a9e:	e0e8      	b.n	8000c72 <display7SEGtopbottom+0x312>
	  else if (num == 4){
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2b04      	cmp	r3, #4
 8000aa4:	d123      	bne.n	8000aee <display7SEGtopbottom+0x18e>
		  HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, SET);
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	4874      	ldr	r0, [pc, #464]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000aac:	f001 fac5 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2102      	movs	r1, #2
 8000ab4:	4871      	ldr	r0, [pc, #452]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000ab6:	f001 fac0 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2104      	movs	r1, #4
 8000abe:	486f      	ldr	r0, [pc, #444]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000ac0:	f001 fabb 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, SET);
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	2108      	movs	r1, #8
 8000ac8:	486c      	ldr	r0, [pc, #432]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000aca:	f001 fab6 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, SET);
 8000ace:	2201      	movs	r2, #1
 8000ad0:	2110      	movs	r1, #16
 8000ad2:	486a      	ldr	r0, [pc, #424]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000ad4:	f001 fab1 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2120      	movs	r1, #32
 8000adc:	4867      	ldr	r0, [pc, #412]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000ade:	f001 faac 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2140      	movs	r1, #64	; 0x40
 8000ae6:	4865      	ldr	r0, [pc, #404]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000ae8:	f001 faa7 	bl	800203a <HAL_GPIO_WritePin>
}
 8000aec:	e0c1      	b.n	8000c72 <display7SEGtopbottom+0x312>
	  else if (num == 5){
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2b05      	cmp	r3, #5
 8000af2:	d123      	bne.n	8000b3c <display7SEGtopbottom+0x1dc>
		  HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, RESET);
 8000af4:	2200      	movs	r2, #0
 8000af6:	2101      	movs	r1, #1
 8000af8:	4860      	ldr	r0, [pc, #384]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000afa:	f001 fa9e 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, SET);
 8000afe:	2201      	movs	r2, #1
 8000b00:	2102      	movs	r1, #2
 8000b02:	485e      	ldr	r0, [pc, #376]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000b04:	f001 fa99 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, RESET);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	2104      	movs	r1, #4
 8000b0c:	485b      	ldr	r0, [pc, #364]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000b0e:	f001 fa94 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2108      	movs	r1, #8
 8000b16:	4859      	ldr	r0, [pc, #356]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000b18:	f001 fa8f 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, SET);
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	2110      	movs	r1, #16
 8000b20:	4856      	ldr	r0, [pc, #344]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000b22:	f001 fa8a 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2120      	movs	r1, #32
 8000b2a:	4854      	ldr	r0, [pc, #336]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000b2c:	f001 fa85 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, RESET);
 8000b30:	2200      	movs	r2, #0
 8000b32:	2140      	movs	r1, #64	; 0x40
 8000b34:	4851      	ldr	r0, [pc, #324]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000b36:	f001 fa80 	bl	800203a <HAL_GPIO_WritePin>
}
 8000b3a:	e09a      	b.n	8000c72 <display7SEGtopbottom+0x312>
	  else if (num == 6){
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2b06      	cmp	r3, #6
 8000b40:	d123      	bne.n	8000b8a <display7SEGtopbottom+0x22a>
		  HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, RESET);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2101      	movs	r1, #1
 8000b46:	484d      	ldr	r0, [pc, #308]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000b48:	f001 fa77 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, SET);
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	2102      	movs	r1, #2
 8000b50:	484a      	ldr	r0, [pc, #296]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000b52:	f001 fa72 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, RESET);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2104      	movs	r1, #4
 8000b5a:	4848      	ldr	r0, [pc, #288]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000b5c:	f001 fa6d 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, RESET);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2108      	movs	r1, #8
 8000b64:	4845      	ldr	r0, [pc, #276]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000b66:	f001 fa68 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, RESET);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2110      	movs	r1, #16
 8000b6e:	4843      	ldr	r0, [pc, #268]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000b70:	f001 fa63 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2120      	movs	r1, #32
 8000b78:	4840      	ldr	r0, [pc, #256]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000b7a:	f001 fa5e 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2140      	movs	r1, #64	; 0x40
 8000b82:	483e      	ldr	r0, [pc, #248]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000b84:	f001 fa59 	bl	800203a <HAL_GPIO_WritePin>
}
 8000b88:	e073      	b.n	8000c72 <display7SEGtopbottom+0x312>
	  else if (num == 7){
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2b07      	cmp	r3, #7
 8000b8e:	d123      	bne.n	8000bd8 <display7SEGtopbottom+0x278>
		  HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, RESET);
 8000b90:	2200      	movs	r2, #0
 8000b92:	2101      	movs	r1, #1
 8000b94:	4839      	ldr	r0, [pc, #228]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000b96:	f001 fa50 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2102      	movs	r1, #2
 8000b9e:	4837      	ldr	r0, [pc, #220]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000ba0:	f001 fa4b 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, RESET);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2104      	movs	r1, #4
 8000ba8:	4834      	ldr	r0, [pc, #208]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000baa:	f001 fa46 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, SET);
 8000bae:	2201      	movs	r2, #1
 8000bb0:	2108      	movs	r1, #8
 8000bb2:	4832      	ldr	r0, [pc, #200]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000bb4:	f001 fa41 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, SET);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	2110      	movs	r1, #16
 8000bbc:	482f      	ldr	r0, [pc, #188]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000bbe:	f001 fa3c 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, SET);
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	2120      	movs	r1, #32
 8000bc6:	482d      	ldr	r0, [pc, #180]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000bc8:	f001 fa37 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, SET);
 8000bcc:	2201      	movs	r2, #1
 8000bce:	2140      	movs	r1, #64	; 0x40
 8000bd0:	482a      	ldr	r0, [pc, #168]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000bd2:	f001 fa32 	bl	800203a <HAL_GPIO_WritePin>
}
 8000bd6:	e04c      	b.n	8000c72 <display7SEGtopbottom+0x312>
	  else if (num == 8){
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2b08      	cmp	r3, #8
 8000bdc:	d123      	bne.n	8000c26 <display7SEGtopbottom+0x2c6>
		  HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, RESET);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2101      	movs	r1, #1
 8000be2:	4826      	ldr	r0, [pc, #152]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000be4:	f001 fa29 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, RESET);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2102      	movs	r1, #2
 8000bec:	4823      	ldr	r0, [pc, #140]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000bee:	f001 fa24 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2104      	movs	r1, #4
 8000bf6:	4821      	ldr	r0, [pc, #132]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000bf8:	f001 fa1f 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, RESET);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2108      	movs	r1, #8
 8000c00:	481e      	ldr	r0, [pc, #120]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000c02:	f001 fa1a 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2110      	movs	r1, #16
 8000c0a:	481c      	ldr	r0, [pc, #112]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000c0c:	f001 fa15 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, RESET);
 8000c10:	2200      	movs	r2, #0
 8000c12:	2120      	movs	r1, #32
 8000c14:	4819      	ldr	r0, [pc, #100]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000c16:	f001 fa10 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2140      	movs	r1, #64	; 0x40
 8000c1e:	4817      	ldr	r0, [pc, #92]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000c20:	f001 fa0b 	bl	800203a <HAL_GPIO_WritePin>
}
 8000c24:	e025      	b.n	8000c72 <display7SEGtopbottom+0x312>
	  else if (num == 9){
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2b09      	cmp	r3, #9
 8000c2a:	d122      	bne.n	8000c72 <display7SEGtopbottom+0x312>
		  HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, RESET);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2101      	movs	r1, #1
 8000c30:	4812      	ldr	r0, [pc, #72]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000c32:	f001 fa02 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, RESET);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2102      	movs	r1, #2
 8000c3a:	4810      	ldr	r0, [pc, #64]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000c3c:	f001 f9fd 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, RESET);
 8000c40:	2200      	movs	r2, #0
 8000c42:	2104      	movs	r1, #4
 8000c44:	480d      	ldr	r0, [pc, #52]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000c46:	f001 f9f8 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2108      	movs	r1, #8
 8000c4e:	480b      	ldr	r0, [pc, #44]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000c50:	f001 f9f3 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, SET);
 8000c54:	2201      	movs	r2, #1
 8000c56:	2110      	movs	r1, #16
 8000c58:	4808      	ldr	r0, [pc, #32]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000c5a:	f001 f9ee 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2120      	movs	r1, #32
 8000c62:	4806      	ldr	r0, [pc, #24]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000c64:	f001 f9e9 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, RESET);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2140      	movs	r1, #64	; 0x40
 8000c6c:	4803      	ldr	r0, [pc, #12]	; (8000c7c <display7SEGtopbottom+0x31c>)
 8000c6e:	f001 f9e4 	bl	800203a <HAL_GPIO_WritePin>
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40010c00 	.word	0x40010c00

08000c80 <display7SEGleftright>:
void display7SEGleftright(int num){
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	  if (num == 0){
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d129      	bne.n	8000ce2 <display7SEGleftright+0x62>
		  HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2180      	movs	r1, #128	; 0x80
 8000c92:	48c8      	ldr	r0, [pc, #800]	; (8000fb4 <display7SEGleftright+0x334>)
 8000c94:	f001 f9d1 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, RESET);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c9e:	48c5      	ldr	r0, [pc, #788]	; (8000fb4 <display7SEGleftright+0x334>)
 8000ca0:	f001 f9cb 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, RESET);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000caa:	48c2      	ldr	r0, [pc, #776]	; (8000fb4 <display7SEGleftright+0x334>)
 8000cac:	f001 f9c5 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, RESET);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cb6:	48bf      	ldr	r0, [pc, #764]	; (8000fb4 <display7SEGleftright+0x334>)
 8000cb8:	f001 f9bf 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, RESET);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cc2:	48bc      	ldr	r0, [pc, #752]	; (8000fb4 <display7SEGleftright+0x334>)
 8000cc4:	f001 f9b9 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, RESET);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cce:	48b9      	ldr	r0, [pc, #740]	; (8000fb4 <display7SEGleftright+0x334>)
 8000cd0:	f001 f9b3 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, SET);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cda:	48b6      	ldr	r0, [pc, #728]	; (8000fb4 <display7SEGleftright+0x334>)
 8000cdc:	f001 f9ad 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, RESET);
		  HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, SET);
		  HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, RESET);
		  HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, RESET);
	  }
}
 8000ce0:	e196      	b.n	8001010 <display7SEGleftright+0x390>
	  else if (num == 1){
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d129      	bne.n	8000d3c <display7SEGleftright+0xbc>
		  HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, SET);
 8000ce8:	2201      	movs	r2, #1
 8000cea:	2180      	movs	r1, #128	; 0x80
 8000cec:	48b1      	ldr	r0, [pc, #708]	; (8000fb4 <display7SEGleftright+0x334>)
 8000cee:	f001 f9a4 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, RESET);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cf8:	48ae      	ldr	r0, [pc, #696]	; (8000fb4 <display7SEGleftright+0x334>)
 8000cfa:	f001 f99e 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, RESET);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d04:	48ab      	ldr	r0, [pc, #684]	; (8000fb4 <display7SEGleftright+0x334>)
 8000d06:	f001 f998 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, SET);
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d10:	48a8      	ldr	r0, [pc, #672]	; (8000fb4 <display7SEGleftright+0x334>)
 8000d12:	f001 f992 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, SET);
 8000d16:	2201      	movs	r2, #1
 8000d18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d1c:	48a5      	ldr	r0, [pc, #660]	; (8000fb4 <display7SEGleftright+0x334>)
 8000d1e:	f001 f98c 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, SET);
 8000d22:	2201      	movs	r2, #1
 8000d24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d28:	48a2      	ldr	r0, [pc, #648]	; (8000fb4 <display7SEGleftright+0x334>)
 8000d2a:	f001 f986 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, SET);
 8000d2e:	2201      	movs	r2, #1
 8000d30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d34:	489f      	ldr	r0, [pc, #636]	; (8000fb4 <display7SEGleftright+0x334>)
 8000d36:	f001 f980 	bl	800203a <HAL_GPIO_WritePin>
}
 8000d3a:	e169      	b.n	8001010 <display7SEGleftright+0x390>
	  else if (num == 2){
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d129      	bne.n	8000d96 <display7SEGleftright+0x116>
		  HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, RESET);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2180      	movs	r1, #128	; 0x80
 8000d46:	489b      	ldr	r0, [pc, #620]	; (8000fb4 <display7SEGleftright+0x334>)
 8000d48:	f001 f977 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, RESET);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d52:	4898      	ldr	r0, [pc, #608]	; (8000fb4 <display7SEGleftright+0x334>)
 8000d54:	f001 f971 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, SET);
 8000d58:	2201      	movs	r2, #1
 8000d5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d5e:	4895      	ldr	r0, [pc, #596]	; (8000fb4 <display7SEGleftright+0x334>)
 8000d60:	f001 f96b 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d6a:	4892      	ldr	r0, [pc, #584]	; (8000fb4 <display7SEGleftright+0x334>)
 8000d6c:	f001 f965 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, RESET);
 8000d70:	2200      	movs	r2, #0
 8000d72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d76:	488f      	ldr	r0, [pc, #572]	; (8000fb4 <display7SEGleftright+0x334>)
 8000d78:	f001 f95f 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, SET);
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d82:	488c      	ldr	r0, [pc, #560]	; (8000fb4 <display7SEGleftright+0x334>)
 8000d84:	f001 f959 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, RESET);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d8e:	4889      	ldr	r0, [pc, #548]	; (8000fb4 <display7SEGleftright+0x334>)
 8000d90:	f001 f953 	bl	800203a <HAL_GPIO_WritePin>
}
 8000d94:	e13c      	b.n	8001010 <display7SEGleftright+0x390>
	  else if (num == 3){
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2b03      	cmp	r3, #3
 8000d9a:	d129      	bne.n	8000df0 <display7SEGleftright+0x170>
		  HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, RESET);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2180      	movs	r1, #128	; 0x80
 8000da0:	4884      	ldr	r0, [pc, #528]	; (8000fb4 <display7SEGleftright+0x334>)
 8000da2:	f001 f94a 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, RESET);
 8000da6:	2200      	movs	r2, #0
 8000da8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dac:	4881      	ldr	r0, [pc, #516]	; (8000fb4 <display7SEGleftright+0x334>)
 8000dae:	f001 f944 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, RESET);
 8000db2:	2200      	movs	r2, #0
 8000db4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000db8:	487e      	ldr	r0, [pc, #504]	; (8000fb4 <display7SEGleftright+0x334>)
 8000dba:	f001 f93e 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, RESET);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dc4:	487b      	ldr	r0, [pc, #492]	; (8000fb4 <display7SEGleftright+0x334>)
 8000dc6:	f001 f938 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, SET);
 8000dca:	2201      	movs	r2, #1
 8000dcc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dd0:	4878      	ldr	r0, [pc, #480]	; (8000fb4 <display7SEGleftright+0x334>)
 8000dd2:	f001 f932 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, SET);
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ddc:	4875      	ldr	r0, [pc, #468]	; (8000fb4 <display7SEGleftright+0x334>)
 8000dde:	f001 f92c 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000de8:	4872      	ldr	r0, [pc, #456]	; (8000fb4 <display7SEGleftright+0x334>)
 8000dea:	f001 f926 	bl	800203a <HAL_GPIO_WritePin>
}
 8000dee:	e10f      	b.n	8001010 <display7SEGleftright+0x390>
	  else if (num == 4){
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2b04      	cmp	r3, #4
 8000df4:	d129      	bne.n	8000e4a <display7SEGleftright+0x1ca>
		  HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, SET);
 8000df6:	2201      	movs	r2, #1
 8000df8:	2180      	movs	r1, #128	; 0x80
 8000dfa:	486e      	ldr	r0, [pc, #440]	; (8000fb4 <display7SEGleftright+0x334>)
 8000dfc:	f001 f91d 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, RESET);
 8000e00:	2200      	movs	r2, #0
 8000e02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e06:	486b      	ldr	r0, [pc, #428]	; (8000fb4 <display7SEGleftright+0x334>)
 8000e08:	f001 f917 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, RESET);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e12:	4868      	ldr	r0, [pc, #416]	; (8000fb4 <display7SEGleftright+0x334>)
 8000e14:	f001 f911 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, SET);
 8000e18:	2201      	movs	r2, #1
 8000e1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e1e:	4865      	ldr	r0, [pc, #404]	; (8000fb4 <display7SEGleftright+0x334>)
 8000e20:	f001 f90b 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, SET);
 8000e24:	2201      	movs	r2, #1
 8000e26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e2a:	4862      	ldr	r0, [pc, #392]	; (8000fb4 <display7SEGleftright+0x334>)
 8000e2c:	f001 f905 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, RESET);
 8000e30:	2200      	movs	r2, #0
 8000e32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e36:	485f      	ldr	r0, [pc, #380]	; (8000fb4 <display7SEGleftright+0x334>)
 8000e38:	f001 f8ff 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, RESET);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e42:	485c      	ldr	r0, [pc, #368]	; (8000fb4 <display7SEGleftright+0x334>)
 8000e44:	f001 f8f9 	bl	800203a <HAL_GPIO_WritePin>
}
 8000e48:	e0e2      	b.n	8001010 <display7SEGleftright+0x390>
	  else if (num == 5){
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2b05      	cmp	r3, #5
 8000e4e:	d129      	bne.n	8000ea4 <display7SEGleftright+0x224>
		  HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, RESET);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2180      	movs	r1, #128	; 0x80
 8000e54:	4857      	ldr	r0, [pc, #348]	; (8000fb4 <display7SEGleftright+0x334>)
 8000e56:	f001 f8f0 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, SET);
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e60:	4854      	ldr	r0, [pc, #336]	; (8000fb4 <display7SEGleftright+0x334>)
 8000e62:	f001 f8ea 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, RESET);
 8000e66:	2200      	movs	r2, #0
 8000e68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e6c:	4851      	ldr	r0, [pc, #324]	; (8000fb4 <display7SEGleftright+0x334>)
 8000e6e:	f001 f8e4 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, RESET);
 8000e72:	2200      	movs	r2, #0
 8000e74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e78:	484e      	ldr	r0, [pc, #312]	; (8000fb4 <display7SEGleftright+0x334>)
 8000e7a:	f001 f8de 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, SET);
 8000e7e:	2201      	movs	r2, #1
 8000e80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e84:	484b      	ldr	r0, [pc, #300]	; (8000fb4 <display7SEGleftright+0x334>)
 8000e86:	f001 f8d8 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, RESET);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e90:	4848      	ldr	r0, [pc, #288]	; (8000fb4 <display7SEGleftright+0x334>)
 8000e92:	f001 f8d2 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, RESET);
 8000e96:	2200      	movs	r2, #0
 8000e98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e9c:	4845      	ldr	r0, [pc, #276]	; (8000fb4 <display7SEGleftright+0x334>)
 8000e9e:	f001 f8cc 	bl	800203a <HAL_GPIO_WritePin>
}
 8000ea2:	e0b5      	b.n	8001010 <display7SEGleftright+0x390>
	  else if (num == 6){
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2b06      	cmp	r3, #6
 8000ea8:	d129      	bne.n	8000efe <display7SEGleftright+0x27e>
		  HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, RESET);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2180      	movs	r1, #128	; 0x80
 8000eae:	4841      	ldr	r0, [pc, #260]	; (8000fb4 <display7SEGleftright+0x334>)
 8000eb0:	f001 f8c3 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, SET);
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eba:	483e      	ldr	r0, [pc, #248]	; (8000fb4 <display7SEGleftright+0x334>)
 8000ebc:	f001 f8bd 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, RESET);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ec6:	483b      	ldr	r0, [pc, #236]	; (8000fb4 <display7SEGleftright+0x334>)
 8000ec8:	f001 f8b7 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, RESET);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ed2:	4838      	ldr	r0, [pc, #224]	; (8000fb4 <display7SEGleftright+0x334>)
 8000ed4:	f001 f8b1 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, RESET);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ede:	4835      	ldr	r0, [pc, #212]	; (8000fb4 <display7SEGleftright+0x334>)
 8000ee0:	f001 f8ab 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, RESET);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eea:	4832      	ldr	r0, [pc, #200]	; (8000fb4 <display7SEGleftright+0x334>)
 8000eec:	f001 f8a5 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, RESET);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ef6:	482f      	ldr	r0, [pc, #188]	; (8000fb4 <display7SEGleftright+0x334>)
 8000ef8:	f001 f89f 	bl	800203a <HAL_GPIO_WritePin>
}
 8000efc:	e088      	b.n	8001010 <display7SEGleftright+0x390>
	  else if (num == 7){
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2b07      	cmp	r3, #7
 8000f02:	d129      	bne.n	8000f58 <display7SEGleftright+0x2d8>
		  HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, RESET);
 8000f04:	2200      	movs	r2, #0
 8000f06:	2180      	movs	r1, #128	; 0x80
 8000f08:	482a      	ldr	r0, [pc, #168]	; (8000fb4 <display7SEGleftright+0x334>)
 8000f0a:	f001 f896 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, RESET);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f14:	4827      	ldr	r0, [pc, #156]	; (8000fb4 <display7SEGleftright+0x334>)
 8000f16:	f001 f890 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, RESET);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f20:	4824      	ldr	r0, [pc, #144]	; (8000fb4 <display7SEGleftright+0x334>)
 8000f22:	f001 f88a 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, SET);
 8000f26:	2201      	movs	r2, #1
 8000f28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f2c:	4821      	ldr	r0, [pc, #132]	; (8000fb4 <display7SEGleftright+0x334>)
 8000f2e:	f001 f884 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, SET);
 8000f32:	2201      	movs	r2, #1
 8000f34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f38:	481e      	ldr	r0, [pc, #120]	; (8000fb4 <display7SEGleftright+0x334>)
 8000f3a:	f001 f87e 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, SET);
 8000f3e:	2201      	movs	r2, #1
 8000f40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f44:	481b      	ldr	r0, [pc, #108]	; (8000fb4 <display7SEGleftright+0x334>)
 8000f46:	f001 f878 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, SET);
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f50:	4818      	ldr	r0, [pc, #96]	; (8000fb4 <display7SEGleftright+0x334>)
 8000f52:	f001 f872 	bl	800203a <HAL_GPIO_WritePin>
}
 8000f56:	e05b      	b.n	8001010 <display7SEGleftright+0x390>
	  else if (num == 8){
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2b08      	cmp	r3, #8
 8000f5c:	d12c      	bne.n	8000fb8 <display7SEGleftright+0x338>
		  HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, RESET);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2180      	movs	r1, #128	; 0x80
 8000f62:	4814      	ldr	r0, [pc, #80]	; (8000fb4 <display7SEGleftright+0x334>)
 8000f64:	f001 f869 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, RESET);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f6e:	4811      	ldr	r0, [pc, #68]	; (8000fb4 <display7SEGleftright+0x334>)
 8000f70:	f001 f863 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, RESET);
 8000f74:	2200      	movs	r2, #0
 8000f76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f7a:	480e      	ldr	r0, [pc, #56]	; (8000fb4 <display7SEGleftright+0x334>)
 8000f7c:	f001 f85d 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, RESET);
 8000f80:	2200      	movs	r2, #0
 8000f82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f86:	480b      	ldr	r0, [pc, #44]	; (8000fb4 <display7SEGleftright+0x334>)
 8000f88:	f001 f857 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f92:	4808      	ldr	r0, [pc, #32]	; (8000fb4 <display7SEGleftright+0x334>)
 8000f94:	f001 f851 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, RESET);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f9e:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <display7SEGleftright+0x334>)
 8000fa0:	f001 f84b 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, RESET);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000faa:	4802      	ldr	r0, [pc, #8]	; (8000fb4 <display7SEGleftright+0x334>)
 8000fac:	f001 f845 	bl	800203a <HAL_GPIO_WritePin>
}
 8000fb0:	e02e      	b.n	8001010 <display7SEGleftright+0x390>
 8000fb2:	bf00      	nop
 8000fb4:	40010c00 	.word	0x40010c00
	  else if (num == 9){
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2b09      	cmp	r3, #9
 8000fbc:	d128      	bne.n	8001010 <display7SEGleftright+0x390>
		  HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, RESET);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2180      	movs	r1, #128	; 0x80
 8000fc2:	4815      	ldr	r0, [pc, #84]	; (8001018 <display7SEGleftright+0x398>)
 8000fc4:	f001 f839 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, RESET);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fce:	4812      	ldr	r0, [pc, #72]	; (8001018 <display7SEGleftright+0x398>)
 8000fd0:	f001 f833 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, RESET);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fda:	480f      	ldr	r0, [pc, #60]	; (8001018 <display7SEGleftright+0x398>)
 8000fdc:	f001 f82d 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, RESET);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fe6:	480c      	ldr	r0, [pc, #48]	; (8001018 <display7SEGleftright+0x398>)
 8000fe8:	f001 f827 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, SET);
 8000fec:	2201      	movs	r2, #1
 8000fee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ff2:	4809      	ldr	r0, [pc, #36]	; (8001018 <display7SEGleftright+0x398>)
 8000ff4:	f001 f821 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, RESET);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ffe:	4806      	ldr	r0, [pc, #24]	; (8001018 <display7SEGleftright+0x398>)
 8001000:	f001 f81b 	bl	800203a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, RESET);
 8001004:	2200      	movs	r2, #0
 8001006:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800100a:	4803      	ldr	r0, [pc, #12]	; (8001018 <display7SEGleftright+0x398>)
 800100c:	f001 f815 	bl	800203a <HAL_GPIO_WritePin>
}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40010c00 	.word	0x40010c00

0800101c <onRed1>:

void onRed1(){
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, RESET);
 8001020:	2200      	movs	r2, #0
 8001022:	2102      	movs	r1, #2
 8001024:	4807      	ldr	r0, [pc, #28]	; (8001044 <onRed1+0x28>)
 8001026:	f001 f808 	bl	800203a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, SET);
 800102a:	2201      	movs	r2, #1
 800102c:	2104      	movs	r1, #4
 800102e:	4805      	ldr	r0, [pc, #20]	; (8001044 <onRed1+0x28>)
 8001030:	f001 f803 	bl	800203a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, SET);
 8001034:	2201      	movs	r2, #1
 8001036:	2108      	movs	r1, #8
 8001038:	4802      	ldr	r0, [pc, #8]	; (8001044 <onRed1+0x28>)
 800103a:	f000 fffe 	bl	800203a <HAL_GPIO_WritePin>
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40010800 	.word	0x40010800

08001048 <onYellow1>:
void onYellow1(){
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, SET);
 800104c:	2201      	movs	r2, #1
 800104e:	2102      	movs	r1, #2
 8001050:	4807      	ldr	r0, [pc, #28]	; (8001070 <onYellow1+0x28>)
 8001052:	f000 fff2 	bl	800203a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, RESET);
 8001056:	2200      	movs	r2, #0
 8001058:	2104      	movs	r1, #4
 800105a:	4805      	ldr	r0, [pc, #20]	; (8001070 <onYellow1+0x28>)
 800105c:	f000 ffed 	bl	800203a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, SET);
 8001060:	2201      	movs	r2, #1
 8001062:	2108      	movs	r1, #8
 8001064:	4802      	ldr	r0, [pc, #8]	; (8001070 <onYellow1+0x28>)
 8001066:	f000 ffe8 	bl	800203a <HAL_GPIO_WritePin>
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40010800 	.word	0x40010800

08001074 <onGreen1>:
void onGreen1(){
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, SET);
 8001078:	2201      	movs	r2, #1
 800107a:	2102      	movs	r1, #2
 800107c:	4807      	ldr	r0, [pc, #28]	; (800109c <onGreen1+0x28>)
 800107e:	f000 ffdc 	bl	800203a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, SET);
 8001082:	2201      	movs	r2, #1
 8001084:	2104      	movs	r1, #4
 8001086:	4805      	ldr	r0, [pc, #20]	; (800109c <onGreen1+0x28>)
 8001088:	f000 ffd7 	bl	800203a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	2108      	movs	r1, #8
 8001090:	4802      	ldr	r0, [pc, #8]	; (800109c <onGreen1+0x28>)
 8001092:	f000 ffd2 	bl	800203a <HAL_GPIO_WritePin>
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40010800 	.word	0x40010800

080010a0 <onRed2>:
void onRed2(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, RESET);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2110      	movs	r1, #16
 80010a8:	4807      	ldr	r0, [pc, #28]	; (80010c8 <onRed2+0x28>)
 80010aa:	f000 ffc6 	bl	800203a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, SET);
 80010ae:	2201      	movs	r2, #1
 80010b0:	2120      	movs	r1, #32
 80010b2:	4805      	ldr	r0, [pc, #20]	; (80010c8 <onRed2+0x28>)
 80010b4:	f000 ffc1 	bl	800203a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, SET);
 80010b8:	2201      	movs	r2, #1
 80010ba:	2140      	movs	r1, #64	; 0x40
 80010bc:	4802      	ldr	r0, [pc, #8]	; (80010c8 <onRed2+0x28>)
 80010be:	f000 ffbc 	bl	800203a <HAL_GPIO_WritePin>
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40010800 	.word	0x40010800

080010cc <onYellow2>:
void onYellow2(){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, SET);
 80010d0:	2201      	movs	r2, #1
 80010d2:	2110      	movs	r1, #16
 80010d4:	4807      	ldr	r0, [pc, #28]	; (80010f4 <onYellow2+0x28>)
 80010d6:	f000 ffb0 	bl	800203a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, RESET);
 80010da:	2200      	movs	r2, #0
 80010dc:	2120      	movs	r1, #32
 80010de:	4805      	ldr	r0, [pc, #20]	; (80010f4 <onYellow2+0x28>)
 80010e0:	f000 ffab 	bl	800203a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, SET);
 80010e4:	2201      	movs	r2, #1
 80010e6:	2140      	movs	r1, #64	; 0x40
 80010e8:	4802      	ldr	r0, [pc, #8]	; (80010f4 <onYellow2+0x28>)
 80010ea:	f000 ffa6 	bl	800203a <HAL_GPIO_WritePin>
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40010800 	.word	0x40010800

080010f8 <onGreen2>:
void onGreen2(){
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, SET);
 80010fc:	2201      	movs	r2, #1
 80010fe:	2110      	movs	r1, #16
 8001100:	4807      	ldr	r0, [pc, #28]	; (8001120 <onGreen2+0x28>)
 8001102:	f000 ff9a 	bl	800203a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, SET);
 8001106:	2201      	movs	r2, #1
 8001108:	2120      	movs	r1, #32
 800110a:	4805      	ldr	r0, [pc, #20]	; (8001120 <onGreen2+0x28>)
 800110c:	f000 ff95 	bl	800203a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, RESET);
 8001110:	2200      	movs	r2, #0
 8001112:	2140      	movs	r1, #64	; 0x40
 8001114:	4802      	ldr	r0, [pc, #8]	; (8001120 <onGreen2+0x28>)
 8001116:	f000 ff90 	bl	800203a <HAL_GPIO_WritePin>
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40010800 	.word	0x40010800

08001124 <toggleRed>:
void toggleRed(){
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
	if (enableChange == 0){
 8001128:	4b08      	ldr	r3, [pc, #32]	; (800114c <toggleRed+0x28>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d104      	bne.n	800113a <toggleRed+0x16>
		onRed1();
 8001130:	f7ff ff74 	bl	800101c <onRed1>
		onRed2();
 8001134:	f7ff ffb4 	bl	80010a0 <onRed2>
	}
	else if (enableChange == 1){
		turnoffAll();
	}
}
 8001138:	e005      	b.n	8001146 <toggleRed+0x22>
	else if (enableChange == 1){
 800113a:	4b04      	ldr	r3, [pc, #16]	; (800114c <toggleRed+0x28>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d101      	bne.n	8001146 <toggleRed+0x22>
		turnoffAll();
 8001142:	f7ff fbe9 	bl	8000918 <turnoffAll>
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	200000ec 	.word	0x200000ec

08001150 <toggleYellow>:
void toggleYellow(){
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
	if (enableChange == 0){
 8001154:	4b08      	ldr	r3, [pc, #32]	; (8001178 <toggleYellow+0x28>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d104      	bne.n	8001166 <toggleYellow+0x16>
		onYellow1();
 800115c:	f7ff ff74 	bl	8001048 <onYellow1>
		onYellow2();
 8001160:	f7ff ffb4 	bl	80010cc <onYellow2>
	}
	else if (enableChange == 1){
		turnoffAll();
	}
}
 8001164:	e005      	b.n	8001172 <toggleYellow+0x22>
	else if (enableChange == 1){
 8001166:	4b04      	ldr	r3, [pc, #16]	; (8001178 <toggleYellow+0x28>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d101      	bne.n	8001172 <toggleYellow+0x22>
		turnoffAll();
 800116e:	f7ff fbd3 	bl	8000918 <turnoffAll>
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	200000ec 	.word	0x200000ec

0800117c <toggleGreen>:
void toggleGreen(){
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
	if (enableChange == 0){
 8001180:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <toggleGreen+0x28>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d104      	bne.n	8001192 <toggleGreen+0x16>
		onGreen1();
 8001188:	f7ff ff74 	bl	8001074 <onGreen1>
		onGreen2();
 800118c:	f7ff ffb4 	bl	80010f8 <onGreen2>
	}
	else if (enableChange == 1){
		turnoffAll();
	}
}
 8001190:	e005      	b.n	800119e <toggleGreen+0x22>
	else if (enableChange == 1){
 8001192:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <toggleGreen+0x28>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2b01      	cmp	r3, #1
 8001198:	d101      	bne.n	800119e <toggleGreen+0x22>
		turnoffAll();
 800119a:	f7ff fbbd 	bl	8000918 <turnoffAll>
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	200000ec 	.word	0x200000ec

080011a8 <counterBoard>:

void counterBoard(int num1, int num2){
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
	int index1 = num1/10;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a3a      	ldr	r2, [pc, #232]	; (80012a0 <counterBoard+0xf8>)
 80011b6:	fb82 1203 	smull	r1, r2, r2, r3
 80011ba:	1092      	asrs	r2, r2, #2
 80011bc:	17db      	asrs	r3, r3, #31
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	617b      	str	r3, [r7, #20]
	int index2 = num1%10;
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	4b36      	ldr	r3, [pc, #216]	; (80012a0 <counterBoard+0xf8>)
 80011c6:	fb83 1302 	smull	r1, r3, r3, r2
 80011ca:	1099      	asrs	r1, r3, #2
 80011cc:	17d3      	asrs	r3, r2, #31
 80011ce:	1ac9      	subs	r1, r1, r3
 80011d0:	460b      	mov	r3, r1
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	440b      	add	r3, r1
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	613b      	str	r3, [r7, #16]
	int index3 = num2/10;
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	4a30      	ldr	r2, [pc, #192]	; (80012a0 <counterBoard+0xf8>)
 80011e0:	fb82 1203 	smull	r1, r2, r2, r3
 80011e4:	1092      	asrs	r2, r2, #2
 80011e6:	17db      	asrs	r3, r3, #31
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	60fb      	str	r3, [r7, #12]
	int index4 = num2%10;
 80011ec:	683a      	ldr	r2, [r7, #0]
 80011ee:	4b2c      	ldr	r3, [pc, #176]	; (80012a0 <counterBoard+0xf8>)
 80011f0:	fb83 1302 	smull	r1, r3, r3, r2
 80011f4:	1099      	asrs	r1, r3, #2
 80011f6:	17d3      	asrs	r3, r2, #31
 80011f8:	1ac9      	subs	r1, r1, r3
 80011fa:	460b      	mov	r3, r1
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	440b      	add	r3, r1
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	60bb      	str	r3, [r7, #8]
	if (enableChange == 0){
 8001206:	4b27      	ldr	r3, [pc, #156]	; (80012a4 <counterBoard+0xfc>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d120      	bne.n	8001250 <counterBoard+0xa8>
		HAL_GPIO_WritePin(en0_GPIO_Port, en0_Pin, RESET);
 800120e:	2200      	movs	r2, #0
 8001210:	2180      	movs	r1, #128	; 0x80
 8001212:	4825      	ldr	r0, [pc, #148]	; (80012a8 <counterBoard+0x100>)
 8001214:	f000 ff11 	bl	800203a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(en1_GPIO_Port, en1_Pin, SET);
 8001218:	2201      	movs	r2, #1
 800121a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800121e:	4822      	ldr	r0, [pc, #136]	; (80012a8 <counterBoard+0x100>)
 8001220:	f000 ff0b 	bl	800203a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(en2_GPIO_Port, en2_Pin, RESET);
 8001224:	2200      	movs	r2, #0
 8001226:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800122a:	481f      	ldr	r0, [pc, #124]	; (80012a8 <counterBoard+0x100>)
 800122c:	f000 ff05 	bl	800203a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(en3_GPIO_Port, en3_Pin, SET);
 8001230:	2201      	movs	r2, #1
 8001232:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001236:	481c      	ldr	r0, [pc, #112]	; (80012a8 <counterBoard+0x100>)
 8001238:	f000 feff 	bl	800203a <HAL_GPIO_WritePin>
		display7SEGtopbottom(index1);
 800123c:	6978      	ldr	r0, [r7, #20]
 800123e:	f7ff fb8f 	bl	8000960 <display7SEGtopbottom>
		display7SEGleftright(index3);
 8001242:	68f8      	ldr	r0, [r7, #12]
 8001244:	f7ff fd1c 	bl	8000c80 <display7SEGleftright>
		enableChange = 1;
 8001248:	4b16      	ldr	r3, [pc, #88]	; (80012a4 <counterBoard+0xfc>)
 800124a:	2201      	movs	r2, #1
 800124c:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(en3_GPIO_Port, en3_Pin, RESET);
		display7SEGtopbottom(index2);
		display7SEGleftright(index4);
		enableChange = 0;
	}
}
 800124e:	e023      	b.n	8001298 <counterBoard+0xf0>
	else if (enableChange == 1){
 8001250:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <counterBoard+0xfc>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d11f      	bne.n	8001298 <counterBoard+0xf0>
		HAL_GPIO_WritePin(en0_GPIO_Port, en0_Pin, SET);
 8001258:	2201      	movs	r2, #1
 800125a:	2180      	movs	r1, #128	; 0x80
 800125c:	4812      	ldr	r0, [pc, #72]	; (80012a8 <counterBoard+0x100>)
 800125e:	f000 feec 	bl	800203a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(en1_GPIO_Port, en1_Pin, RESET);
 8001262:	2200      	movs	r2, #0
 8001264:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001268:	480f      	ldr	r0, [pc, #60]	; (80012a8 <counterBoard+0x100>)
 800126a:	f000 fee6 	bl	800203a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(en2_GPIO_Port, en2_Pin, SET);
 800126e:	2201      	movs	r2, #1
 8001270:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001274:	480c      	ldr	r0, [pc, #48]	; (80012a8 <counterBoard+0x100>)
 8001276:	f000 fee0 	bl	800203a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(en3_GPIO_Port, en3_Pin, RESET);
 800127a:	2200      	movs	r2, #0
 800127c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001280:	4809      	ldr	r0, [pc, #36]	; (80012a8 <counterBoard+0x100>)
 8001282:	f000 feda 	bl	800203a <HAL_GPIO_WritePin>
		display7SEGtopbottom(index2);
 8001286:	6938      	ldr	r0, [r7, #16]
 8001288:	f7ff fb6a 	bl	8000960 <display7SEGtopbottom>
		display7SEGleftright(index4);
 800128c:	68b8      	ldr	r0, [r7, #8]
 800128e:	f7ff fcf7 	bl	8000c80 <display7SEGleftright>
		enableChange = 0;
 8001292:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <counterBoard+0xfc>)
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
}
 8001298:	bf00      	nop
 800129a:	3718      	adds	r7, #24
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	66666667 	.word	0x66666667
 80012a4:	200000ec 	.word	0x200000ec
 80012a8:	40010800 	.word	0x40010800

080012ac <scanLed>:
void scanLed(){
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
	switch (status){
 80012b0:	4b37      	ldr	r3, [pc, #220]	; (8001390 <scanLed+0xe4>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2b5e      	cmp	r3, #94	; 0x5e
 80012b6:	dc67      	bgt.n	8001388 <scanLed+0xdc>
 80012b8:	2b5b      	cmp	r3, #91	; 0x5b
 80012ba:	da08      	bge.n	80012ce <scanLed+0x22>
 80012bc:	2b16      	cmp	r3, #22
 80012be:	d05b      	beq.n	8001378 <scanLed+0xcc>
 80012c0:	2b16      	cmp	r3, #22
 80012c2:	dc61      	bgt.n	8001388 <scanLed+0xdc>
 80012c4:	2b14      	cmp	r3, #20
 80012c6:	d045      	beq.n	8001354 <scanLed+0xa8>
 80012c8:	2b15      	cmp	r3, #21
 80012ca:	d04c      	beq.n	8001366 <scanLed+0xba>
		counterBoard(2, yellow_time_tmp);
		break;
	case MANUAL_GREEN:
		toggleGreen();
		counterBoard(3, green_time_tmp);
	default: break;
 80012cc:	e05c      	b.n	8001388 <scanLed+0xdc>
 80012ce:	3b5b      	subs	r3, #91	; 0x5b
 80012d0:	2b03      	cmp	r3, #3
 80012d2:	d859      	bhi.n	8001388 <scanLed+0xdc>
 80012d4:	a201      	add	r2, pc, #4	; (adr r2, 80012dc <scanLed+0x30>)
 80012d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012da:	bf00      	nop
 80012dc:	080012ed 	.word	0x080012ed
 80012e0:	08001307 	.word	0x08001307
 80012e4:	08001321 	.word	0x08001321
 80012e8:	0800133b 	.word	0x0800133b
		onRed1();
 80012ec:	f7ff fe96 	bl	800101c <onRed1>
		onGreen2();
 80012f0:	f7ff ff02 	bl	80010f8 <onGreen2>
		counterBoard(red_time_show, green_time_show);
 80012f4:	4b27      	ldr	r3, [pc, #156]	; (8001394 <scanLed+0xe8>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a27      	ldr	r2, [pc, #156]	; (8001398 <scanLed+0xec>)
 80012fa:	6812      	ldr	r2, [r2, #0]
 80012fc:	4611      	mov	r1, r2
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff ff52 	bl	80011a8 <counterBoard>
		break;
 8001304:	e041      	b.n	800138a <scanLed+0xde>
		onRed1();
 8001306:	f7ff fe89 	bl	800101c <onRed1>
		onYellow2();
 800130a:	f7ff fedf 	bl	80010cc <onYellow2>
		counterBoard(red_time_show, yellow_time_show);
 800130e:	4b21      	ldr	r3, [pc, #132]	; (8001394 <scanLed+0xe8>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a22      	ldr	r2, [pc, #136]	; (800139c <scanLed+0xf0>)
 8001314:	6812      	ldr	r2, [r2, #0]
 8001316:	4611      	mov	r1, r2
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ff45 	bl	80011a8 <counterBoard>
		break;
 800131e:	e034      	b.n	800138a <scanLed+0xde>
		onGreen1();
 8001320:	f7ff fea8 	bl	8001074 <onGreen1>
		onRed2();
 8001324:	f7ff febc 	bl	80010a0 <onRed2>
		counterBoard(green_time_show, red_time_show);
 8001328:	4b1b      	ldr	r3, [pc, #108]	; (8001398 <scanLed+0xec>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a19      	ldr	r2, [pc, #100]	; (8001394 <scanLed+0xe8>)
 800132e:	6812      	ldr	r2, [r2, #0]
 8001330:	4611      	mov	r1, r2
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff ff38 	bl	80011a8 <counterBoard>
		break;
 8001338:	e027      	b.n	800138a <scanLed+0xde>
		onYellow1();
 800133a:	f7ff fe85 	bl	8001048 <onYellow1>
		onRed2();
 800133e:	f7ff feaf 	bl	80010a0 <onRed2>
		counterBoard(yellow_time_show, red_time_show);
 8001342:	4b16      	ldr	r3, [pc, #88]	; (800139c <scanLed+0xf0>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a13      	ldr	r2, [pc, #76]	; (8001394 <scanLed+0xe8>)
 8001348:	6812      	ldr	r2, [r2, #0]
 800134a:	4611      	mov	r1, r2
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff ff2b 	bl	80011a8 <counterBoard>
		break;
 8001352:	e01a      	b.n	800138a <scanLed+0xde>
		toggleRed();
 8001354:	f7ff fee6 	bl	8001124 <toggleRed>
		counterBoard(1, red_time_tmp);
 8001358:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <scanLed+0xf4>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4619      	mov	r1, r3
 800135e:	2001      	movs	r0, #1
 8001360:	f7ff ff22 	bl	80011a8 <counterBoard>
		break;
 8001364:	e011      	b.n	800138a <scanLed+0xde>
		toggleYellow();
 8001366:	f7ff fef3 	bl	8001150 <toggleYellow>
		counterBoard(2, yellow_time_tmp);
 800136a:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <scanLed+0xf8>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4619      	mov	r1, r3
 8001370:	2002      	movs	r0, #2
 8001372:	f7ff ff19 	bl	80011a8 <counterBoard>
		break;
 8001376:	e008      	b.n	800138a <scanLed+0xde>
		toggleGreen();
 8001378:	f7ff ff00 	bl	800117c <toggleGreen>
		counterBoard(3, green_time_tmp);
 800137c:	4b0a      	ldr	r3, [pc, #40]	; (80013a8 <scanLed+0xfc>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4619      	mov	r1, r3
 8001382:	2003      	movs	r0, #3
 8001384:	f7ff ff10 	bl	80011a8 <counterBoard>
	default: break;
 8001388:	bf00      	nop
	}
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000034 	.word	0x20000034
 8001394:	200000e0 	.word	0x200000e0
 8001398:	200000e8 	.word	0x200000e8
 800139c:	200000e4 	.word	0x200000e4
 80013a0:	2000010c 	.word	0x2000010c
 80013a4:	20000104 	.word	0x20000104
 80013a8:	20000108 	.word	0x20000108

080013ac <SCH_Add_Task>:
int timestamp = 0;
uint32_t taskid = 0;
char str[50];


uint32_t SCH_Add_Task(void (* pFunction)(), uint32_t DELAY, uint32_t PERIOD){
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b088      	sub	sp, #32
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
	worker_t * task = (worker_t *)malloc(sizeof(worker_t));
 80013b8:	2014      	movs	r0, #20
 80013ba:	f002 fcb7 	bl	8003d2c <malloc>
 80013be:	4603      	mov	r3, r0
 80013c0:	613b      	str	r3, [r7, #16]
	task->taskPointer = pFunction;
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	68fa      	ldr	r2, [r7, #12]
 80013c6:	601a      	str	r2, [r3, #0]
	task->taskID = taskid++;
 80013c8:	4b3a      	ldr	r3, [pc, #232]	; (80014b4 <SCH_Add_Task+0x108>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	1c5a      	adds	r2, r3, #1
 80013ce:	4939      	ldr	r1, [pc, #228]	; (80014b4 <SCH_Add_Task+0x108>)
 80013d0:	600a      	str	r2, [r1, #0]
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	6053      	str	r3, [r2, #4]
	task->Delay = DELAY;
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	68ba      	ldr	r2, [r7, #8]
 80013da:	609a      	str	r2, [r3, #8]
	task->Period = PERIOD;
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	60da      	str	r2, [r3, #12]
	task->nextTask = NULL;
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	2200      	movs	r2, #0
 80013e6:	611a      	str	r2, [r3, #16]

	if (company.number >= SCH_MAX_TASKS){
 80013e8:	4b33      	ldr	r3, [pc, #204]	; (80014b8 <SCH_Add_Task+0x10c>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	2b1f      	cmp	r3, #31
 80013ee:	dd01      	ble.n	80013f4 <SCH_Add_Task+0x48>
		return 0 ;
 80013f0:	2300      	movs	r3, #0
 80013f2:	e05a      	b.n	80014aa <SCH_Add_Task+0xfe>
		//company is full
	}
	if (company.number == 0){ // company is empty
 80013f4:	4b30      	ldr	r3, [pc, #192]	; (80014b8 <SCH_Add_Task+0x10c>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d109      	bne.n	8001410 <SCH_Add_Task+0x64>
		company.head = task;
 80013fc:	4a2e      	ldr	r2, [pc, #184]	; (80014b8 <SCH_Add_Task+0x10c>)
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	6013      	str	r3, [r2, #0]
		company.number ++;
 8001402:	4b2d      	ldr	r3, [pc, #180]	; (80014b8 <SCH_Add_Task+0x10c>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	3301      	adds	r3, #1
 8001408:	4a2b      	ldr	r2, [pc, #172]	; (80014b8 <SCH_Add_Task+0x10c>)
 800140a:	6053      	str	r3, [r2, #4]
		return 0;
 800140c:	2300      	movs	r3, #0
 800140e:	e04c      	b.n	80014aa <SCH_Add_Task+0xfe>
	}

	worker_t *current = company.head;
 8001410:	4b29      	ldr	r3, [pc, #164]	; (80014b8 <SCH_Add_Task+0x10c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	61fb      	str	r3, [r7, #28]
	worker_t *prev = NULL;
 8001416:	2300      	movs	r3, #0
 8001418:	61bb      	str	r3, [r7, #24]
	int delay_tmp = task->Delay - current->Delay;
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	689a      	ldr	r2, [r3, #8]
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	617b      	str	r3, [r7, #20]
	while (delay_tmp >= 0 && current != NULL){
 8001426:	e00f      	b.n	8001448 <SCH_Add_Task+0x9c>
		task->Delay = delay_tmp;
 8001428:	697a      	ldr	r2, [r7, #20]
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	609a      	str	r2, [r3, #8]
		prev = current;
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	61bb      	str	r3, [r7, #24]
		current = current->nextTask;
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	691b      	ldr	r3, [r3, #16]
 8001436:	61fb      	str	r3, [r7, #28]
		if (current != NULL) delay_tmp -= current->Delay;
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d004      	beq.n	8001448 <SCH_Add_Task+0x9c>
 800143e:	697a      	ldr	r2, [r7, #20]
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	617b      	str	r3, [r7, #20]
	while (delay_tmp >= 0 && current != NULL){
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	2b00      	cmp	r3, #0
 800144c:	db02      	blt.n	8001454 <SCH_Add_Task+0xa8>
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d1e9      	bne.n	8001428 <SCH_Add_Task+0x7c>
	}

	if (prev == NULL){ // insert at head
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d10d      	bne.n	8001476 <SCH_Add_Task+0xca>
		task->nextTask = current;
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	69fa      	ldr	r2, [r7, #28]
 800145e:	611a      	str	r2, [r3, #16]
		current->Delay -= task->Delay;
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	689a      	ldr	r2, [r3, #8]
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	1ad2      	subs	r2, r2, r3
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	609a      	str	r2, [r3, #8]
		company.head = task;
 800146e:	4a12      	ldr	r2, [pc, #72]	; (80014b8 <SCH_Add_Task+0x10c>)
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	6013      	str	r3, [r2, #0]
 8001474:	e013      	b.n	800149e <SCH_Add_Task+0xf2>
	}
	else if (current == NULL){ // insert at tail
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d103      	bne.n	8001484 <SCH_Add_Task+0xd8>
		prev->nextTask = task;
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	611a      	str	r2, [r3, #16]
 8001482:	e00c      	b.n	800149e <SCH_Add_Task+0xf2>
	}
	else{ // insert at middle
		prev->nextTask = task;
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	611a      	str	r2, [r3, #16]
		task->nextTask = current;
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	69fa      	ldr	r2, [r7, #28]
 800148e:	611a      	str	r2, [r3, #16]
		current->Delay -= task->Delay;
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	689a      	ldr	r2, [r3, #8]
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	1ad2      	subs	r2, r2, r3
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	609a      	str	r2, [r3, #8]
	}

	company.number++;
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <SCH_Add_Task+0x10c>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	3301      	adds	r3, #1
 80014a4:	4a04      	ldr	r2, [pc, #16]	; (80014b8 <SCH_Add_Task+0x10c>)
 80014a6:	6053      	str	r3, [r2, #4]
	return 0;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3720      	adds	r7, #32
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	200000f4 	.word	0x200000f4
 80014b8:	200001a0 	.word	0x200001a0

080014bc <SCH_Delete_Task>:
uint8_t SCH_Delete_Task(uint32_t taskID){
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
	if (company.number == 0) return 0;
 80014c4:	4b2e      	ldr	r3, [pc, #184]	; (8001580 <SCH_Delete_Task+0xc4>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d101      	bne.n	80014d0 <SCH_Delete_Task+0x14>
 80014cc:	2300      	movs	r3, #0
 80014ce:	e053      	b.n	8001578 <SCH_Delete_Task+0xbc>
	worker_t *current = company.head;
 80014d0:	4b2b      	ldr	r3, [pc, #172]	; (8001580 <SCH_Delete_Task+0xc4>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	60fb      	str	r3, [r7, #12]
	worker_t *prev = NULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60bb      	str	r3, [r7, #8]

	while (current->taskID != taskID && current != NULL){
 80014da:	e004      	b.n	80014e6 <SCH_Delete_Task+0x2a>
		prev = current;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	60bb      	str	r3, [r7, #8]
		current = current->nextTask;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	691b      	ldr	r3, [r3, #16]
 80014e4:	60fb      	str	r3, [r7, #12]
	while (current->taskID != taskID && current != NULL){
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d002      	beq.n	80014f6 <SCH_Delete_Task+0x3a>
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1f2      	bne.n	80014dc <SCH_Delete_Task+0x20>
	}
	// now current is at node with the same ID

	if (current == NULL) return 0; // can't find task
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d101      	bne.n	8001500 <SCH_Delete_Task+0x44>
 80014fc:	2300      	movs	r3, #0
 80014fe:	e03b      	b.n	8001578 <SCH_Delete_Task+0xbc>
	if (prev == NULL) { //delete head
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d114      	bne.n	8001530 <SCH_Delete_Task+0x74>
		company.head= current->nextTask;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	4a1d      	ldr	r2, [pc, #116]	; (8001580 <SCH_Delete_Task+0xc4>)
 800150c:	6013      	str	r3, [r2, #0]
		free(current);
 800150e:	68f8      	ldr	r0, [r7, #12]
 8001510:	f002 fc14 	bl	8003d3c <free>
		if (current->nextTask != NULL){
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	691b      	ldr	r3, [r3, #16]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d027      	beq.n	800156c <SCH_Delete_Task+0xb0>
			current->nextTask->Delay += current->Delay;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	691b      	ldr	r3, [r3, #16]
 8001520:	6899      	ldr	r1, [r3, #8]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	689a      	ldr	r2, [r3, #8]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	691b      	ldr	r3, [r3, #16]
 800152a:	440a      	add	r2, r1
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	e01d      	b.n	800156c <SCH_Delete_Task+0xb0>
		}
	}
	else if (current->nextTask == NULL) //delete tail
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	691b      	ldr	r3, [r3, #16]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d106      	bne.n	8001546 <SCH_Delete_Task+0x8a>
	{
		free(current);
 8001538:	68f8      	ldr	r0, [r7, #12]
 800153a:	f002 fbff 	bl	8003d3c <free>
		prev->nextTask = NULL;
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	2200      	movs	r2, #0
 8001542:	611a      	str	r2, [r3, #16]
 8001544:	e012      	b.n	800156c <SCH_Delete_Task+0xb0>
	}
	else{ // delete middle
		prev->nextTask = current->nextTask;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	691a      	ldr	r2, [r3, #16]
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	611a      	str	r2, [r3, #16]
		current->nextTask->Delay += current->Delay;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	6899      	ldr	r1, [r3, #8]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	440a      	add	r2, r1
 800155e:	609a      	str	r2, [r3, #8]
		current->nextTask = NULL;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2200      	movs	r2, #0
 8001564:	611a      	str	r2, [r3, #16]
		free(current);
 8001566:	68f8      	ldr	r0, [r7, #12]
 8001568:	f002 fbe8 	bl	8003d3c <free>
	}
	company.number --;
 800156c:	4b04      	ldr	r3, [pc, #16]	; (8001580 <SCH_Delete_Task+0xc4>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	3b01      	subs	r3, #1
 8001572:	4a03      	ldr	r2, [pc, #12]	; (8001580 <SCH_Delete_Task+0xc4>)
 8001574:	6053      	str	r3, [r2, #4]


	return 0;
 8001576:	2300      	movs	r3, #0
}
 8001578:	4618      	mov	r0, r3
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	200001a0 	.word	0x200001a0

08001584 <SCH_Dispatch_Tasks>:
void SCH_Dispatch_Tasks(){
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
	while (company.head->Delay == 0 && company.number > 0){
 8001588:	e026      	b.n	80015d8 <SCH_Dispatch_Tasks+0x54>
		sprintf(str, "TaskID %ld timeout at timestamp %d ms \r\n", company.head->taskID, timestamp);
 800158a:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <SCH_Dispatch_Tasks+0x74>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	685a      	ldr	r2, [r3, #4]
 8001590:	4b1a      	ldr	r3, [pc, #104]	; (80015fc <SCH_Dispatch_Tasks+0x78>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	491a      	ldr	r1, [pc, #104]	; (8001600 <SCH_Dispatch_Tasks+0x7c>)
 8001596:	481b      	ldr	r0, [pc, #108]	; (8001604 <SCH_Dispatch_Tasks+0x80>)
 8001598:	f002 fc96 	bl	8003ec8 <siprintf>
		sendSignal(str);
 800159c:	4819      	ldr	r0, [pc, #100]	; (8001604 <SCH_Dispatch_Tasks+0x80>)
 800159e:	f7ff f847 	bl	8000630 <sendSignal>
		(*company.head->taskPointer)(); // execute toggle leds
 80015a2:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <SCH_Dispatch_Tasks+0x74>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4798      	blx	r3
		if (company.head->Period != 0) SCH_Add_Task(company.head->taskPointer,
 80015aa:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <SCH_Dispatch_Tasks+0x74>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d00b      	beq.n	80015cc <SCH_Dispatch_Tasks+0x48>
 80015b4:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <SCH_Dispatch_Tasks+0x74>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6818      	ldr	r0, [r3, #0]
				company.head->Period, company.head->Period);
 80015ba:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <SCH_Dispatch_Tasks+0x74>)
 80015bc:	681b      	ldr	r3, [r3, #0]
		if (company.head->Period != 0) SCH_Add_Task(company.head->taskPointer,
 80015be:	68d9      	ldr	r1, [r3, #12]
				company.head->Period, company.head->Period);
 80015c0:	4b0d      	ldr	r3, [pc, #52]	; (80015f8 <SCH_Dispatch_Tasks+0x74>)
 80015c2:	681b      	ldr	r3, [r3, #0]
		if (company.head->Period != 0) SCH_Add_Task(company.head->taskPointer,
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	461a      	mov	r2, r3
 80015c8:	f7ff fef0 	bl	80013ac <SCH_Add_Task>
		SCH_Delete_Task(company.head->taskID);
 80015cc:	4b0a      	ldr	r3, [pc, #40]	; (80015f8 <SCH_Dispatch_Tasks+0x74>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff ff72 	bl	80014bc <SCH_Delete_Task>
	while (company.head->Delay == 0 && company.number > 0){
 80015d8:	4b07      	ldr	r3, [pc, #28]	; (80015f8 <SCH_Dispatch_Tasks+0x74>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d103      	bne.n	80015ea <SCH_Dispatch_Tasks+0x66>
 80015e2:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <SCH_Dispatch_Tasks+0x74>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	dccf      	bgt.n	800158a <SCH_Dispatch_Tasks+0x6>
	}
	// Enter low-power mode (Sleep mode). The MCU will wake up on the next interrupt
	    HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80015ea:	2101      	movs	r1, #1
 80015ec:	2000      	movs	r0, #0
 80015ee:	f000 fd3d 	bl	800206c <HAL_PWR_EnterSLEEPMode>
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	200001a0 	.word	0x200001a0
 80015fc:	200000f0 	.word	0x200000f0
 8001600:	080045e8 	.word	0x080045e8
 8001604:	200001a8 	.word	0x200001a8

08001608 <SCH_Update>:
void SCH_Update(){
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
	timestamp += 10;
 800160c:	4b0b      	ldr	r3, [pc, #44]	; (800163c <SCH_Update+0x34>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	330a      	adds	r3, #10
 8001612:	4a0a      	ldr	r2, [pc, #40]	; (800163c <SCH_Update+0x34>)
 8001614:	6013      	str	r3, [r2, #0]
	if (company.number != 0 && company.head->Delay != 0) {
 8001616:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <SCH_Update+0x38>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d009      	beq.n	8001632 <SCH_Update+0x2a>
 800161e:	4b08      	ldr	r3, [pc, #32]	; (8001640 <SCH_Update+0x38>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d004      	beq.n	8001632 <SCH_Update+0x2a>
		company.head->Delay --;
 8001628:	4b05      	ldr	r3, [pc, #20]	; (8001640 <SCH_Update+0x38>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	689a      	ldr	r2, [r3, #8]
 800162e:	3a01      	subs	r2, #1
 8001630:	609a      	str	r2, [r3, #8]
	}
}
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	200000f0 	.word	0x200000f0
 8001640:	200001a0 	.word	0x200001a0

08001644 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800164a:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <HAL_MspInit+0x5c>)
 800164c:	699b      	ldr	r3, [r3, #24]
 800164e:	4a14      	ldr	r2, [pc, #80]	; (80016a0 <HAL_MspInit+0x5c>)
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	6193      	str	r3, [r2, #24]
 8001656:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <HAL_MspInit+0x5c>)
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	60bb      	str	r3, [r7, #8]
 8001660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001662:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <HAL_MspInit+0x5c>)
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	4a0e      	ldr	r2, [pc, #56]	; (80016a0 <HAL_MspInit+0x5c>)
 8001668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800166c:	61d3      	str	r3, [r2, #28]
 800166e:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <HAL_MspInit+0x5c>)
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800167a:	4b0a      	ldr	r3, [pc, #40]	; (80016a4 <HAL_MspInit+0x60>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	4a04      	ldr	r2, [pc, #16]	; (80016a4 <HAL_MspInit+0x60>)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001696:	bf00      	nop
 8001698:	3714      	adds	r7, #20
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr
 80016a0:	40021000 	.word	0x40021000
 80016a4:	40010000 	.word	0x40010000

080016a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016b8:	d113      	bne.n	80016e2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016ba:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <HAL_TIM_Base_MspInit+0x44>)
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	4a0b      	ldr	r2, [pc, #44]	; (80016ec <HAL_TIM_Base_MspInit+0x44>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	61d3      	str	r3, [r2, #28]
 80016c6:	4b09      	ldr	r3, [pc, #36]	; (80016ec <HAL_TIM_Base_MspInit+0x44>)
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016d2:	2200      	movs	r2, #0
 80016d4:	2100      	movs	r1, #0
 80016d6:	201c      	movs	r0, #28
 80016d8:	f000 fa35 	bl	8001b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016dc:	201c      	movs	r0, #28
 80016de:	f000 fa4e 	bl	8001b7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016e2:	bf00      	nop
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40021000 	.word	0x40021000

080016f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b088      	sub	sp, #32
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f8:	f107 0310 	add.w	r3, r7, #16
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a20      	ldr	r2, [pc, #128]	; (800178c <HAL_UART_MspInit+0x9c>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d139      	bne.n	8001784 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001710:	4b1f      	ldr	r3, [pc, #124]	; (8001790 <HAL_UART_MspInit+0xa0>)
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	4a1e      	ldr	r2, [pc, #120]	; (8001790 <HAL_UART_MspInit+0xa0>)
 8001716:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800171a:	6193      	str	r3, [r2, #24]
 800171c:	4b1c      	ldr	r3, [pc, #112]	; (8001790 <HAL_UART_MspInit+0xa0>)
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001728:	4b19      	ldr	r3, [pc, #100]	; (8001790 <HAL_UART_MspInit+0xa0>)
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	4a18      	ldr	r2, [pc, #96]	; (8001790 <HAL_UART_MspInit+0xa0>)
 800172e:	f043 0304 	orr.w	r3, r3, #4
 8001732:	6193      	str	r3, [r2, #24]
 8001734:	4b16      	ldr	r3, [pc, #88]	; (8001790 <HAL_UART_MspInit+0xa0>)
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	f003 0304 	and.w	r3, r3, #4
 800173c:	60bb      	str	r3, [r7, #8]
 800173e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001740:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001744:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001746:	2302      	movs	r3, #2
 8001748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800174a:	2303      	movs	r3, #3
 800174c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174e:	f107 0310 	add.w	r3, r7, #16
 8001752:	4619      	mov	r1, r3
 8001754:	480f      	ldr	r0, [pc, #60]	; (8001794 <HAL_UART_MspInit+0xa4>)
 8001756:	f000 fadf 	bl	8001d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800175a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800175e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001768:	f107 0310 	add.w	r3, r7, #16
 800176c:	4619      	mov	r1, r3
 800176e:	4809      	ldr	r0, [pc, #36]	; (8001794 <HAL_UART_MspInit+0xa4>)
 8001770:	f000 fad2 	bl	8001d18 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001774:	2200      	movs	r2, #0
 8001776:	2100      	movs	r1, #0
 8001778:	2025      	movs	r0, #37	; 0x25
 800177a:	f000 f9e4 	bl	8001b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800177e:	2025      	movs	r0, #37	; 0x25
 8001780:	f000 f9fd 	bl	8001b7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001784:	bf00      	nop
 8001786:	3720      	adds	r7, #32
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40013800 	.word	0x40013800
 8001790:	40021000 	.word	0x40021000
 8001794:	40010800 	.word	0x40010800

08001798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800179c:	e7fe      	b.n	800179c <NMI_Handler+0x4>

0800179e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a2:	e7fe      	b.n	80017a2 <HardFault_Handler+0x4>

080017a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <MemManage_Handler+0x4>

080017aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ae:	e7fe      	b.n	80017ae <BusFault_Handler+0x4>

080017b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b4:	e7fe      	b.n	80017b4 <UsageFault_Handler+0x4>

080017b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	46bd      	mov	sp, r7
 80017be:	bc80      	pop	{r7}
 80017c0:	4770      	bx	lr

080017c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr

080017ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bc80      	pop	{r7}
 80017d8:	4770      	bx	lr

080017da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017de:	f000 f8bf 	bl	8001960 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
	...

080017e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017ec:	4802      	ldr	r0, [pc, #8]	; (80017f8 <TIM2_IRQHandler+0x10>)
 80017ee:	f001 f903 	bl	80029f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000158 	.word	0x20000158

080017fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001800:	4802      	ldr	r0, [pc, #8]	; (800180c <USART1_IRQHandler+0x10>)
 8001802:	f001 fd19 	bl	8003238 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000110 	.word	0x20000110

08001810 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001818:	4a14      	ldr	r2, [pc, #80]	; (800186c <_sbrk+0x5c>)
 800181a:	4b15      	ldr	r3, [pc, #84]	; (8001870 <_sbrk+0x60>)
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001824:	4b13      	ldr	r3, [pc, #76]	; (8001874 <_sbrk+0x64>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d102      	bne.n	8001832 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800182c:	4b11      	ldr	r3, [pc, #68]	; (8001874 <_sbrk+0x64>)
 800182e:	4a12      	ldr	r2, [pc, #72]	; (8001878 <_sbrk+0x68>)
 8001830:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001832:	4b10      	ldr	r3, [pc, #64]	; (8001874 <_sbrk+0x64>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4413      	add	r3, r2
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	429a      	cmp	r2, r3
 800183e:	d207      	bcs.n	8001850 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001840:	f002 fa4a 	bl	8003cd8 <__errno>
 8001844:	4603      	mov	r3, r0
 8001846:	220c      	movs	r2, #12
 8001848:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800184a:	f04f 33ff 	mov.w	r3, #4294967295
 800184e:	e009      	b.n	8001864 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001850:	4b08      	ldr	r3, [pc, #32]	; (8001874 <_sbrk+0x64>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001856:	4b07      	ldr	r3, [pc, #28]	; (8001874 <_sbrk+0x64>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4413      	add	r3, r2
 800185e:	4a05      	ldr	r2, [pc, #20]	; (8001874 <_sbrk+0x64>)
 8001860:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001862:	68fb      	ldr	r3, [r7, #12]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3718      	adds	r7, #24
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20002800 	.word	0x20002800
 8001870:	00000400 	.word	0x00000400
 8001874:	200000f8 	.word	0x200000f8
 8001878:	200001f0 	.word	0x200001f0

0800187c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr

08001888 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001888:	f7ff fff8 	bl	800187c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800188c:	480b      	ldr	r0, [pc, #44]	; (80018bc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800188e:	490c      	ldr	r1, [pc, #48]	; (80018c0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001890:	4a0c      	ldr	r2, [pc, #48]	; (80018c4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001892:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001894:	e002      	b.n	800189c <LoopCopyDataInit>

08001896 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001896:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001898:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800189a:	3304      	adds	r3, #4

0800189c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800189c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800189e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018a0:	d3f9      	bcc.n	8001896 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018a2:	4a09      	ldr	r2, [pc, #36]	; (80018c8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80018a4:	4c09      	ldr	r4, [pc, #36]	; (80018cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018a8:	e001      	b.n	80018ae <LoopFillZerobss>

080018aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018ac:	3204      	adds	r2, #4

080018ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018b0:	d3fb      	bcc.n	80018aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018b2:	f002 fa17 	bl	8003ce4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018b6:	f7fe fecf 	bl	8000658 <main>
  bx lr
 80018ba:	4770      	bx	lr
  ldr r0, =_sdata
 80018bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018c0:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 80018c4:	0800467c 	.word	0x0800467c
  ldr r2, =_sbss
 80018c8:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 80018cc:	200001f0 	.word	0x200001f0

080018d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018d0:	e7fe      	b.n	80018d0 <ADC1_2_IRQHandler>
	...

080018d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018d8:	4b08      	ldr	r3, [pc, #32]	; (80018fc <HAL_Init+0x28>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a07      	ldr	r2, [pc, #28]	; (80018fc <HAL_Init+0x28>)
 80018de:	f043 0310 	orr.w	r3, r3, #16
 80018e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018e4:	2003      	movs	r0, #3
 80018e6:	f000 f923 	bl	8001b30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ea:	200f      	movs	r0, #15
 80018ec:	f000 f808 	bl	8001900 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018f0:	f7ff fea8 	bl	8001644 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40022000 	.word	0x40022000

08001900 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001908:	4b12      	ldr	r3, [pc, #72]	; (8001954 <HAL_InitTick+0x54>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	4b12      	ldr	r3, [pc, #72]	; (8001958 <HAL_InitTick+0x58>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	4619      	mov	r1, r3
 8001912:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001916:	fbb3 f3f1 	udiv	r3, r3, r1
 800191a:	fbb2 f3f3 	udiv	r3, r2, r3
 800191e:	4618      	mov	r0, r3
 8001920:	f000 f93b 	bl	8001b9a <HAL_SYSTICK_Config>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e00e      	b.n	800194c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b0f      	cmp	r3, #15
 8001932:	d80a      	bhi.n	800194a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001934:	2200      	movs	r2, #0
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	f04f 30ff 	mov.w	r0, #4294967295
 800193c:	f000 f903 	bl	8001b46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001940:	4a06      	ldr	r2, [pc, #24]	; (800195c <HAL_InitTick+0x5c>)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001946:	2300      	movs	r3, #0
 8001948:	e000      	b.n	800194c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
}
 800194c:	4618      	mov	r0, r3
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20000044 	.word	0x20000044
 8001958:	2000004c 	.word	0x2000004c
 800195c:	20000048 	.word	0x20000048

08001960 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001964:	4b05      	ldr	r3, [pc, #20]	; (800197c <HAL_IncTick+0x1c>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	461a      	mov	r2, r3
 800196a:	4b05      	ldr	r3, [pc, #20]	; (8001980 <HAL_IncTick+0x20>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4413      	add	r3, r2
 8001970:	4a03      	ldr	r2, [pc, #12]	; (8001980 <HAL_IncTick+0x20>)
 8001972:	6013      	str	r3, [r2, #0]
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr
 800197c:	2000004c 	.word	0x2000004c
 8001980:	200001dc 	.word	0x200001dc

08001984 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  return uwTick;
 8001988:	4b02      	ldr	r3, [pc, #8]	; (8001994 <HAL_GetTick+0x10>)
 800198a:	681b      	ldr	r3, [r3, #0]
}
 800198c:	4618      	mov	r0, r3
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr
 8001994:	200001dc 	.word	0x200001dc

08001998 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019a8:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <__NVIC_SetPriorityGrouping+0x44>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ae:	68ba      	ldr	r2, [r7, #8]
 80019b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019b4:	4013      	ands	r3, r2
 80019b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ca:	4a04      	ldr	r2, [pc, #16]	; (80019dc <__NVIC_SetPriorityGrouping+0x44>)
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	60d3      	str	r3, [r2, #12]
}
 80019d0:	bf00      	nop
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bc80      	pop	{r7}
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019e4:	4b04      	ldr	r3, [pc, #16]	; (80019f8 <__NVIC_GetPriorityGrouping+0x18>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	0a1b      	lsrs	r3, r3, #8
 80019ea:	f003 0307 	and.w	r3, r3, #7
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bc80      	pop	{r7}
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	db0b      	blt.n	8001a26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	f003 021f 	and.w	r2, r3, #31
 8001a14:	4906      	ldr	r1, [pc, #24]	; (8001a30 <__NVIC_EnableIRQ+0x34>)
 8001a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1a:	095b      	lsrs	r3, r3, #5
 8001a1c:	2001      	movs	r0, #1
 8001a1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr
 8001a30:	e000e100 	.word	0xe000e100

08001a34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	6039      	str	r1, [r7, #0]
 8001a3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	db0a      	blt.n	8001a5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	490c      	ldr	r1, [pc, #48]	; (8001a80 <__NVIC_SetPriority+0x4c>)
 8001a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a52:	0112      	lsls	r2, r2, #4
 8001a54:	b2d2      	uxtb	r2, r2
 8001a56:	440b      	add	r3, r1
 8001a58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a5c:	e00a      	b.n	8001a74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	b2da      	uxtb	r2, r3
 8001a62:	4908      	ldr	r1, [pc, #32]	; (8001a84 <__NVIC_SetPriority+0x50>)
 8001a64:	79fb      	ldrb	r3, [r7, #7]
 8001a66:	f003 030f 	and.w	r3, r3, #15
 8001a6a:	3b04      	subs	r3, #4
 8001a6c:	0112      	lsls	r2, r2, #4
 8001a6e:	b2d2      	uxtb	r2, r2
 8001a70:	440b      	add	r3, r1
 8001a72:	761a      	strb	r2, [r3, #24]
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bc80      	pop	{r7}
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	e000e100 	.word	0xe000e100
 8001a84:	e000ed00 	.word	0xe000ed00

08001a88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b089      	sub	sp, #36	; 0x24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	f1c3 0307 	rsb	r3, r3, #7
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	bf28      	it	cs
 8001aa6:	2304      	movcs	r3, #4
 8001aa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	3304      	adds	r3, #4
 8001aae:	2b06      	cmp	r3, #6
 8001ab0:	d902      	bls.n	8001ab8 <NVIC_EncodePriority+0x30>
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	3b03      	subs	r3, #3
 8001ab6:	e000      	b.n	8001aba <NVIC_EncodePriority+0x32>
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001abc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	43da      	mvns	r2, r3
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	401a      	ands	r2, r3
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ad0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8001ada:	43d9      	mvns	r1, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae0:	4313      	orrs	r3, r2
         );
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3724      	adds	r7, #36	; 0x24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bc80      	pop	{r7}
 8001aea:	4770      	bx	lr

08001aec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3b01      	subs	r3, #1
 8001af8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001afc:	d301      	bcc.n	8001b02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001afe:	2301      	movs	r3, #1
 8001b00:	e00f      	b.n	8001b22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b02:	4a0a      	ldr	r2, [pc, #40]	; (8001b2c <SysTick_Config+0x40>)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3b01      	subs	r3, #1
 8001b08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b0a:	210f      	movs	r1, #15
 8001b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b10:	f7ff ff90 	bl	8001a34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b14:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <SysTick_Config+0x40>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b1a:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <SysTick_Config+0x40>)
 8001b1c:	2207      	movs	r2, #7
 8001b1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	e000e010 	.word	0xe000e010

08001b30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f7ff ff2d 	bl	8001998 <__NVIC_SetPriorityGrouping>
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b086      	sub	sp, #24
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	60b9      	str	r1, [r7, #8]
 8001b50:	607a      	str	r2, [r7, #4]
 8001b52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b58:	f7ff ff42 	bl	80019e0 <__NVIC_GetPriorityGrouping>
 8001b5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	68b9      	ldr	r1, [r7, #8]
 8001b62:	6978      	ldr	r0, [r7, #20]
 8001b64:	f7ff ff90 	bl	8001a88 <NVIC_EncodePriority>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b6e:	4611      	mov	r1, r2
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff ff5f 	bl	8001a34 <__NVIC_SetPriority>
}
 8001b76:	bf00      	nop
 8001b78:	3718      	adds	r7, #24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	4603      	mov	r3, r0
 8001b86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff ff35 	bl	80019fc <__NVIC_EnableIRQ>
}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b082      	sub	sp, #8
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7ff ffa2 	bl	8001aec <SysTick_Config>
 8001ba8:	4603      	mov	r3, r0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b085      	sub	sp, #20
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d008      	beq.n	8001bdc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2204      	movs	r2, #4
 8001bce:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e020      	b.n	8001c1e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f022 020e 	bic.w	r2, r2, #14
 8001bea:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 0201 	bic.w	r2, r2, #1
 8001bfa:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c04:	2101      	movs	r1, #1
 8001c06:	fa01 f202 	lsl.w	r2, r1, r2
 8001c0a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3714      	adds	r7, #20
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr

08001c28 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c30:	2300      	movs	r3, #0
 8001c32:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d005      	beq.n	8001c4c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2204      	movs	r2, #4
 8001c44:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	73fb      	strb	r3, [r7, #15]
 8001c4a:	e051      	b.n	8001cf0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f022 020e 	bic.w	r2, r2, #14
 8001c5a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f022 0201 	bic.w	r2, r2, #1
 8001c6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a22      	ldr	r2, [pc, #136]	; (8001cfc <HAL_DMA_Abort_IT+0xd4>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d029      	beq.n	8001cca <HAL_DMA_Abort_IT+0xa2>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a21      	ldr	r2, [pc, #132]	; (8001d00 <HAL_DMA_Abort_IT+0xd8>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d022      	beq.n	8001cc6 <HAL_DMA_Abort_IT+0x9e>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a1f      	ldr	r2, [pc, #124]	; (8001d04 <HAL_DMA_Abort_IT+0xdc>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d01a      	beq.n	8001cc0 <HAL_DMA_Abort_IT+0x98>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a1e      	ldr	r2, [pc, #120]	; (8001d08 <HAL_DMA_Abort_IT+0xe0>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d012      	beq.n	8001cba <HAL_DMA_Abort_IT+0x92>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a1c      	ldr	r2, [pc, #112]	; (8001d0c <HAL_DMA_Abort_IT+0xe4>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d00a      	beq.n	8001cb4 <HAL_DMA_Abort_IT+0x8c>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a1b      	ldr	r2, [pc, #108]	; (8001d10 <HAL_DMA_Abort_IT+0xe8>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d102      	bne.n	8001cae <HAL_DMA_Abort_IT+0x86>
 8001ca8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001cac:	e00e      	b.n	8001ccc <HAL_DMA_Abort_IT+0xa4>
 8001cae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cb2:	e00b      	b.n	8001ccc <HAL_DMA_Abort_IT+0xa4>
 8001cb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cb8:	e008      	b.n	8001ccc <HAL_DMA_Abort_IT+0xa4>
 8001cba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cbe:	e005      	b.n	8001ccc <HAL_DMA_Abort_IT+0xa4>
 8001cc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cc4:	e002      	b.n	8001ccc <HAL_DMA_Abort_IT+0xa4>
 8001cc6:	2310      	movs	r3, #16
 8001cc8:	e000      	b.n	8001ccc <HAL_DMA_Abort_IT+0xa4>
 8001cca:	2301      	movs	r3, #1
 8001ccc:	4a11      	ldr	r2, [pc, #68]	; (8001d14 <HAL_DMA_Abort_IT+0xec>)
 8001cce:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d003      	beq.n	8001cf0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	4798      	blx	r3
    } 
  }
  return status;
 8001cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40020008 	.word	0x40020008
 8001d00:	4002001c 	.word	0x4002001c
 8001d04:	40020030 	.word	0x40020030
 8001d08:	40020044 	.word	0x40020044
 8001d0c:	40020058 	.word	0x40020058
 8001d10:	4002006c 	.word	0x4002006c
 8001d14:	40020000 	.word	0x40020000

08001d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b08b      	sub	sp, #44	; 0x2c
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d22:	2300      	movs	r3, #0
 8001d24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d26:	2300      	movs	r3, #0
 8001d28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d2a:	e148      	b.n	8001fbe <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	69fa      	ldr	r2, [r7, #28]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	f040 8137 	bne.w	8001fb8 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	4aa3      	ldr	r2, [pc, #652]	; (8001fdc <HAL_GPIO_Init+0x2c4>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d05e      	beq.n	8001e12 <HAL_GPIO_Init+0xfa>
 8001d54:	4aa1      	ldr	r2, [pc, #644]	; (8001fdc <HAL_GPIO_Init+0x2c4>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d875      	bhi.n	8001e46 <HAL_GPIO_Init+0x12e>
 8001d5a:	4aa1      	ldr	r2, [pc, #644]	; (8001fe0 <HAL_GPIO_Init+0x2c8>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d058      	beq.n	8001e12 <HAL_GPIO_Init+0xfa>
 8001d60:	4a9f      	ldr	r2, [pc, #636]	; (8001fe0 <HAL_GPIO_Init+0x2c8>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d86f      	bhi.n	8001e46 <HAL_GPIO_Init+0x12e>
 8001d66:	4a9f      	ldr	r2, [pc, #636]	; (8001fe4 <HAL_GPIO_Init+0x2cc>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d052      	beq.n	8001e12 <HAL_GPIO_Init+0xfa>
 8001d6c:	4a9d      	ldr	r2, [pc, #628]	; (8001fe4 <HAL_GPIO_Init+0x2cc>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d869      	bhi.n	8001e46 <HAL_GPIO_Init+0x12e>
 8001d72:	4a9d      	ldr	r2, [pc, #628]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d04c      	beq.n	8001e12 <HAL_GPIO_Init+0xfa>
 8001d78:	4a9b      	ldr	r2, [pc, #620]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d863      	bhi.n	8001e46 <HAL_GPIO_Init+0x12e>
 8001d7e:	4a9b      	ldr	r2, [pc, #620]	; (8001fec <HAL_GPIO_Init+0x2d4>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d046      	beq.n	8001e12 <HAL_GPIO_Init+0xfa>
 8001d84:	4a99      	ldr	r2, [pc, #612]	; (8001fec <HAL_GPIO_Init+0x2d4>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d85d      	bhi.n	8001e46 <HAL_GPIO_Init+0x12e>
 8001d8a:	2b12      	cmp	r3, #18
 8001d8c:	d82a      	bhi.n	8001de4 <HAL_GPIO_Init+0xcc>
 8001d8e:	2b12      	cmp	r3, #18
 8001d90:	d859      	bhi.n	8001e46 <HAL_GPIO_Init+0x12e>
 8001d92:	a201      	add	r2, pc, #4	; (adr r2, 8001d98 <HAL_GPIO_Init+0x80>)
 8001d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d98:	08001e13 	.word	0x08001e13
 8001d9c:	08001ded 	.word	0x08001ded
 8001da0:	08001dff 	.word	0x08001dff
 8001da4:	08001e41 	.word	0x08001e41
 8001da8:	08001e47 	.word	0x08001e47
 8001dac:	08001e47 	.word	0x08001e47
 8001db0:	08001e47 	.word	0x08001e47
 8001db4:	08001e47 	.word	0x08001e47
 8001db8:	08001e47 	.word	0x08001e47
 8001dbc:	08001e47 	.word	0x08001e47
 8001dc0:	08001e47 	.word	0x08001e47
 8001dc4:	08001e47 	.word	0x08001e47
 8001dc8:	08001e47 	.word	0x08001e47
 8001dcc:	08001e47 	.word	0x08001e47
 8001dd0:	08001e47 	.word	0x08001e47
 8001dd4:	08001e47 	.word	0x08001e47
 8001dd8:	08001e47 	.word	0x08001e47
 8001ddc:	08001df5 	.word	0x08001df5
 8001de0:	08001e09 	.word	0x08001e09
 8001de4:	4a82      	ldr	r2, [pc, #520]	; (8001ff0 <HAL_GPIO_Init+0x2d8>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d013      	beq.n	8001e12 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dea:	e02c      	b.n	8001e46 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	623b      	str	r3, [r7, #32]
          break;
 8001df2:	e029      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	3304      	adds	r3, #4
 8001dfa:	623b      	str	r3, [r7, #32]
          break;
 8001dfc:	e024      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	3308      	adds	r3, #8
 8001e04:	623b      	str	r3, [r7, #32]
          break;
 8001e06:	e01f      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	330c      	adds	r3, #12
 8001e0e:	623b      	str	r3, [r7, #32]
          break;
 8001e10:	e01a      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d102      	bne.n	8001e20 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e1a:	2304      	movs	r3, #4
 8001e1c:	623b      	str	r3, [r7, #32]
          break;
 8001e1e:	e013      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d105      	bne.n	8001e34 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e28:	2308      	movs	r3, #8
 8001e2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	69fa      	ldr	r2, [r7, #28]
 8001e30:	611a      	str	r2, [r3, #16]
          break;
 8001e32:	e009      	b.n	8001e48 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e34:	2308      	movs	r3, #8
 8001e36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69fa      	ldr	r2, [r7, #28]
 8001e3c:	615a      	str	r2, [r3, #20]
          break;
 8001e3e:	e003      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e40:	2300      	movs	r3, #0
 8001e42:	623b      	str	r3, [r7, #32]
          break;
 8001e44:	e000      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          break;
 8001e46:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	2bff      	cmp	r3, #255	; 0xff
 8001e4c:	d801      	bhi.n	8001e52 <HAL_GPIO_Init+0x13a>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	e001      	b.n	8001e56 <HAL_GPIO_Init+0x13e>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	3304      	adds	r3, #4
 8001e56:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	2bff      	cmp	r3, #255	; 0xff
 8001e5c:	d802      	bhi.n	8001e64 <HAL_GPIO_Init+0x14c>
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	e002      	b.n	8001e6a <HAL_GPIO_Init+0x152>
 8001e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e66:	3b08      	subs	r3, #8
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	210f      	movs	r1, #15
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	fa01 f303 	lsl.w	r3, r1, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	401a      	ands	r2, r3
 8001e7c:	6a39      	ldr	r1, [r7, #32]
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	fa01 f303 	lsl.w	r3, r1, r3
 8001e84:	431a      	orrs	r2, r3
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f000 8090 	beq.w	8001fb8 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e98:	4b56      	ldr	r3, [pc, #344]	; (8001ff4 <HAL_GPIO_Init+0x2dc>)
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	4a55      	ldr	r2, [pc, #340]	; (8001ff4 <HAL_GPIO_Init+0x2dc>)
 8001e9e:	f043 0301 	orr.w	r3, r3, #1
 8001ea2:	6193      	str	r3, [r2, #24]
 8001ea4:	4b53      	ldr	r3, [pc, #332]	; (8001ff4 <HAL_GPIO_Init+0x2dc>)
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	60bb      	str	r3, [r7, #8]
 8001eae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001eb0:	4a51      	ldr	r2, [pc, #324]	; (8001ff8 <HAL_GPIO_Init+0x2e0>)
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb4:	089b      	lsrs	r3, r3, #2
 8001eb6:	3302      	adds	r3, #2
 8001eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ebc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec0:	f003 0303 	and.w	r3, r3, #3
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	220f      	movs	r2, #15
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a49      	ldr	r2, [pc, #292]	; (8001ffc <HAL_GPIO_Init+0x2e4>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d00d      	beq.n	8001ef8 <HAL_GPIO_Init+0x1e0>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a48      	ldr	r2, [pc, #288]	; (8002000 <HAL_GPIO_Init+0x2e8>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d007      	beq.n	8001ef4 <HAL_GPIO_Init+0x1dc>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a47      	ldr	r2, [pc, #284]	; (8002004 <HAL_GPIO_Init+0x2ec>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d101      	bne.n	8001ef0 <HAL_GPIO_Init+0x1d8>
 8001eec:	2302      	movs	r3, #2
 8001eee:	e004      	b.n	8001efa <HAL_GPIO_Init+0x1e2>
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e002      	b.n	8001efa <HAL_GPIO_Init+0x1e2>
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e000      	b.n	8001efa <HAL_GPIO_Init+0x1e2>
 8001ef8:	2300      	movs	r3, #0
 8001efa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001efc:	f002 0203 	and.w	r2, r2, #3
 8001f00:	0092      	lsls	r2, r2, #2
 8001f02:	4093      	lsls	r3, r2
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f0a:	493b      	ldr	r1, [pc, #236]	; (8001ff8 <HAL_GPIO_Init+0x2e0>)
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0e:	089b      	lsrs	r3, r3, #2
 8001f10:	3302      	adds	r3, #2
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d006      	beq.n	8001f32 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f24:	4b38      	ldr	r3, [pc, #224]	; (8002008 <HAL_GPIO_Init+0x2f0>)
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	4937      	ldr	r1, [pc, #220]	; (8002008 <HAL_GPIO_Init+0x2f0>)
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	608b      	str	r3, [r1, #8]
 8001f30:	e006      	b.n	8001f40 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f32:	4b35      	ldr	r3, [pc, #212]	; (8002008 <HAL_GPIO_Init+0x2f0>)
 8001f34:	689a      	ldr	r2, [r3, #8]
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	4933      	ldr	r1, [pc, #204]	; (8002008 <HAL_GPIO_Init+0x2f0>)
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d006      	beq.n	8001f5a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f4c:	4b2e      	ldr	r3, [pc, #184]	; (8002008 <HAL_GPIO_Init+0x2f0>)
 8001f4e:	68da      	ldr	r2, [r3, #12]
 8001f50:	492d      	ldr	r1, [pc, #180]	; (8002008 <HAL_GPIO_Init+0x2f0>)
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	60cb      	str	r3, [r1, #12]
 8001f58:	e006      	b.n	8001f68 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f5a:	4b2b      	ldr	r3, [pc, #172]	; (8002008 <HAL_GPIO_Init+0x2f0>)
 8001f5c:	68da      	ldr	r2, [r3, #12]
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	43db      	mvns	r3, r3
 8001f62:	4929      	ldr	r1, [pc, #164]	; (8002008 <HAL_GPIO_Init+0x2f0>)
 8001f64:	4013      	ands	r3, r2
 8001f66:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d006      	beq.n	8001f82 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f74:	4b24      	ldr	r3, [pc, #144]	; (8002008 <HAL_GPIO_Init+0x2f0>)
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	4923      	ldr	r1, [pc, #140]	; (8002008 <HAL_GPIO_Init+0x2f0>)
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	604b      	str	r3, [r1, #4]
 8001f80:	e006      	b.n	8001f90 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f82:	4b21      	ldr	r3, [pc, #132]	; (8002008 <HAL_GPIO_Init+0x2f0>)
 8001f84:	685a      	ldr	r2, [r3, #4]
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	491f      	ldr	r1, [pc, #124]	; (8002008 <HAL_GPIO_Init+0x2f0>)
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d006      	beq.n	8001faa <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f9c:	4b1a      	ldr	r3, [pc, #104]	; (8002008 <HAL_GPIO_Init+0x2f0>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	4919      	ldr	r1, [pc, #100]	; (8002008 <HAL_GPIO_Init+0x2f0>)
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	600b      	str	r3, [r1, #0]
 8001fa8:	e006      	b.n	8001fb8 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001faa:	4b17      	ldr	r3, [pc, #92]	; (8002008 <HAL_GPIO_Init+0x2f0>)
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	4915      	ldr	r1, [pc, #84]	; (8002008 <HAL_GPIO_Init+0x2f0>)
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fba:	3301      	adds	r3, #1
 8001fbc:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f47f aeaf 	bne.w	8001d2c <HAL_GPIO_Init+0x14>
  }
}
 8001fce:	bf00      	nop
 8001fd0:	bf00      	nop
 8001fd2:	372c      	adds	r7, #44	; 0x2c
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bc80      	pop	{r7}
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	10320000 	.word	0x10320000
 8001fe0:	10310000 	.word	0x10310000
 8001fe4:	10220000 	.word	0x10220000
 8001fe8:	10210000 	.word	0x10210000
 8001fec:	10120000 	.word	0x10120000
 8001ff0:	10110000 	.word	0x10110000
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	40010000 	.word	0x40010000
 8001ffc:	40010800 	.word	0x40010800
 8002000:	40010c00 	.word	0x40010c00
 8002004:	40011000 	.word	0x40011000
 8002008:	40010400 	.word	0x40010400

0800200c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	460b      	mov	r3, r1
 8002016:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	887b      	ldrh	r3, [r7, #2]
 800201e:	4013      	ands	r3, r2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d002      	beq.n	800202a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002024:	2301      	movs	r3, #1
 8002026:	73fb      	strb	r3, [r7, #15]
 8002028:	e001      	b.n	800202e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800202a:	2300      	movs	r3, #0
 800202c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800202e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002030:	4618      	mov	r0, r3
 8002032:	3714      	adds	r7, #20
 8002034:	46bd      	mov	sp, r7
 8002036:	bc80      	pop	{r7}
 8002038:	4770      	bx	lr

0800203a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800203a:	b480      	push	{r7}
 800203c:	b083      	sub	sp, #12
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
 8002042:	460b      	mov	r3, r1
 8002044:	807b      	strh	r3, [r7, #2]
 8002046:	4613      	mov	r3, r2
 8002048:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800204a:	787b      	ldrb	r3, [r7, #1]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d003      	beq.n	8002058 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002050:	887a      	ldrh	r2, [r7, #2]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002056:	e003      	b.n	8002060 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002058:	887b      	ldrh	r3, [r7, #2]
 800205a:	041a      	lsls	r2, r3, #16
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	611a      	str	r2, [r3, #16]
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	bc80      	pop	{r7}
 8002068:	4770      	bx	lr
	...

0800206c <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002078:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <HAL_PWR_EnterSLEEPMode+0x34>)
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	4a08      	ldr	r2, [pc, #32]	; (80020a0 <HAL_PWR_EnterSLEEPMode+0x34>)
 800207e:	f023 0304 	bic.w	r3, r3, #4
 8002082:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8002084:	78fb      	ldrb	r3, [r7, #3]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d101      	bne.n	800208e <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800208a:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 800208c:	e002      	b.n	8002094 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 800208e:	bf40      	sev
    __WFE();
 8002090:	bf20      	wfe
    __WFE();
 8002092:	bf20      	wfe
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	bc80      	pop	{r7}
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	e000ed00 	.word	0xe000ed00

080020a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e26c      	b.n	8002590 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f000 8087 	beq.w	80021d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020c4:	4b92      	ldr	r3, [pc, #584]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f003 030c 	and.w	r3, r3, #12
 80020cc:	2b04      	cmp	r3, #4
 80020ce:	d00c      	beq.n	80020ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020d0:	4b8f      	ldr	r3, [pc, #572]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f003 030c 	and.w	r3, r3, #12
 80020d8:	2b08      	cmp	r3, #8
 80020da:	d112      	bne.n	8002102 <HAL_RCC_OscConfig+0x5e>
 80020dc:	4b8c      	ldr	r3, [pc, #560]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020e8:	d10b      	bne.n	8002102 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ea:	4b89      	ldr	r3, [pc, #548]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d06c      	beq.n	80021d0 <HAL_RCC_OscConfig+0x12c>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d168      	bne.n	80021d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e246      	b.n	8002590 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800210a:	d106      	bne.n	800211a <HAL_RCC_OscConfig+0x76>
 800210c:	4b80      	ldr	r3, [pc, #512]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a7f      	ldr	r2, [pc, #508]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 8002112:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002116:	6013      	str	r3, [r2, #0]
 8002118:	e02e      	b.n	8002178 <HAL_RCC_OscConfig+0xd4>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d10c      	bne.n	800213c <HAL_RCC_OscConfig+0x98>
 8002122:	4b7b      	ldr	r3, [pc, #492]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a7a      	ldr	r2, [pc, #488]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 8002128:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800212c:	6013      	str	r3, [r2, #0]
 800212e:	4b78      	ldr	r3, [pc, #480]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a77      	ldr	r2, [pc, #476]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 8002134:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002138:	6013      	str	r3, [r2, #0]
 800213a:	e01d      	b.n	8002178 <HAL_RCC_OscConfig+0xd4>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002144:	d10c      	bne.n	8002160 <HAL_RCC_OscConfig+0xbc>
 8002146:	4b72      	ldr	r3, [pc, #456]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a71      	ldr	r2, [pc, #452]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 800214c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002150:	6013      	str	r3, [r2, #0]
 8002152:	4b6f      	ldr	r3, [pc, #444]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a6e      	ldr	r2, [pc, #440]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 8002158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800215c:	6013      	str	r3, [r2, #0]
 800215e:	e00b      	b.n	8002178 <HAL_RCC_OscConfig+0xd4>
 8002160:	4b6b      	ldr	r3, [pc, #428]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a6a      	ldr	r2, [pc, #424]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 8002166:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800216a:	6013      	str	r3, [r2, #0]
 800216c:	4b68      	ldr	r3, [pc, #416]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a67      	ldr	r2, [pc, #412]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 8002172:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002176:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d013      	beq.n	80021a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002180:	f7ff fc00 	bl	8001984 <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002188:	f7ff fbfc 	bl	8001984 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b64      	cmp	r3, #100	; 0x64
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e1fa      	b.n	8002590 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800219a:	4b5d      	ldr	r3, [pc, #372]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d0f0      	beq.n	8002188 <HAL_RCC_OscConfig+0xe4>
 80021a6:	e014      	b.n	80021d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a8:	f7ff fbec 	bl	8001984 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b0:	f7ff fbe8 	bl	8001984 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b64      	cmp	r3, #100	; 0x64
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e1e6      	b.n	8002590 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021c2:	4b53      	ldr	r3, [pc, #332]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f0      	bne.n	80021b0 <HAL_RCC_OscConfig+0x10c>
 80021ce:	e000      	b.n	80021d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d063      	beq.n	80022a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021de:	4b4c      	ldr	r3, [pc, #304]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f003 030c 	and.w	r3, r3, #12
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00b      	beq.n	8002202 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021ea:	4b49      	ldr	r3, [pc, #292]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f003 030c 	and.w	r3, r3, #12
 80021f2:	2b08      	cmp	r3, #8
 80021f4:	d11c      	bne.n	8002230 <HAL_RCC_OscConfig+0x18c>
 80021f6:	4b46      	ldr	r3, [pc, #280]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d116      	bne.n	8002230 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002202:	4b43      	ldr	r3, [pc, #268]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d005      	beq.n	800221a <HAL_RCC_OscConfig+0x176>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d001      	beq.n	800221a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e1ba      	b.n	8002590 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800221a:	4b3d      	ldr	r3, [pc, #244]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	4939      	ldr	r1, [pc, #228]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 800222a:	4313      	orrs	r3, r2
 800222c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800222e:	e03a      	b.n	80022a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d020      	beq.n	800227a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002238:	4b36      	ldr	r3, [pc, #216]	; (8002314 <HAL_RCC_OscConfig+0x270>)
 800223a:	2201      	movs	r2, #1
 800223c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223e:	f7ff fba1 	bl	8001984 <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002244:	e008      	b.n	8002258 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002246:	f7ff fb9d 	bl	8001984 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e19b      	b.n	8002590 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002258:	4b2d      	ldr	r3, [pc, #180]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0f0      	beq.n	8002246 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002264:	4b2a      	ldr	r3, [pc, #168]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	4927      	ldr	r1, [pc, #156]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 8002274:	4313      	orrs	r3, r2
 8002276:	600b      	str	r3, [r1, #0]
 8002278:	e015      	b.n	80022a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800227a:	4b26      	ldr	r3, [pc, #152]	; (8002314 <HAL_RCC_OscConfig+0x270>)
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002280:	f7ff fb80 	bl	8001984 <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002288:	f7ff fb7c 	bl	8001984 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e17a      	b.n	8002590 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800229a:	4b1d      	ldr	r3, [pc, #116]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1f0      	bne.n	8002288 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0308 	and.w	r3, r3, #8
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d03a      	beq.n	8002328 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d019      	beq.n	80022ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022ba:	4b17      	ldr	r3, [pc, #92]	; (8002318 <HAL_RCC_OscConfig+0x274>)
 80022bc:	2201      	movs	r2, #1
 80022be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c0:	f7ff fb60 	bl	8001984 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022c8:	f7ff fb5c 	bl	8001984 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e15a      	b.n	8002590 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022da:	4b0d      	ldr	r3, [pc, #52]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d0f0      	beq.n	80022c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022e6:	2001      	movs	r0, #1
 80022e8:	f000 facc 	bl	8002884 <RCC_Delay>
 80022ec:	e01c      	b.n	8002328 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ee:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <HAL_RCC_OscConfig+0x274>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f4:	f7ff fb46 	bl	8001984 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022fa:	e00f      	b.n	800231c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022fc:	f7ff fb42 	bl	8001984 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d908      	bls.n	800231c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e140      	b.n	8002590 <HAL_RCC_OscConfig+0x4ec>
 800230e:	bf00      	nop
 8002310:	40021000 	.word	0x40021000
 8002314:	42420000 	.word	0x42420000
 8002318:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800231c:	4b9e      	ldr	r3, [pc, #632]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 800231e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1e9      	bne.n	80022fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0304 	and.w	r3, r3, #4
 8002330:	2b00      	cmp	r3, #0
 8002332:	f000 80a6 	beq.w	8002482 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002336:	2300      	movs	r3, #0
 8002338:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800233a:	4b97      	ldr	r3, [pc, #604]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d10d      	bne.n	8002362 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002346:	4b94      	ldr	r3, [pc, #592]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	4a93      	ldr	r2, [pc, #588]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 800234c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002350:	61d3      	str	r3, [r2, #28]
 8002352:	4b91      	ldr	r3, [pc, #580]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235a:	60bb      	str	r3, [r7, #8]
 800235c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800235e:	2301      	movs	r3, #1
 8002360:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002362:	4b8e      	ldr	r3, [pc, #568]	; (800259c <HAL_RCC_OscConfig+0x4f8>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236a:	2b00      	cmp	r3, #0
 800236c:	d118      	bne.n	80023a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800236e:	4b8b      	ldr	r3, [pc, #556]	; (800259c <HAL_RCC_OscConfig+0x4f8>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a8a      	ldr	r2, [pc, #552]	; (800259c <HAL_RCC_OscConfig+0x4f8>)
 8002374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002378:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800237a:	f7ff fb03 	bl	8001984 <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002380:	e008      	b.n	8002394 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002382:	f7ff faff 	bl	8001984 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b64      	cmp	r3, #100	; 0x64
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e0fd      	b.n	8002590 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002394:	4b81      	ldr	r3, [pc, #516]	; (800259c <HAL_RCC_OscConfig+0x4f8>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0f0      	beq.n	8002382 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d106      	bne.n	80023b6 <HAL_RCC_OscConfig+0x312>
 80023a8:	4b7b      	ldr	r3, [pc, #492]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	4a7a      	ldr	r2, [pc, #488]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 80023ae:	f043 0301 	orr.w	r3, r3, #1
 80023b2:	6213      	str	r3, [r2, #32]
 80023b4:	e02d      	b.n	8002412 <HAL_RCC_OscConfig+0x36e>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10c      	bne.n	80023d8 <HAL_RCC_OscConfig+0x334>
 80023be:	4b76      	ldr	r3, [pc, #472]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	4a75      	ldr	r2, [pc, #468]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 80023c4:	f023 0301 	bic.w	r3, r3, #1
 80023c8:	6213      	str	r3, [r2, #32]
 80023ca:	4b73      	ldr	r3, [pc, #460]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 80023cc:	6a1b      	ldr	r3, [r3, #32]
 80023ce:	4a72      	ldr	r2, [pc, #456]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 80023d0:	f023 0304 	bic.w	r3, r3, #4
 80023d4:	6213      	str	r3, [r2, #32]
 80023d6:	e01c      	b.n	8002412 <HAL_RCC_OscConfig+0x36e>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	2b05      	cmp	r3, #5
 80023de:	d10c      	bne.n	80023fa <HAL_RCC_OscConfig+0x356>
 80023e0:	4b6d      	ldr	r3, [pc, #436]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	4a6c      	ldr	r2, [pc, #432]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 80023e6:	f043 0304 	orr.w	r3, r3, #4
 80023ea:	6213      	str	r3, [r2, #32]
 80023ec:	4b6a      	ldr	r3, [pc, #424]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	4a69      	ldr	r2, [pc, #420]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 80023f2:	f043 0301 	orr.w	r3, r3, #1
 80023f6:	6213      	str	r3, [r2, #32]
 80023f8:	e00b      	b.n	8002412 <HAL_RCC_OscConfig+0x36e>
 80023fa:	4b67      	ldr	r3, [pc, #412]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	4a66      	ldr	r2, [pc, #408]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 8002400:	f023 0301 	bic.w	r3, r3, #1
 8002404:	6213      	str	r3, [r2, #32]
 8002406:	4b64      	ldr	r3, [pc, #400]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	4a63      	ldr	r2, [pc, #396]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 800240c:	f023 0304 	bic.w	r3, r3, #4
 8002410:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d015      	beq.n	8002446 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800241a:	f7ff fab3 	bl	8001984 <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002420:	e00a      	b.n	8002438 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002422:	f7ff faaf 	bl	8001984 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002430:	4293      	cmp	r3, r2
 8002432:	d901      	bls.n	8002438 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e0ab      	b.n	8002590 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002438:	4b57      	ldr	r3, [pc, #348]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d0ee      	beq.n	8002422 <HAL_RCC_OscConfig+0x37e>
 8002444:	e014      	b.n	8002470 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002446:	f7ff fa9d 	bl	8001984 <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800244c:	e00a      	b.n	8002464 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800244e:	f7ff fa99 	bl	8001984 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	f241 3288 	movw	r2, #5000	; 0x1388
 800245c:	4293      	cmp	r3, r2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e095      	b.n	8002590 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002464:	4b4c      	ldr	r3, [pc, #304]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1ee      	bne.n	800244e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002470:	7dfb      	ldrb	r3, [r7, #23]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d105      	bne.n	8002482 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002476:	4b48      	ldr	r3, [pc, #288]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 8002478:	69db      	ldr	r3, [r3, #28]
 800247a:	4a47      	ldr	r2, [pc, #284]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 800247c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002480:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	2b00      	cmp	r3, #0
 8002488:	f000 8081 	beq.w	800258e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800248c:	4b42      	ldr	r3, [pc, #264]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f003 030c 	and.w	r3, r3, #12
 8002494:	2b08      	cmp	r3, #8
 8002496:	d061      	beq.n	800255c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	69db      	ldr	r3, [r3, #28]
 800249c:	2b02      	cmp	r3, #2
 800249e:	d146      	bne.n	800252e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a0:	4b3f      	ldr	r3, [pc, #252]	; (80025a0 <HAL_RCC_OscConfig+0x4fc>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a6:	f7ff fa6d 	bl	8001984 <HAL_GetTick>
 80024aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ac:	e008      	b.n	80024c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ae:	f7ff fa69 	bl	8001984 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e067      	b.n	8002590 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024c0:	4b35      	ldr	r3, [pc, #212]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1f0      	bne.n	80024ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024d4:	d108      	bne.n	80024e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024d6:	4b30      	ldr	r3, [pc, #192]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	492d      	ldr	r1, [pc, #180]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024e8:	4b2b      	ldr	r3, [pc, #172]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a19      	ldr	r1, [r3, #32]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f8:	430b      	orrs	r3, r1
 80024fa:	4927      	ldr	r1, [pc, #156]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002500:	4b27      	ldr	r3, [pc, #156]	; (80025a0 <HAL_RCC_OscConfig+0x4fc>)
 8002502:	2201      	movs	r2, #1
 8002504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002506:	f7ff fa3d 	bl	8001984 <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800250c:	e008      	b.n	8002520 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800250e:	f7ff fa39 	bl	8001984 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e037      	b.n	8002590 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002520:	4b1d      	ldr	r3, [pc, #116]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d0f0      	beq.n	800250e <HAL_RCC_OscConfig+0x46a>
 800252c:	e02f      	b.n	800258e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800252e:	4b1c      	ldr	r3, [pc, #112]	; (80025a0 <HAL_RCC_OscConfig+0x4fc>)
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002534:	f7ff fa26 	bl	8001984 <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800253c:	f7ff fa22 	bl	8001984 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e020      	b.n	8002590 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800254e:	4b12      	ldr	r3, [pc, #72]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1f0      	bne.n	800253c <HAL_RCC_OscConfig+0x498>
 800255a:	e018      	b.n	800258e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	69db      	ldr	r3, [r3, #28]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d101      	bne.n	8002568 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e013      	b.n	8002590 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002568:	4b0b      	ldr	r3, [pc, #44]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	429a      	cmp	r2, r3
 800257a:	d106      	bne.n	800258a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002586:	429a      	cmp	r2, r3
 8002588:	d001      	beq.n	800258e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e000      	b.n	8002590 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	3718      	adds	r7, #24
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40021000 	.word	0x40021000
 800259c:	40007000 	.word	0x40007000
 80025a0:	42420060 	.word	0x42420060

080025a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e0d0      	b.n	800275a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025b8:	4b6a      	ldr	r3, [pc, #424]	; (8002764 <HAL_RCC_ClockConfig+0x1c0>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d910      	bls.n	80025e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c6:	4b67      	ldr	r3, [pc, #412]	; (8002764 <HAL_RCC_ClockConfig+0x1c0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f023 0207 	bic.w	r2, r3, #7
 80025ce:	4965      	ldr	r1, [pc, #404]	; (8002764 <HAL_RCC_ClockConfig+0x1c0>)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d6:	4b63      	ldr	r3, [pc, #396]	; (8002764 <HAL_RCC_ClockConfig+0x1c0>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d001      	beq.n	80025e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e0b8      	b.n	800275a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d020      	beq.n	8002636 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0304 	and.w	r3, r3, #4
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d005      	beq.n	800260c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002600:	4b59      	ldr	r3, [pc, #356]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	4a58      	ldr	r2, [pc, #352]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002606:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800260a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0308 	and.w	r3, r3, #8
 8002614:	2b00      	cmp	r3, #0
 8002616:	d005      	beq.n	8002624 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002618:	4b53      	ldr	r3, [pc, #332]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	4a52      	ldr	r2, [pc, #328]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 800261e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002622:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002624:	4b50      	ldr	r3, [pc, #320]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	494d      	ldr	r1, [pc, #308]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002632:	4313      	orrs	r3, r2
 8002634:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d040      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d107      	bne.n	800265a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800264a:	4b47      	ldr	r3, [pc, #284]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d115      	bne.n	8002682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e07f      	b.n	800275a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	2b02      	cmp	r3, #2
 8002660:	d107      	bne.n	8002672 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002662:	4b41      	ldr	r3, [pc, #260]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d109      	bne.n	8002682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e073      	b.n	800275a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002672:	4b3d      	ldr	r3, [pc, #244]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e06b      	b.n	800275a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002682:	4b39      	ldr	r3, [pc, #228]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f023 0203 	bic.w	r2, r3, #3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	4936      	ldr	r1, [pc, #216]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002690:	4313      	orrs	r3, r2
 8002692:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002694:	f7ff f976 	bl	8001984 <HAL_GetTick>
 8002698:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269a:	e00a      	b.n	80026b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800269c:	f7ff f972 	bl	8001984 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e053      	b.n	800275a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b2:	4b2d      	ldr	r3, [pc, #180]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f003 020c 	and.w	r2, r3, #12
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d1eb      	bne.n	800269c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026c4:	4b27      	ldr	r3, [pc, #156]	; (8002764 <HAL_RCC_ClockConfig+0x1c0>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0307 	and.w	r3, r3, #7
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d210      	bcs.n	80026f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d2:	4b24      	ldr	r3, [pc, #144]	; (8002764 <HAL_RCC_ClockConfig+0x1c0>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f023 0207 	bic.w	r2, r3, #7
 80026da:	4922      	ldr	r1, [pc, #136]	; (8002764 <HAL_RCC_ClockConfig+0x1c0>)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	4313      	orrs	r3, r2
 80026e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026e2:	4b20      	ldr	r3, [pc, #128]	; (8002764 <HAL_RCC_ClockConfig+0x1c0>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d001      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e032      	b.n	800275a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d008      	beq.n	8002712 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002700:	4b19      	ldr	r3, [pc, #100]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	4916      	ldr	r1, [pc, #88]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 800270e:	4313      	orrs	r3, r2
 8002710:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0308 	and.w	r3, r3, #8
 800271a:	2b00      	cmp	r3, #0
 800271c:	d009      	beq.n	8002732 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800271e:	4b12      	ldr	r3, [pc, #72]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	490e      	ldr	r1, [pc, #56]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 800272e:	4313      	orrs	r3, r2
 8002730:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002732:	f000 f821 	bl	8002778 <HAL_RCC_GetSysClockFreq>
 8002736:	4602      	mov	r2, r0
 8002738:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	091b      	lsrs	r3, r3, #4
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	490a      	ldr	r1, [pc, #40]	; (800276c <HAL_RCC_ClockConfig+0x1c8>)
 8002744:	5ccb      	ldrb	r3, [r1, r3]
 8002746:	fa22 f303 	lsr.w	r3, r2, r3
 800274a:	4a09      	ldr	r2, [pc, #36]	; (8002770 <HAL_RCC_ClockConfig+0x1cc>)
 800274c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800274e:	4b09      	ldr	r3, [pc, #36]	; (8002774 <HAL_RCC_ClockConfig+0x1d0>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff f8d4 	bl	8001900 <HAL_InitTick>

  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40022000 	.word	0x40022000
 8002768:	40021000 	.word	0x40021000
 800276c:	08004614 	.word	0x08004614
 8002770:	20000044 	.word	0x20000044
 8002774:	20000048 	.word	0x20000048

08002778 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002778:	b480      	push	{r7}
 800277a:	b087      	sub	sp, #28
 800277c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800277e:	2300      	movs	r3, #0
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	2300      	movs	r3, #0
 8002784:	60bb      	str	r3, [r7, #8]
 8002786:	2300      	movs	r3, #0
 8002788:	617b      	str	r3, [r7, #20]
 800278a:	2300      	movs	r3, #0
 800278c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800278e:	2300      	movs	r3, #0
 8002790:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002792:	4b1e      	ldr	r3, [pc, #120]	; (800280c <HAL_RCC_GetSysClockFreq+0x94>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f003 030c 	and.w	r3, r3, #12
 800279e:	2b04      	cmp	r3, #4
 80027a0:	d002      	beq.n	80027a8 <HAL_RCC_GetSysClockFreq+0x30>
 80027a2:	2b08      	cmp	r3, #8
 80027a4:	d003      	beq.n	80027ae <HAL_RCC_GetSysClockFreq+0x36>
 80027a6:	e027      	b.n	80027f8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027a8:	4b19      	ldr	r3, [pc, #100]	; (8002810 <HAL_RCC_GetSysClockFreq+0x98>)
 80027aa:	613b      	str	r3, [r7, #16]
      break;
 80027ac:	e027      	b.n	80027fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	0c9b      	lsrs	r3, r3, #18
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	4a17      	ldr	r2, [pc, #92]	; (8002814 <HAL_RCC_GetSysClockFreq+0x9c>)
 80027b8:	5cd3      	ldrb	r3, [r2, r3]
 80027ba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d010      	beq.n	80027e8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027c6:	4b11      	ldr	r3, [pc, #68]	; (800280c <HAL_RCC_GetSysClockFreq+0x94>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	0c5b      	lsrs	r3, r3, #17
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	4a11      	ldr	r2, [pc, #68]	; (8002818 <HAL_RCC_GetSysClockFreq+0xa0>)
 80027d2:	5cd3      	ldrb	r3, [r2, r3]
 80027d4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a0d      	ldr	r2, [pc, #52]	; (8002810 <HAL_RCC_GetSysClockFreq+0x98>)
 80027da:	fb02 f203 	mul.w	r2, r2, r3
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e4:	617b      	str	r3, [r7, #20]
 80027e6:	e004      	b.n	80027f2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a0c      	ldr	r2, [pc, #48]	; (800281c <HAL_RCC_GetSysClockFreq+0xa4>)
 80027ec:	fb02 f303 	mul.w	r3, r2, r3
 80027f0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	613b      	str	r3, [r7, #16]
      break;
 80027f6:	e002      	b.n	80027fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027f8:	4b05      	ldr	r3, [pc, #20]	; (8002810 <HAL_RCC_GetSysClockFreq+0x98>)
 80027fa:	613b      	str	r3, [r7, #16]
      break;
 80027fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027fe:	693b      	ldr	r3, [r7, #16]
}
 8002800:	4618      	mov	r0, r3
 8002802:	371c      	adds	r7, #28
 8002804:	46bd      	mov	sp, r7
 8002806:	bc80      	pop	{r7}
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	40021000 	.word	0x40021000
 8002810:	007a1200 	.word	0x007a1200
 8002814:	0800462c 	.word	0x0800462c
 8002818:	0800463c 	.word	0x0800463c
 800281c:	003d0900 	.word	0x003d0900

08002820 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002824:	4b02      	ldr	r3, [pc, #8]	; (8002830 <HAL_RCC_GetHCLKFreq+0x10>)
 8002826:	681b      	ldr	r3, [r3, #0]
}
 8002828:	4618      	mov	r0, r3
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr
 8002830:	20000044 	.word	0x20000044

08002834 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002838:	f7ff fff2 	bl	8002820 <HAL_RCC_GetHCLKFreq>
 800283c:	4602      	mov	r2, r0
 800283e:	4b05      	ldr	r3, [pc, #20]	; (8002854 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	0a1b      	lsrs	r3, r3, #8
 8002844:	f003 0307 	and.w	r3, r3, #7
 8002848:	4903      	ldr	r1, [pc, #12]	; (8002858 <HAL_RCC_GetPCLK1Freq+0x24>)
 800284a:	5ccb      	ldrb	r3, [r1, r3]
 800284c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002850:	4618      	mov	r0, r3
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40021000 	.word	0x40021000
 8002858:	08004624 	.word	0x08004624

0800285c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002860:	f7ff ffde 	bl	8002820 <HAL_RCC_GetHCLKFreq>
 8002864:	4602      	mov	r2, r0
 8002866:	4b05      	ldr	r3, [pc, #20]	; (800287c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	0adb      	lsrs	r3, r3, #11
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	4903      	ldr	r1, [pc, #12]	; (8002880 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002872:	5ccb      	ldrb	r3, [r1, r3]
 8002874:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002878:	4618      	mov	r0, r3
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40021000 	.word	0x40021000
 8002880:	08004624 	.word	0x08004624

08002884 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800288c:	4b0a      	ldr	r3, [pc, #40]	; (80028b8 <RCC_Delay+0x34>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a0a      	ldr	r2, [pc, #40]	; (80028bc <RCC_Delay+0x38>)
 8002892:	fba2 2303 	umull	r2, r3, r2, r3
 8002896:	0a5b      	lsrs	r3, r3, #9
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	fb02 f303 	mul.w	r3, r2, r3
 800289e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028a0:	bf00      	nop
  }
  while (Delay --);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	1e5a      	subs	r2, r3, #1
 80028a6:	60fa      	str	r2, [r7, #12]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1f9      	bne.n	80028a0 <RCC_Delay+0x1c>
}
 80028ac:	bf00      	nop
 80028ae:	bf00      	nop
 80028b0:	3714      	adds	r7, #20
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr
 80028b8:	20000044 	.word	0x20000044
 80028bc:	10624dd3 	.word	0x10624dd3

080028c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e041      	b.n	8002956 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d106      	bne.n	80028ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7fe fede 	bl	80016a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2202      	movs	r2, #2
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	3304      	adds	r3, #4
 80028fc:	4619      	mov	r1, r3
 80028fe:	4610      	mov	r0, r2
 8002900:	f000 fa6e 	bl	8002de0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
	...

08002960 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2b01      	cmp	r3, #1
 8002972:	d001      	beq.n	8002978 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e035      	b.n	80029e4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2202      	movs	r2, #2
 800297c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68da      	ldr	r2, [r3, #12]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f042 0201 	orr.w	r2, r2, #1
 800298e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a16      	ldr	r2, [pc, #88]	; (80029f0 <HAL_TIM_Base_Start_IT+0x90>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d009      	beq.n	80029ae <HAL_TIM_Base_Start_IT+0x4e>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029a2:	d004      	beq.n	80029ae <HAL_TIM_Base_Start_IT+0x4e>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a12      	ldr	r2, [pc, #72]	; (80029f4 <HAL_TIM_Base_Start_IT+0x94>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d111      	bne.n	80029d2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f003 0307 	and.w	r3, r3, #7
 80029b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2b06      	cmp	r3, #6
 80029be:	d010      	beq.n	80029e2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f042 0201 	orr.w	r2, r2, #1
 80029ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029d0:	e007      	b.n	80029e2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f042 0201 	orr.w	r2, r2, #1
 80029e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3714      	adds	r7, #20
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bc80      	pop	{r7}
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	40012c00 	.word	0x40012c00
 80029f4:	40000400 	.word	0x40000400

080029f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d122      	bne.n	8002a54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d11b      	bne.n	8002a54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f06f 0202 	mvn.w	r2, #2
 8002a24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f9b4 	bl	8002da8 <HAL_TIM_IC_CaptureCallback>
 8002a40:	e005      	b.n	8002a4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 f9a7 	bl	8002d96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 f9b6 	bl	8002dba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	f003 0304 	and.w	r3, r3, #4
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	d122      	bne.n	8002aa8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	2b04      	cmp	r3, #4
 8002a6e:	d11b      	bne.n	8002aa8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f06f 0204 	mvn.w	r2, #4
 8002a78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2202      	movs	r2, #2
 8002a7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f98a 	bl	8002da8 <HAL_TIM_IC_CaptureCallback>
 8002a94:	e005      	b.n	8002aa2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 f97d 	bl	8002d96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 f98c 	bl	8002dba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	f003 0308 	and.w	r3, r3, #8
 8002ab2:	2b08      	cmp	r3, #8
 8002ab4:	d122      	bne.n	8002afc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	f003 0308 	and.w	r3, r3, #8
 8002ac0:	2b08      	cmp	r3, #8
 8002ac2:	d11b      	bne.n	8002afc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f06f 0208 	mvn.w	r2, #8
 8002acc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2204      	movs	r2, #4
 8002ad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	f003 0303 	and.w	r3, r3, #3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d003      	beq.n	8002aea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 f960 	bl	8002da8 <HAL_TIM_IC_CaptureCallback>
 8002ae8:	e005      	b.n	8002af6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 f953 	bl	8002d96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f000 f962 	bl	8002dba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	f003 0310 	and.w	r3, r3, #16
 8002b06:	2b10      	cmp	r3, #16
 8002b08:	d122      	bne.n	8002b50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	f003 0310 	and.w	r3, r3, #16
 8002b14:	2b10      	cmp	r3, #16
 8002b16:	d11b      	bne.n	8002b50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f06f 0210 	mvn.w	r2, #16
 8002b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2208      	movs	r2, #8
 8002b26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	69db      	ldr	r3, [r3, #28]
 8002b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 f936 	bl	8002da8 <HAL_TIM_IC_CaptureCallback>
 8002b3c:	e005      	b.n	8002b4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f929 	bl	8002d96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 f938 	bl	8002dba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d10e      	bne.n	8002b7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d107      	bne.n	8002b7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f06f 0201 	mvn.w	r2, #1
 8002b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7fd febc 	bl	80008f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b86:	2b80      	cmp	r3, #128	; 0x80
 8002b88:	d10e      	bne.n	8002ba8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b94:	2b80      	cmp	r3, #128	; 0x80
 8002b96:	d107      	bne.n	8002ba8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 fa6b 	bl	800307e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb2:	2b40      	cmp	r3, #64	; 0x40
 8002bb4:	d10e      	bne.n	8002bd4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc0:	2b40      	cmp	r3, #64	; 0x40
 8002bc2:	d107      	bne.n	8002bd4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f8fc 	bl	8002dcc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	f003 0320 	and.w	r3, r3, #32
 8002bde:	2b20      	cmp	r3, #32
 8002be0:	d10e      	bne.n	8002c00 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	f003 0320 	and.w	r3, r3, #32
 8002bec:	2b20      	cmp	r3, #32
 8002bee:	d107      	bne.n	8002c00 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f06f 0220 	mvn.w	r2, #32
 8002bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 fa36 	bl	800306c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c00:	bf00      	nop
 8002c02:	3708      	adds	r7, #8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c12:	2300      	movs	r3, #0
 8002c14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d101      	bne.n	8002c24 <HAL_TIM_ConfigClockSource+0x1c>
 8002c20:	2302      	movs	r3, #2
 8002c22:	e0b4      	b.n	8002d8e <HAL_TIM_ConfigClockSource+0x186>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2202      	movs	r2, #2
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68ba      	ldr	r2, [r7, #8]
 8002c52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c5c:	d03e      	beq.n	8002cdc <HAL_TIM_ConfigClockSource+0xd4>
 8002c5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c62:	f200 8087 	bhi.w	8002d74 <HAL_TIM_ConfigClockSource+0x16c>
 8002c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c6a:	f000 8086 	beq.w	8002d7a <HAL_TIM_ConfigClockSource+0x172>
 8002c6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c72:	d87f      	bhi.n	8002d74 <HAL_TIM_ConfigClockSource+0x16c>
 8002c74:	2b70      	cmp	r3, #112	; 0x70
 8002c76:	d01a      	beq.n	8002cae <HAL_TIM_ConfigClockSource+0xa6>
 8002c78:	2b70      	cmp	r3, #112	; 0x70
 8002c7a:	d87b      	bhi.n	8002d74 <HAL_TIM_ConfigClockSource+0x16c>
 8002c7c:	2b60      	cmp	r3, #96	; 0x60
 8002c7e:	d050      	beq.n	8002d22 <HAL_TIM_ConfigClockSource+0x11a>
 8002c80:	2b60      	cmp	r3, #96	; 0x60
 8002c82:	d877      	bhi.n	8002d74 <HAL_TIM_ConfigClockSource+0x16c>
 8002c84:	2b50      	cmp	r3, #80	; 0x50
 8002c86:	d03c      	beq.n	8002d02 <HAL_TIM_ConfigClockSource+0xfa>
 8002c88:	2b50      	cmp	r3, #80	; 0x50
 8002c8a:	d873      	bhi.n	8002d74 <HAL_TIM_ConfigClockSource+0x16c>
 8002c8c:	2b40      	cmp	r3, #64	; 0x40
 8002c8e:	d058      	beq.n	8002d42 <HAL_TIM_ConfigClockSource+0x13a>
 8002c90:	2b40      	cmp	r3, #64	; 0x40
 8002c92:	d86f      	bhi.n	8002d74 <HAL_TIM_ConfigClockSource+0x16c>
 8002c94:	2b30      	cmp	r3, #48	; 0x30
 8002c96:	d064      	beq.n	8002d62 <HAL_TIM_ConfigClockSource+0x15a>
 8002c98:	2b30      	cmp	r3, #48	; 0x30
 8002c9a:	d86b      	bhi.n	8002d74 <HAL_TIM_ConfigClockSource+0x16c>
 8002c9c:	2b20      	cmp	r3, #32
 8002c9e:	d060      	beq.n	8002d62 <HAL_TIM_ConfigClockSource+0x15a>
 8002ca0:	2b20      	cmp	r3, #32
 8002ca2:	d867      	bhi.n	8002d74 <HAL_TIM_ConfigClockSource+0x16c>
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d05c      	beq.n	8002d62 <HAL_TIM_ConfigClockSource+0x15a>
 8002ca8:	2b10      	cmp	r3, #16
 8002caa:	d05a      	beq.n	8002d62 <HAL_TIM_ConfigClockSource+0x15a>
 8002cac:	e062      	b.n	8002d74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6818      	ldr	r0, [r3, #0]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	6899      	ldr	r1, [r3, #8]
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	f000 f95e 	bl	8002f7e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002cd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	609a      	str	r2, [r3, #8]
      break;
 8002cda:	e04f      	b.n	8002d7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6818      	ldr	r0, [r3, #0]
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	6899      	ldr	r1, [r3, #8]
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685a      	ldr	r2, [r3, #4]
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f000 f947 	bl	8002f7e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689a      	ldr	r2, [r3, #8]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cfe:	609a      	str	r2, [r3, #8]
      break;
 8002d00:	e03c      	b.n	8002d7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6818      	ldr	r0, [r3, #0]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	6859      	ldr	r1, [r3, #4]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	f000 f8be 	bl	8002e90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2150      	movs	r1, #80	; 0x50
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f000 f915 	bl	8002f4a <TIM_ITRx_SetConfig>
      break;
 8002d20:	e02c      	b.n	8002d7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6818      	ldr	r0, [r3, #0]
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	6859      	ldr	r1, [r3, #4]
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	f000 f8dc 	bl	8002eec <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2160      	movs	r1, #96	; 0x60
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f000 f905 	bl	8002f4a <TIM_ITRx_SetConfig>
      break;
 8002d40:	e01c      	b.n	8002d7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6818      	ldr	r0, [r3, #0]
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	6859      	ldr	r1, [r3, #4]
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	f000 f89e 	bl	8002e90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2140      	movs	r1, #64	; 0x40
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f000 f8f5 	bl	8002f4a <TIM_ITRx_SetConfig>
      break;
 8002d60:	e00c      	b.n	8002d7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4610      	mov	r0, r2
 8002d6e:	f000 f8ec 	bl	8002f4a <TIM_ITRx_SetConfig>
      break;
 8002d72:	e003      	b.n	8002d7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	73fb      	strb	r3, [r7, #15]
      break;
 8002d78:	e000      	b.n	8002d7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d9e:	bf00      	nop
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bc80      	pop	{r7}
 8002da6:	4770      	bx	lr

08002da8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bc80      	pop	{r7}
 8002db8:	4770      	bx	lr

08002dba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b083      	sub	sp, #12
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dc2:	bf00      	nop
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr

08002dcc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bc80      	pop	{r7}
 8002ddc:	4770      	bx	lr
	...

08002de0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a25      	ldr	r2, [pc, #148]	; (8002e88 <TIM_Base_SetConfig+0xa8>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d007      	beq.n	8002e08 <TIM_Base_SetConfig+0x28>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dfe:	d003      	beq.n	8002e08 <TIM_Base_SetConfig+0x28>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a22      	ldr	r2, [pc, #136]	; (8002e8c <TIM_Base_SetConfig+0xac>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d108      	bne.n	8002e1a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a1a      	ldr	r2, [pc, #104]	; (8002e88 <TIM_Base_SetConfig+0xa8>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d007      	beq.n	8002e32 <TIM_Base_SetConfig+0x52>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e28:	d003      	beq.n	8002e32 <TIM_Base_SetConfig+0x52>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a17      	ldr	r2, [pc, #92]	; (8002e8c <TIM_Base_SetConfig+0xac>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d108      	bne.n	8002e44 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a07      	ldr	r2, [pc, #28]	; (8002e88 <TIM_Base_SetConfig+0xa8>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d103      	bne.n	8002e78 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	691a      	ldr	r2, [r3, #16]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	615a      	str	r2, [r3, #20]
}
 8002e7e:	bf00      	nop
 8002e80:	3714      	adds	r7, #20
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bc80      	pop	{r7}
 8002e86:	4770      	bx	lr
 8002e88:	40012c00 	.word	0x40012c00
 8002e8c:	40000400 	.word	0x40000400

08002e90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b087      	sub	sp, #28
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	f023 0201 	bic.w	r2, r3, #1
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002eba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	011b      	lsls	r3, r3, #4
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	f023 030a 	bic.w	r3, r3, #10
 8002ecc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	693a      	ldr	r2, [r7, #16]
 8002eda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	621a      	str	r2, [r3, #32]
}
 8002ee2:	bf00      	nop
 8002ee4:	371c      	adds	r7, #28
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bc80      	pop	{r7}
 8002eea:	4770      	bx	lr

08002eec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b087      	sub	sp, #28
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6a1b      	ldr	r3, [r3, #32]
 8002efc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	f023 0210 	bic.w	r2, r3, #16
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	031b      	lsls	r3, r3, #12
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f28:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	011b      	lsls	r3, r3, #4
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	697a      	ldr	r2, [r7, #20]
 8002f3e:	621a      	str	r2, [r3, #32]
}
 8002f40:	bf00      	nop
 8002f42:	371c      	adds	r7, #28
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bc80      	pop	{r7}
 8002f48:	4770      	bx	lr

08002f4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b085      	sub	sp, #20
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
 8002f52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	f043 0307 	orr.w	r3, r3, #7
 8002f6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	609a      	str	r2, [r3, #8]
}
 8002f74:	bf00      	nop
 8002f76:	3714      	adds	r7, #20
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bc80      	pop	{r7}
 8002f7c:	4770      	bx	lr

08002f7e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b087      	sub	sp, #28
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	60f8      	str	r0, [r7, #12]
 8002f86:	60b9      	str	r1, [r7, #8]
 8002f88:	607a      	str	r2, [r7, #4]
 8002f8a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f98:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	021a      	lsls	r2, r3, #8
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	431a      	orrs	r2, r3
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	609a      	str	r2, [r3, #8]
}
 8002fb2:	bf00      	nop
 8002fb4:	371c      	adds	r7, #28
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bc80      	pop	{r7}
 8002fba:	4770      	bx	lr

08002fbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d101      	bne.n	8002fd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	e041      	b.n	8003058 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2202      	movs	r2, #2
 8002fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ffa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	4313      	orrs	r3, r2
 8003004:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a14      	ldr	r2, [pc, #80]	; (8003064 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d009      	beq.n	800302c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003020:	d004      	beq.n	800302c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a10      	ldr	r2, [pc, #64]	; (8003068 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d10c      	bne.n	8003046 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003032:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	68ba      	ldr	r2, [r7, #8]
 800303a:	4313      	orrs	r3, r2
 800303c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3714      	adds	r7, #20
 800305c:	46bd      	mov	sp, r7
 800305e:	bc80      	pop	{r7}
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	40012c00 	.word	0x40012c00
 8003068:	40000400 	.word	0x40000400

0800306c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	bc80      	pop	{r7}
 800307c:	4770      	bx	lr

0800307e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800307e:	b480      	push	{r7}
 8003080:	b083      	sub	sp, #12
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003086:	bf00      	nop
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	bc80      	pop	{r7}
 800308e:	4770      	bx	lr

08003090 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e042      	b.n	8003128 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d106      	bne.n	80030bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7fe fb1a 	bl	80016f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2224      	movs	r2, #36	; 0x24
 80030c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68da      	ldr	r2, [r3, #12]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f000 fd71 	bl	8003bbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	691a      	ldr	r2, [r3, #16]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	695a      	ldr	r2, [r3, #20]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68da      	ldr	r2, [r3, #12]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003108:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2220      	movs	r2, #32
 8003114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2220      	movs	r2, #32
 800311c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3708      	adds	r7, #8
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b08a      	sub	sp, #40	; 0x28
 8003134:	af02      	add	r7, sp, #8
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	603b      	str	r3, [r7, #0]
 800313c:	4613      	mov	r3, r2
 800313e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003140:	2300      	movs	r3, #0
 8003142:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b20      	cmp	r3, #32
 800314e:	d16d      	bne.n	800322c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d002      	beq.n	800315c <HAL_UART_Transmit+0x2c>
 8003156:	88fb      	ldrh	r3, [r7, #6]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d101      	bne.n	8003160 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e066      	b.n	800322e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2221      	movs	r2, #33	; 0x21
 800316a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800316e:	f7fe fc09 	bl	8001984 <HAL_GetTick>
 8003172:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	88fa      	ldrh	r2, [r7, #6]
 8003178:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	88fa      	ldrh	r2, [r7, #6]
 800317e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003188:	d108      	bne.n	800319c <HAL_UART_Transmit+0x6c>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d104      	bne.n	800319c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003192:	2300      	movs	r3, #0
 8003194:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	61bb      	str	r3, [r7, #24]
 800319a:	e003      	b.n	80031a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031a0:	2300      	movs	r3, #0
 80031a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80031a4:	e02a      	b.n	80031fc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	9300      	str	r3, [sp, #0]
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	2200      	movs	r2, #0
 80031ae:	2180      	movs	r1, #128	; 0x80
 80031b0:	68f8      	ldr	r0, [r7, #12]
 80031b2:	f000 faf9 	bl	80037a8 <UART_WaitOnFlagUntilTimeout>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e036      	b.n	800322e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d10b      	bne.n	80031de <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	881b      	ldrh	r3, [r3, #0]
 80031ca:	461a      	mov	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	3302      	adds	r3, #2
 80031da:	61bb      	str	r3, [r7, #24]
 80031dc:	e007      	b.n	80031ee <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	781a      	ldrb	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	3301      	adds	r3, #1
 80031ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	3b01      	subs	r3, #1
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003200:	b29b      	uxth	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1cf      	bne.n	80031a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	9300      	str	r3, [sp, #0]
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	2200      	movs	r2, #0
 800320e:	2140      	movs	r1, #64	; 0x40
 8003210:	68f8      	ldr	r0, [r7, #12]
 8003212:	f000 fac9 	bl	80037a8 <UART_WaitOnFlagUntilTimeout>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d001      	beq.n	8003220 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e006      	b.n	800322e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2220      	movs	r2, #32
 8003224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003228:	2300      	movs	r3, #0
 800322a:	e000      	b.n	800322e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800322c:	2302      	movs	r3, #2
  }
}
 800322e:	4618      	mov	r0, r3
 8003230:	3720      	adds	r7, #32
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
	...

08003238 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b0ba      	sub	sp, #232	; 0xe8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800325e:	2300      	movs	r3, #0
 8003260:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003264:	2300      	movs	r3, #0
 8003266:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800326a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003276:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800327a:	2b00      	cmp	r3, #0
 800327c:	d10f      	bne.n	800329e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800327e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003282:	f003 0320 	and.w	r3, r3, #32
 8003286:	2b00      	cmp	r3, #0
 8003288:	d009      	beq.n	800329e <HAL_UART_IRQHandler+0x66>
 800328a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800328e:	f003 0320 	and.w	r3, r3, #32
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 fbd1 	bl	8003a3e <UART_Receive_IT>
      return;
 800329c:	e25b      	b.n	8003756 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800329e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 80de 	beq.w	8003464 <HAL_UART_IRQHandler+0x22c>
 80032a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d106      	bne.n	80032c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80032b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f000 80d1 	beq.w	8003464 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80032c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00b      	beq.n	80032e6 <HAL_UART_IRQHandler+0xae>
 80032ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d005      	beq.n	80032e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032de:	f043 0201 	orr.w	r2, r3, #1
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032ea:	f003 0304 	and.w	r3, r3, #4
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00b      	beq.n	800330a <HAL_UART_IRQHandler+0xd2>
 80032f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d005      	beq.n	800330a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003302:	f043 0202 	orr.w	r2, r3, #2
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800330a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00b      	beq.n	800332e <HAL_UART_IRQHandler+0xf6>
 8003316:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	d005      	beq.n	800332e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003326:	f043 0204 	orr.w	r2, r3, #4
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800332e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003332:	f003 0308 	and.w	r3, r3, #8
 8003336:	2b00      	cmp	r3, #0
 8003338:	d011      	beq.n	800335e <HAL_UART_IRQHandler+0x126>
 800333a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800333e:	f003 0320 	and.w	r3, r3, #32
 8003342:	2b00      	cmp	r3, #0
 8003344:	d105      	bne.n	8003352 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003346:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b00      	cmp	r3, #0
 8003350:	d005      	beq.n	800335e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003356:	f043 0208 	orr.w	r2, r3, #8
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003362:	2b00      	cmp	r3, #0
 8003364:	f000 81f2 	beq.w	800374c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800336c:	f003 0320 	and.w	r3, r3, #32
 8003370:	2b00      	cmp	r3, #0
 8003372:	d008      	beq.n	8003386 <HAL_UART_IRQHandler+0x14e>
 8003374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003378:	f003 0320 	and.w	r3, r3, #32
 800337c:	2b00      	cmp	r3, #0
 800337e:	d002      	beq.n	8003386 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 fb5c 	bl	8003a3e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003390:	2b00      	cmp	r3, #0
 8003392:	bf14      	ite	ne
 8003394:	2301      	movne	r3, #1
 8003396:	2300      	moveq	r3, #0
 8003398:	b2db      	uxtb	r3, r3
 800339a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a2:	f003 0308 	and.w	r3, r3, #8
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d103      	bne.n	80033b2 <HAL_UART_IRQHandler+0x17a>
 80033aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d04f      	beq.n	8003452 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 fa66 	bl	8003884 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d041      	beq.n	800344a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	3314      	adds	r3, #20
 80033cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80033d4:	e853 3f00 	ldrex	r3, [r3]
 80033d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80033dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80033e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	3314      	adds	r3, #20
 80033ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80033f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80033f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80033fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003402:	e841 2300 	strex	r3, r2, [r1]
 8003406:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800340a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1d9      	bne.n	80033c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003416:	2b00      	cmp	r3, #0
 8003418:	d013      	beq.n	8003442 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800341e:	4a7e      	ldr	r2, [pc, #504]	; (8003618 <HAL_UART_IRQHandler+0x3e0>)
 8003420:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003426:	4618      	mov	r0, r3
 8003428:	f7fe fbfe 	bl	8001c28 <HAL_DMA_Abort_IT>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d016      	beq.n	8003460 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800343c:	4610      	mov	r0, r2
 800343e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003440:	e00e      	b.n	8003460 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f99c 	bl	8003780 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003448:	e00a      	b.n	8003460 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f998 	bl	8003780 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003450:	e006      	b.n	8003460 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f994 	bl	8003780 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800345e:	e175      	b.n	800374c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003460:	bf00      	nop
    return;
 8003462:	e173      	b.n	800374c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003468:	2b01      	cmp	r3, #1
 800346a:	f040 814f 	bne.w	800370c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800346e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003472:	f003 0310 	and.w	r3, r3, #16
 8003476:	2b00      	cmp	r3, #0
 8003478:	f000 8148 	beq.w	800370c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800347c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003480:	f003 0310 	and.w	r3, r3, #16
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 8141 	beq.w	800370c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800348a:	2300      	movs	r3, #0
 800348c:	60bb      	str	r3, [r7, #8]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	60bb      	str	r3, [r7, #8]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	60bb      	str	r3, [r7, #8]
 800349e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f000 80b6 	beq.w	800361c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80034bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f000 8145 	beq.w	8003750 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80034ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80034ce:	429a      	cmp	r2, r3
 80034d0:	f080 813e 	bcs.w	8003750 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80034da:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	2b20      	cmp	r3, #32
 80034e4:	f000 8088 	beq.w	80035f8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	330c      	adds	r3, #12
 80034ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80034f6:	e853 3f00 	ldrex	r3, [r3]
 80034fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80034fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003502:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003506:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	330c      	adds	r3, #12
 8003510:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003514:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003518:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800351c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003520:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003524:	e841 2300 	strex	r3, r2, [r1]
 8003528:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800352c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1d9      	bne.n	80034e8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	3314      	adds	r3, #20
 800353a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800353c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800353e:	e853 3f00 	ldrex	r3, [r3]
 8003542:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003544:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003546:	f023 0301 	bic.w	r3, r3, #1
 800354a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	3314      	adds	r3, #20
 8003554:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003558:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800355c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800355e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003560:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003564:	e841 2300 	strex	r3, r2, [r1]
 8003568:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800356a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800356c:	2b00      	cmp	r3, #0
 800356e:	d1e1      	bne.n	8003534 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	3314      	adds	r3, #20
 8003576:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003578:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800357a:	e853 3f00 	ldrex	r3, [r3]
 800357e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003580:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003582:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003586:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	3314      	adds	r3, #20
 8003590:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003594:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003596:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003598:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800359a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800359c:	e841 2300 	strex	r3, r2, [r1]
 80035a0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80035a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1e3      	bne.n	8003570 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2220      	movs	r2, #32
 80035ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	330c      	adds	r3, #12
 80035bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035c0:	e853 3f00 	ldrex	r3, [r3]
 80035c4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80035c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035c8:	f023 0310 	bic.w	r3, r3, #16
 80035cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	330c      	adds	r3, #12
 80035d6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80035da:	65ba      	str	r2, [r7, #88]	; 0x58
 80035dc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80035e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80035e2:	e841 2300 	strex	r3, r2, [r1]
 80035e6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80035e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1e3      	bne.n	80035b6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7fe fadd 	bl	8001bb2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2202      	movs	r2, #2
 80035fc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003606:	b29b      	uxth	r3, r3
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	b29b      	uxth	r3, r3
 800360c:	4619      	mov	r1, r3
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f8bf 	bl	8003792 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003614:	e09c      	b.n	8003750 <HAL_UART_IRQHandler+0x518>
 8003616:	bf00      	nop
 8003618:	08003949 	.word	0x08003949
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003624:	b29b      	uxth	r3, r3
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003630:	b29b      	uxth	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	f000 808e 	beq.w	8003754 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003638:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800363c:	2b00      	cmp	r3, #0
 800363e:	f000 8089 	beq.w	8003754 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	330c      	adds	r3, #12
 8003648:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800364a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800364c:	e853 3f00 	ldrex	r3, [r3]
 8003650:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003654:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003658:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	330c      	adds	r3, #12
 8003662:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003666:	647a      	str	r2, [r7, #68]	; 0x44
 8003668:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800366a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800366c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800366e:	e841 2300 	strex	r3, r2, [r1]
 8003672:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1e3      	bne.n	8003642 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	3314      	adds	r3, #20
 8003680:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003684:	e853 3f00 	ldrex	r3, [r3]
 8003688:	623b      	str	r3, [r7, #32]
   return(result);
 800368a:	6a3b      	ldr	r3, [r7, #32]
 800368c:	f023 0301 	bic.w	r3, r3, #1
 8003690:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	3314      	adds	r3, #20
 800369a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800369e:	633a      	str	r2, [r7, #48]	; 0x30
 80036a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036a6:	e841 2300 	strex	r3, r2, [r1]
 80036aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80036ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1e3      	bne.n	800367a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2220      	movs	r2, #32
 80036b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	330c      	adds	r3, #12
 80036c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	e853 3f00 	ldrex	r3, [r3]
 80036ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f023 0310 	bic.w	r3, r3, #16
 80036d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	330c      	adds	r3, #12
 80036e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80036e4:	61fa      	str	r2, [r7, #28]
 80036e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e8:	69b9      	ldr	r1, [r7, #24]
 80036ea:	69fa      	ldr	r2, [r7, #28]
 80036ec:	e841 2300 	strex	r3, r2, [r1]
 80036f0:	617b      	str	r3, [r7, #20]
   return(result);
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1e3      	bne.n	80036c0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2202      	movs	r2, #2
 80036fc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80036fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003702:	4619      	mov	r1, r3
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 f844 	bl	8003792 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800370a:	e023      	b.n	8003754 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800370c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003714:	2b00      	cmp	r3, #0
 8003716:	d009      	beq.n	800372c <HAL_UART_IRQHandler+0x4f4>
 8003718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800371c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003720:	2b00      	cmp	r3, #0
 8003722:	d003      	beq.n	800372c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 f923 	bl	8003970 <UART_Transmit_IT>
    return;
 800372a:	e014      	b.n	8003756 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800372c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00e      	beq.n	8003756 <HAL_UART_IRQHandler+0x51e>
 8003738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800373c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003740:	2b00      	cmp	r3, #0
 8003742:	d008      	beq.n	8003756 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f000 f962 	bl	8003a0e <UART_EndTransmit_IT>
    return;
 800374a:	e004      	b.n	8003756 <HAL_UART_IRQHandler+0x51e>
    return;
 800374c:	bf00      	nop
 800374e:	e002      	b.n	8003756 <HAL_UART_IRQHandler+0x51e>
      return;
 8003750:	bf00      	nop
 8003752:	e000      	b.n	8003756 <HAL_UART_IRQHandler+0x51e>
      return;
 8003754:	bf00      	nop
  }
}
 8003756:	37e8      	adds	r7, #232	; 0xe8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	bc80      	pop	{r7}
 800376c:	4770      	bx	lr

0800376e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800376e:	b480      	push	{r7}
 8003770:	b083      	sub	sp, #12
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003776:	bf00      	nop
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	bc80      	pop	{r7}
 800377e:	4770      	bx	lr

08003780 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	bc80      	pop	{r7}
 8003790:	4770      	bx	lr

08003792 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003792:	b480      	push	{r7}
 8003794:	b083      	sub	sp, #12
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
 800379a:	460b      	mov	r3, r1
 800379c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800379e:	bf00      	nop
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bc80      	pop	{r7}
 80037a6:	4770      	bx	lr

080037a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b090      	sub	sp, #64	; 0x40
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	603b      	str	r3, [r7, #0]
 80037b4:	4613      	mov	r3, r2
 80037b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037b8:	e050      	b.n	800385c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c0:	d04c      	beq.n	800385c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80037c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d007      	beq.n	80037d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80037c8:	f7fe f8dc 	bl	8001984 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d241      	bcs.n	800385c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	330c      	adds	r3, #12
 80037de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e2:	e853 3f00 	ldrex	r3, [r3]
 80037e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	330c      	adds	r3, #12
 80037f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037f8:	637a      	str	r2, [r7, #52]	; 0x34
 80037fa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003800:	e841 2300 	strex	r3, r2, [r1]
 8003804:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1e5      	bne.n	80037d8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	3314      	adds	r3, #20
 8003812:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	e853 3f00 	ldrex	r3, [r3]
 800381a:	613b      	str	r3, [r7, #16]
   return(result);
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	f023 0301 	bic.w	r3, r3, #1
 8003822:	63bb      	str	r3, [r7, #56]	; 0x38
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	3314      	adds	r3, #20
 800382a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800382c:	623a      	str	r2, [r7, #32]
 800382e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003830:	69f9      	ldr	r1, [r7, #28]
 8003832:	6a3a      	ldr	r2, [r7, #32]
 8003834:	e841 2300 	strex	r3, r2, [r1]
 8003838:	61bb      	str	r3, [r7, #24]
   return(result);
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1e5      	bne.n	800380c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2220      	movs	r2, #32
 8003844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2220      	movs	r2, #32
 800384c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e00f      	b.n	800387c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	4013      	ands	r3, r2
 8003866:	68ba      	ldr	r2, [r7, #8]
 8003868:	429a      	cmp	r2, r3
 800386a:	bf0c      	ite	eq
 800386c:	2301      	moveq	r3, #1
 800386e:	2300      	movne	r3, #0
 8003870:	b2db      	uxtb	r3, r3
 8003872:	461a      	mov	r2, r3
 8003874:	79fb      	ldrb	r3, [r7, #7]
 8003876:	429a      	cmp	r2, r3
 8003878:	d09f      	beq.n	80037ba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3740      	adds	r7, #64	; 0x40
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003884:	b480      	push	{r7}
 8003886:	b095      	sub	sp, #84	; 0x54
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	330c      	adds	r3, #12
 8003892:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003896:	e853 3f00 	ldrex	r3, [r3]
 800389a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800389c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	330c      	adds	r3, #12
 80038aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80038ac:	643a      	str	r2, [r7, #64]	; 0x40
 80038ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80038b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80038b4:	e841 2300 	strex	r3, r2, [r1]
 80038b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80038ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1e5      	bne.n	800388c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	3314      	adds	r3, #20
 80038c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c8:	6a3b      	ldr	r3, [r7, #32]
 80038ca:	e853 3f00 	ldrex	r3, [r3]
 80038ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	f023 0301 	bic.w	r3, r3, #1
 80038d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	3314      	adds	r3, #20
 80038de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038e8:	e841 2300 	strex	r3, r2, [r1]
 80038ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d1e5      	bne.n	80038c0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d119      	bne.n	8003930 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	330c      	adds	r3, #12
 8003902:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	e853 3f00 	ldrex	r3, [r3]
 800390a:	60bb      	str	r3, [r7, #8]
   return(result);
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	f023 0310 	bic.w	r3, r3, #16
 8003912:	647b      	str	r3, [r7, #68]	; 0x44
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	330c      	adds	r3, #12
 800391a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800391c:	61ba      	str	r2, [r7, #24]
 800391e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003920:	6979      	ldr	r1, [r7, #20]
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	e841 2300 	strex	r3, r2, [r1]
 8003928:	613b      	str	r3, [r7, #16]
   return(result);
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1e5      	bne.n	80038fc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2220      	movs	r2, #32
 8003934:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800393e:	bf00      	nop
 8003940:	3754      	adds	r7, #84	; 0x54
 8003942:	46bd      	mov	sp, r7
 8003944:	bc80      	pop	{r7}
 8003946:	4770      	bx	lr

08003948 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003954:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f7ff ff0c 	bl	8003780 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003968:	bf00      	nop
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800397e:	b2db      	uxtb	r3, r3
 8003980:	2b21      	cmp	r3, #33	; 0x21
 8003982:	d13e      	bne.n	8003a02 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800398c:	d114      	bne.n	80039b8 <UART_Transmit_IT+0x48>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d110      	bne.n	80039b8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	881b      	ldrh	r3, [r3, #0]
 80039a0:	461a      	mov	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039aa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a1b      	ldr	r3, [r3, #32]
 80039b0:	1c9a      	adds	r2, r3, #2
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	621a      	str	r2, [r3, #32]
 80039b6:	e008      	b.n	80039ca <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a1b      	ldr	r3, [r3, #32]
 80039bc:	1c59      	adds	r1, r3, #1
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	6211      	str	r1, [r2, #32]
 80039c2:	781a      	ldrb	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	3b01      	subs	r3, #1
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	4619      	mov	r1, r3
 80039d8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10f      	bne.n	80039fe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68da      	ldr	r2, [r3, #12]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039ec:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68da      	ldr	r2, [r3, #12]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039fc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80039fe:	2300      	movs	r3, #0
 8003a00:	e000      	b.n	8003a04 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003a02:	2302      	movs	r3, #2
  }
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3714      	adds	r7, #20
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bc80      	pop	{r7}
 8003a0c:	4770      	bx	lr

08003a0e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b082      	sub	sp, #8
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68da      	ldr	r2, [r3, #12]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a24:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2220      	movs	r2, #32
 8003a2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f7ff fe94 	bl	800375c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b08c      	sub	sp, #48	; 0x30
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b22      	cmp	r3, #34	; 0x22
 8003a50:	f040 80ae 	bne.w	8003bb0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a5c:	d117      	bne.n	8003a8e <UART_Receive_IT+0x50>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d113      	bne.n	8003a8e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003a66:	2300      	movs	r3, #0
 8003a68:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a80:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a86:	1c9a      	adds	r2, r3, #2
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	629a      	str	r2, [r3, #40]	; 0x28
 8003a8c:	e026      	b.n	8003adc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a92:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003a94:	2300      	movs	r3, #0
 8003a96:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aa0:	d007      	beq.n	8003ab2 <UART_Receive_IT+0x74>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10a      	bne.n	8003ac0 <UART_Receive_IT+0x82>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d106      	bne.n	8003ac0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	b2da      	uxtb	r2, r3
 8003aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003abc:	701a      	strb	r2, [r3, #0]
 8003abe:	e008      	b.n	8003ad2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003acc:	b2da      	uxtb	r2, r3
 8003ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad6:	1c5a      	adds	r2, r3, #1
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	4619      	mov	r1, r3
 8003aea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d15d      	bne.n	8003bac <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68da      	ldr	r2, [r3, #12]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 0220 	bic.w	r2, r2, #32
 8003afe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68da      	ldr	r2, [r3, #12]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	695a      	ldr	r2, [r3, #20]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 0201 	bic.w	r2, r2, #1
 8003b1e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2220      	movs	r2, #32
 8003b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d135      	bne.n	8003ba2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	330c      	adds	r3, #12
 8003b42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	e853 3f00 	ldrex	r3, [r3]
 8003b4a:	613b      	str	r3, [r7, #16]
   return(result);
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	f023 0310 	bic.w	r3, r3, #16
 8003b52:	627b      	str	r3, [r7, #36]	; 0x24
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	330c      	adds	r3, #12
 8003b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b5c:	623a      	str	r2, [r7, #32]
 8003b5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b60:	69f9      	ldr	r1, [r7, #28]
 8003b62:	6a3a      	ldr	r2, [r7, #32]
 8003b64:	e841 2300 	strex	r3, r2, [r1]
 8003b68:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1e5      	bne.n	8003b3c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0310 	and.w	r3, r3, #16
 8003b7a:	2b10      	cmp	r3, #16
 8003b7c:	d10a      	bne.n	8003b94 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b7e:	2300      	movs	r3, #0
 8003b80:	60fb      	str	r3, [r7, #12]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	60fb      	str	r3, [r7, #12]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	60fb      	str	r3, [r7, #12]
 8003b92:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b98:	4619      	mov	r1, r3
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7ff fdf9 	bl	8003792 <HAL_UARTEx_RxEventCallback>
 8003ba0:	e002      	b.n	8003ba8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7ff fde3 	bl	800376e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	e002      	b.n	8003bb2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003bac:	2300      	movs	r3, #0
 8003bae:	e000      	b.n	8003bb2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003bb0:	2302      	movs	r3, #2
  }
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3730      	adds	r7, #48	; 0x30
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
	...

08003bbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68da      	ldr	r2, [r3, #12]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	689a      	ldr	r2, [r3, #8]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	431a      	orrs	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	695b      	ldr	r3, [r3, #20]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003bf6:	f023 030c 	bic.w	r3, r3, #12
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	6812      	ldr	r2, [r2, #0]
 8003bfe:	68b9      	ldr	r1, [r7, #8]
 8003c00:	430b      	orrs	r3, r1
 8003c02:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	699a      	ldr	r2, [r3, #24]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	430a      	orrs	r2, r1
 8003c18:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a2c      	ldr	r2, [pc, #176]	; (8003cd0 <UART_SetConfig+0x114>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d103      	bne.n	8003c2c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003c24:	f7fe fe1a 	bl	800285c <HAL_RCC_GetPCLK2Freq>
 8003c28:	60f8      	str	r0, [r7, #12]
 8003c2a:	e002      	b.n	8003c32 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003c2c:	f7fe fe02 	bl	8002834 <HAL_RCC_GetPCLK1Freq>
 8003c30:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	4613      	mov	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	4413      	add	r3, r2
 8003c3a:	009a      	lsls	r2, r3, #2
 8003c3c:	441a      	add	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c48:	4a22      	ldr	r2, [pc, #136]	; (8003cd4 <UART_SetConfig+0x118>)
 8003c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4e:	095b      	lsrs	r3, r3, #5
 8003c50:	0119      	lsls	r1, r3, #4
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	4613      	mov	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4413      	add	r3, r2
 8003c5a:	009a      	lsls	r2, r3, #2
 8003c5c:	441a      	add	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c68:	4b1a      	ldr	r3, [pc, #104]	; (8003cd4 <UART_SetConfig+0x118>)
 8003c6a:	fba3 0302 	umull	r0, r3, r3, r2
 8003c6e:	095b      	lsrs	r3, r3, #5
 8003c70:	2064      	movs	r0, #100	; 0x64
 8003c72:	fb00 f303 	mul.w	r3, r0, r3
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	011b      	lsls	r3, r3, #4
 8003c7a:	3332      	adds	r3, #50	; 0x32
 8003c7c:	4a15      	ldr	r2, [pc, #84]	; (8003cd4 <UART_SetConfig+0x118>)
 8003c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c82:	095b      	lsrs	r3, r3, #5
 8003c84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c88:	4419      	add	r1, r3
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	4413      	add	r3, r2
 8003c92:	009a      	lsls	r2, r3, #2
 8003c94:	441a      	add	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ca0:	4b0c      	ldr	r3, [pc, #48]	; (8003cd4 <UART_SetConfig+0x118>)
 8003ca2:	fba3 0302 	umull	r0, r3, r3, r2
 8003ca6:	095b      	lsrs	r3, r3, #5
 8003ca8:	2064      	movs	r0, #100	; 0x64
 8003caa:	fb00 f303 	mul.w	r3, r0, r3
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	011b      	lsls	r3, r3, #4
 8003cb2:	3332      	adds	r3, #50	; 0x32
 8003cb4:	4a07      	ldr	r2, [pc, #28]	; (8003cd4 <UART_SetConfig+0x118>)
 8003cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cba:	095b      	lsrs	r3, r3, #5
 8003cbc:	f003 020f 	and.w	r2, r3, #15
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	440a      	add	r2, r1
 8003cc6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003cc8:	bf00      	nop
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	40013800 	.word	0x40013800
 8003cd4:	51eb851f 	.word	0x51eb851f

08003cd8 <__errno>:
 8003cd8:	4b01      	ldr	r3, [pc, #4]	; (8003ce0 <__errno+0x8>)
 8003cda:	6818      	ldr	r0, [r3, #0]
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	20000050 	.word	0x20000050

08003ce4 <__libc_init_array>:
 8003ce4:	b570      	push	{r4, r5, r6, lr}
 8003ce6:	2600      	movs	r6, #0
 8003ce8:	4d0c      	ldr	r5, [pc, #48]	; (8003d1c <__libc_init_array+0x38>)
 8003cea:	4c0d      	ldr	r4, [pc, #52]	; (8003d20 <__libc_init_array+0x3c>)
 8003cec:	1b64      	subs	r4, r4, r5
 8003cee:	10a4      	asrs	r4, r4, #2
 8003cf0:	42a6      	cmp	r6, r4
 8003cf2:	d109      	bne.n	8003d08 <__libc_init_array+0x24>
 8003cf4:	f000 fc6c 	bl	80045d0 <_init>
 8003cf8:	2600      	movs	r6, #0
 8003cfa:	4d0a      	ldr	r5, [pc, #40]	; (8003d24 <__libc_init_array+0x40>)
 8003cfc:	4c0a      	ldr	r4, [pc, #40]	; (8003d28 <__libc_init_array+0x44>)
 8003cfe:	1b64      	subs	r4, r4, r5
 8003d00:	10a4      	asrs	r4, r4, #2
 8003d02:	42a6      	cmp	r6, r4
 8003d04:	d105      	bne.n	8003d12 <__libc_init_array+0x2e>
 8003d06:	bd70      	pop	{r4, r5, r6, pc}
 8003d08:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d0c:	4798      	blx	r3
 8003d0e:	3601      	adds	r6, #1
 8003d10:	e7ee      	b.n	8003cf0 <__libc_init_array+0xc>
 8003d12:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d16:	4798      	blx	r3
 8003d18:	3601      	adds	r6, #1
 8003d1a:	e7f2      	b.n	8003d02 <__libc_init_array+0x1e>
 8003d1c:	08004674 	.word	0x08004674
 8003d20:	08004674 	.word	0x08004674
 8003d24:	08004674 	.word	0x08004674
 8003d28:	08004678 	.word	0x08004678

08003d2c <malloc>:
 8003d2c:	4b02      	ldr	r3, [pc, #8]	; (8003d38 <malloc+0xc>)
 8003d2e:	4601      	mov	r1, r0
 8003d30:	6818      	ldr	r0, [r3, #0]
 8003d32:	f000 b85f 	b.w	8003df4 <_malloc_r>
 8003d36:	bf00      	nop
 8003d38:	20000050 	.word	0x20000050

08003d3c <free>:
 8003d3c:	4b02      	ldr	r3, [pc, #8]	; (8003d48 <free+0xc>)
 8003d3e:	4601      	mov	r1, r0
 8003d40:	6818      	ldr	r0, [r3, #0]
 8003d42:	f000 b80b 	b.w	8003d5c <_free_r>
 8003d46:	bf00      	nop
 8003d48:	20000050 	.word	0x20000050

08003d4c <memset>:
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	4402      	add	r2, r0
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d100      	bne.n	8003d56 <memset+0xa>
 8003d54:	4770      	bx	lr
 8003d56:	f803 1b01 	strb.w	r1, [r3], #1
 8003d5a:	e7f9      	b.n	8003d50 <memset+0x4>

08003d5c <_free_r>:
 8003d5c:	b538      	push	{r3, r4, r5, lr}
 8003d5e:	4605      	mov	r5, r0
 8003d60:	2900      	cmp	r1, #0
 8003d62:	d043      	beq.n	8003dec <_free_r+0x90>
 8003d64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d68:	1f0c      	subs	r4, r1, #4
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	bfb8      	it	lt
 8003d6e:	18e4      	addlt	r4, r4, r3
 8003d70:	f000 f8ca 	bl	8003f08 <__malloc_lock>
 8003d74:	4a1e      	ldr	r2, [pc, #120]	; (8003df0 <_free_r+0x94>)
 8003d76:	6813      	ldr	r3, [r2, #0]
 8003d78:	4610      	mov	r0, r2
 8003d7a:	b933      	cbnz	r3, 8003d8a <_free_r+0x2e>
 8003d7c:	6063      	str	r3, [r4, #4]
 8003d7e:	6014      	str	r4, [r2, #0]
 8003d80:	4628      	mov	r0, r5
 8003d82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d86:	f000 b8c5 	b.w	8003f14 <__malloc_unlock>
 8003d8a:	42a3      	cmp	r3, r4
 8003d8c:	d90a      	bls.n	8003da4 <_free_r+0x48>
 8003d8e:	6821      	ldr	r1, [r4, #0]
 8003d90:	1862      	adds	r2, r4, r1
 8003d92:	4293      	cmp	r3, r2
 8003d94:	bf01      	itttt	eq
 8003d96:	681a      	ldreq	r2, [r3, #0]
 8003d98:	685b      	ldreq	r3, [r3, #4]
 8003d9a:	1852      	addeq	r2, r2, r1
 8003d9c:	6022      	streq	r2, [r4, #0]
 8003d9e:	6063      	str	r3, [r4, #4]
 8003da0:	6004      	str	r4, [r0, #0]
 8003da2:	e7ed      	b.n	8003d80 <_free_r+0x24>
 8003da4:	461a      	mov	r2, r3
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	b10b      	cbz	r3, 8003dae <_free_r+0x52>
 8003daa:	42a3      	cmp	r3, r4
 8003dac:	d9fa      	bls.n	8003da4 <_free_r+0x48>
 8003dae:	6811      	ldr	r1, [r2, #0]
 8003db0:	1850      	adds	r0, r2, r1
 8003db2:	42a0      	cmp	r0, r4
 8003db4:	d10b      	bne.n	8003dce <_free_r+0x72>
 8003db6:	6820      	ldr	r0, [r4, #0]
 8003db8:	4401      	add	r1, r0
 8003dba:	1850      	adds	r0, r2, r1
 8003dbc:	4283      	cmp	r3, r0
 8003dbe:	6011      	str	r1, [r2, #0]
 8003dc0:	d1de      	bne.n	8003d80 <_free_r+0x24>
 8003dc2:	6818      	ldr	r0, [r3, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	4401      	add	r1, r0
 8003dc8:	6011      	str	r1, [r2, #0]
 8003dca:	6053      	str	r3, [r2, #4]
 8003dcc:	e7d8      	b.n	8003d80 <_free_r+0x24>
 8003dce:	d902      	bls.n	8003dd6 <_free_r+0x7a>
 8003dd0:	230c      	movs	r3, #12
 8003dd2:	602b      	str	r3, [r5, #0]
 8003dd4:	e7d4      	b.n	8003d80 <_free_r+0x24>
 8003dd6:	6820      	ldr	r0, [r4, #0]
 8003dd8:	1821      	adds	r1, r4, r0
 8003dda:	428b      	cmp	r3, r1
 8003ddc:	bf01      	itttt	eq
 8003dde:	6819      	ldreq	r1, [r3, #0]
 8003de0:	685b      	ldreq	r3, [r3, #4]
 8003de2:	1809      	addeq	r1, r1, r0
 8003de4:	6021      	streq	r1, [r4, #0]
 8003de6:	6063      	str	r3, [r4, #4]
 8003de8:	6054      	str	r4, [r2, #4]
 8003dea:	e7c9      	b.n	8003d80 <_free_r+0x24>
 8003dec:	bd38      	pop	{r3, r4, r5, pc}
 8003dee:	bf00      	nop
 8003df0:	200000fc 	.word	0x200000fc

08003df4 <_malloc_r>:
 8003df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003df6:	1ccd      	adds	r5, r1, #3
 8003df8:	f025 0503 	bic.w	r5, r5, #3
 8003dfc:	3508      	adds	r5, #8
 8003dfe:	2d0c      	cmp	r5, #12
 8003e00:	bf38      	it	cc
 8003e02:	250c      	movcc	r5, #12
 8003e04:	2d00      	cmp	r5, #0
 8003e06:	4606      	mov	r6, r0
 8003e08:	db01      	blt.n	8003e0e <_malloc_r+0x1a>
 8003e0a:	42a9      	cmp	r1, r5
 8003e0c:	d903      	bls.n	8003e16 <_malloc_r+0x22>
 8003e0e:	230c      	movs	r3, #12
 8003e10:	6033      	str	r3, [r6, #0]
 8003e12:	2000      	movs	r0, #0
 8003e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e16:	f000 f877 	bl	8003f08 <__malloc_lock>
 8003e1a:	4921      	ldr	r1, [pc, #132]	; (8003ea0 <_malloc_r+0xac>)
 8003e1c:	680a      	ldr	r2, [r1, #0]
 8003e1e:	4614      	mov	r4, r2
 8003e20:	b99c      	cbnz	r4, 8003e4a <_malloc_r+0x56>
 8003e22:	4f20      	ldr	r7, [pc, #128]	; (8003ea4 <_malloc_r+0xb0>)
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	b923      	cbnz	r3, 8003e32 <_malloc_r+0x3e>
 8003e28:	4621      	mov	r1, r4
 8003e2a:	4630      	mov	r0, r6
 8003e2c:	f000 f83c 	bl	8003ea8 <_sbrk_r>
 8003e30:	6038      	str	r0, [r7, #0]
 8003e32:	4629      	mov	r1, r5
 8003e34:	4630      	mov	r0, r6
 8003e36:	f000 f837 	bl	8003ea8 <_sbrk_r>
 8003e3a:	1c43      	adds	r3, r0, #1
 8003e3c:	d123      	bne.n	8003e86 <_malloc_r+0x92>
 8003e3e:	230c      	movs	r3, #12
 8003e40:	4630      	mov	r0, r6
 8003e42:	6033      	str	r3, [r6, #0]
 8003e44:	f000 f866 	bl	8003f14 <__malloc_unlock>
 8003e48:	e7e3      	b.n	8003e12 <_malloc_r+0x1e>
 8003e4a:	6823      	ldr	r3, [r4, #0]
 8003e4c:	1b5b      	subs	r3, r3, r5
 8003e4e:	d417      	bmi.n	8003e80 <_malloc_r+0x8c>
 8003e50:	2b0b      	cmp	r3, #11
 8003e52:	d903      	bls.n	8003e5c <_malloc_r+0x68>
 8003e54:	6023      	str	r3, [r4, #0]
 8003e56:	441c      	add	r4, r3
 8003e58:	6025      	str	r5, [r4, #0]
 8003e5a:	e004      	b.n	8003e66 <_malloc_r+0x72>
 8003e5c:	6863      	ldr	r3, [r4, #4]
 8003e5e:	42a2      	cmp	r2, r4
 8003e60:	bf0c      	ite	eq
 8003e62:	600b      	streq	r3, [r1, #0]
 8003e64:	6053      	strne	r3, [r2, #4]
 8003e66:	4630      	mov	r0, r6
 8003e68:	f000 f854 	bl	8003f14 <__malloc_unlock>
 8003e6c:	f104 000b 	add.w	r0, r4, #11
 8003e70:	1d23      	adds	r3, r4, #4
 8003e72:	f020 0007 	bic.w	r0, r0, #7
 8003e76:	1ac2      	subs	r2, r0, r3
 8003e78:	d0cc      	beq.n	8003e14 <_malloc_r+0x20>
 8003e7a:	1a1b      	subs	r3, r3, r0
 8003e7c:	50a3      	str	r3, [r4, r2]
 8003e7e:	e7c9      	b.n	8003e14 <_malloc_r+0x20>
 8003e80:	4622      	mov	r2, r4
 8003e82:	6864      	ldr	r4, [r4, #4]
 8003e84:	e7cc      	b.n	8003e20 <_malloc_r+0x2c>
 8003e86:	1cc4      	adds	r4, r0, #3
 8003e88:	f024 0403 	bic.w	r4, r4, #3
 8003e8c:	42a0      	cmp	r0, r4
 8003e8e:	d0e3      	beq.n	8003e58 <_malloc_r+0x64>
 8003e90:	1a21      	subs	r1, r4, r0
 8003e92:	4630      	mov	r0, r6
 8003e94:	f000 f808 	bl	8003ea8 <_sbrk_r>
 8003e98:	3001      	adds	r0, #1
 8003e9a:	d1dd      	bne.n	8003e58 <_malloc_r+0x64>
 8003e9c:	e7cf      	b.n	8003e3e <_malloc_r+0x4a>
 8003e9e:	bf00      	nop
 8003ea0:	200000fc 	.word	0x200000fc
 8003ea4:	20000100 	.word	0x20000100

08003ea8 <_sbrk_r>:
 8003ea8:	b538      	push	{r3, r4, r5, lr}
 8003eaa:	2300      	movs	r3, #0
 8003eac:	4d05      	ldr	r5, [pc, #20]	; (8003ec4 <_sbrk_r+0x1c>)
 8003eae:	4604      	mov	r4, r0
 8003eb0:	4608      	mov	r0, r1
 8003eb2:	602b      	str	r3, [r5, #0]
 8003eb4:	f7fd fcac 	bl	8001810 <_sbrk>
 8003eb8:	1c43      	adds	r3, r0, #1
 8003eba:	d102      	bne.n	8003ec2 <_sbrk_r+0x1a>
 8003ebc:	682b      	ldr	r3, [r5, #0]
 8003ebe:	b103      	cbz	r3, 8003ec2 <_sbrk_r+0x1a>
 8003ec0:	6023      	str	r3, [r4, #0]
 8003ec2:	bd38      	pop	{r3, r4, r5, pc}
 8003ec4:	200001e0 	.word	0x200001e0

08003ec8 <siprintf>:
 8003ec8:	b40e      	push	{r1, r2, r3}
 8003eca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003ece:	b500      	push	{lr}
 8003ed0:	b09c      	sub	sp, #112	; 0x70
 8003ed2:	ab1d      	add	r3, sp, #116	; 0x74
 8003ed4:	9002      	str	r0, [sp, #8]
 8003ed6:	9006      	str	r0, [sp, #24]
 8003ed8:	9107      	str	r1, [sp, #28]
 8003eda:	9104      	str	r1, [sp, #16]
 8003edc:	4808      	ldr	r0, [pc, #32]	; (8003f00 <siprintf+0x38>)
 8003ede:	4909      	ldr	r1, [pc, #36]	; (8003f04 <siprintf+0x3c>)
 8003ee0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ee4:	9105      	str	r1, [sp, #20]
 8003ee6:	6800      	ldr	r0, [r0, #0]
 8003ee8:	a902      	add	r1, sp, #8
 8003eea:	9301      	str	r3, [sp, #4]
 8003eec:	f000 f874 	bl	8003fd8 <_svfiprintf_r>
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	9b02      	ldr	r3, [sp, #8]
 8003ef4:	701a      	strb	r2, [r3, #0]
 8003ef6:	b01c      	add	sp, #112	; 0x70
 8003ef8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003efc:	b003      	add	sp, #12
 8003efe:	4770      	bx	lr
 8003f00:	20000050 	.word	0x20000050
 8003f04:	ffff0208 	.word	0xffff0208

08003f08 <__malloc_lock>:
 8003f08:	4801      	ldr	r0, [pc, #4]	; (8003f10 <__malloc_lock+0x8>)
 8003f0a:	f000 bafb 	b.w	8004504 <__retarget_lock_acquire_recursive>
 8003f0e:	bf00      	nop
 8003f10:	200001e8 	.word	0x200001e8

08003f14 <__malloc_unlock>:
 8003f14:	4801      	ldr	r0, [pc, #4]	; (8003f1c <__malloc_unlock+0x8>)
 8003f16:	f000 baf6 	b.w	8004506 <__retarget_lock_release_recursive>
 8003f1a:	bf00      	nop
 8003f1c:	200001e8 	.word	0x200001e8

08003f20 <__ssputs_r>:
 8003f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f24:	688e      	ldr	r6, [r1, #8]
 8003f26:	4682      	mov	sl, r0
 8003f28:	429e      	cmp	r6, r3
 8003f2a:	460c      	mov	r4, r1
 8003f2c:	4690      	mov	r8, r2
 8003f2e:	461f      	mov	r7, r3
 8003f30:	d838      	bhi.n	8003fa4 <__ssputs_r+0x84>
 8003f32:	898a      	ldrh	r2, [r1, #12]
 8003f34:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003f38:	d032      	beq.n	8003fa0 <__ssputs_r+0x80>
 8003f3a:	6825      	ldr	r5, [r4, #0]
 8003f3c:	6909      	ldr	r1, [r1, #16]
 8003f3e:	3301      	adds	r3, #1
 8003f40:	eba5 0901 	sub.w	r9, r5, r1
 8003f44:	6965      	ldr	r5, [r4, #20]
 8003f46:	444b      	add	r3, r9
 8003f48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f50:	106d      	asrs	r5, r5, #1
 8003f52:	429d      	cmp	r5, r3
 8003f54:	bf38      	it	cc
 8003f56:	461d      	movcc	r5, r3
 8003f58:	0553      	lsls	r3, r2, #21
 8003f5a:	d531      	bpl.n	8003fc0 <__ssputs_r+0xa0>
 8003f5c:	4629      	mov	r1, r5
 8003f5e:	f7ff ff49 	bl	8003df4 <_malloc_r>
 8003f62:	4606      	mov	r6, r0
 8003f64:	b950      	cbnz	r0, 8003f7c <__ssputs_r+0x5c>
 8003f66:	230c      	movs	r3, #12
 8003f68:	f04f 30ff 	mov.w	r0, #4294967295
 8003f6c:	f8ca 3000 	str.w	r3, [sl]
 8003f70:	89a3      	ldrh	r3, [r4, #12]
 8003f72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f76:	81a3      	strh	r3, [r4, #12]
 8003f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f7c:	464a      	mov	r2, r9
 8003f7e:	6921      	ldr	r1, [r4, #16]
 8003f80:	f000 fad0 	bl	8004524 <memcpy>
 8003f84:	89a3      	ldrh	r3, [r4, #12]
 8003f86:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f8e:	81a3      	strh	r3, [r4, #12]
 8003f90:	6126      	str	r6, [r4, #16]
 8003f92:	444e      	add	r6, r9
 8003f94:	6026      	str	r6, [r4, #0]
 8003f96:	463e      	mov	r6, r7
 8003f98:	6165      	str	r5, [r4, #20]
 8003f9a:	eba5 0509 	sub.w	r5, r5, r9
 8003f9e:	60a5      	str	r5, [r4, #8]
 8003fa0:	42be      	cmp	r6, r7
 8003fa2:	d900      	bls.n	8003fa6 <__ssputs_r+0x86>
 8003fa4:	463e      	mov	r6, r7
 8003fa6:	4632      	mov	r2, r6
 8003fa8:	4641      	mov	r1, r8
 8003faa:	6820      	ldr	r0, [r4, #0]
 8003fac:	f000 fac8 	bl	8004540 <memmove>
 8003fb0:	68a3      	ldr	r3, [r4, #8]
 8003fb2:	6822      	ldr	r2, [r4, #0]
 8003fb4:	1b9b      	subs	r3, r3, r6
 8003fb6:	4432      	add	r2, r6
 8003fb8:	2000      	movs	r0, #0
 8003fba:	60a3      	str	r3, [r4, #8]
 8003fbc:	6022      	str	r2, [r4, #0]
 8003fbe:	e7db      	b.n	8003f78 <__ssputs_r+0x58>
 8003fc0:	462a      	mov	r2, r5
 8003fc2:	f000 fad7 	bl	8004574 <_realloc_r>
 8003fc6:	4606      	mov	r6, r0
 8003fc8:	2800      	cmp	r0, #0
 8003fca:	d1e1      	bne.n	8003f90 <__ssputs_r+0x70>
 8003fcc:	4650      	mov	r0, sl
 8003fce:	6921      	ldr	r1, [r4, #16]
 8003fd0:	f7ff fec4 	bl	8003d5c <_free_r>
 8003fd4:	e7c7      	b.n	8003f66 <__ssputs_r+0x46>
	...

08003fd8 <_svfiprintf_r>:
 8003fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fdc:	4698      	mov	r8, r3
 8003fde:	898b      	ldrh	r3, [r1, #12]
 8003fe0:	4607      	mov	r7, r0
 8003fe2:	061b      	lsls	r3, r3, #24
 8003fe4:	460d      	mov	r5, r1
 8003fe6:	4614      	mov	r4, r2
 8003fe8:	b09d      	sub	sp, #116	; 0x74
 8003fea:	d50e      	bpl.n	800400a <_svfiprintf_r+0x32>
 8003fec:	690b      	ldr	r3, [r1, #16]
 8003fee:	b963      	cbnz	r3, 800400a <_svfiprintf_r+0x32>
 8003ff0:	2140      	movs	r1, #64	; 0x40
 8003ff2:	f7ff feff 	bl	8003df4 <_malloc_r>
 8003ff6:	6028      	str	r0, [r5, #0]
 8003ff8:	6128      	str	r0, [r5, #16]
 8003ffa:	b920      	cbnz	r0, 8004006 <_svfiprintf_r+0x2e>
 8003ffc:	230c      	movs	r3, #12
 8003ffe:	603b      	str	r3, [r7, #0]
 8004000:	f04f 30ff 	mov.w	r0, #4294967295
 8004004:	e0d1      	b.n	80041aa <_svfiprintf_r+0x1d2>
 8004006:	2340      	movs	r3, #64	; 0x40
 8004008:	616b      	str	r3, [r5, #20]
 800400a:	2300      	movs	r3, #0
 800400c:	9309      	str	r3, [sp, #36]	; 0x24
 800400e:	2320      	movs	r3, #32
 8004010:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004014:	2330      	movs	r3, #48	; 0x30
 8004016:	f04f 0901 	mov.w	r9, #1
 800401a:	f8cd 800c 	str.w	r8, [sp, #12]
 800401e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80041c4 <_svfiprintf_r+0x1ec>
 8004022:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004026:	4623      	mov	r3, r4
 8004028:	469a      	mov	sl, r3
 800402a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800402e:	b10a      	cbz	r2, 8004034 <_svfiprintf_r+0x5c>
 8004030:	2a25      	cmp	r2, #37	; 0x25
 8004032:	d1f9      	bne.n	8004028 <_svfiprintf_r+0x50>
 8004034:	ebba 0b04 	subs.w	fp, sl, r4
 8004038:	d00b      	beq.n	8004052 <_svfiprintf_r+0x7a>
 800403a:	465b      	mov	r3, fp
 800403c:	4622      	mov	r2, r4
 800403e:	4629      	mov	r1, r5
 8004040:	4638      	mov	r0, r7
 8004042:	f7ff ff6d 	bl	8003f20 <__ssputs_r>
 8004046:	3001      	adds	r0, #1
 8004048:	f000 80aa 	beq.w	80041a0 <_svfiprintf_r+0x1c8>
 800404c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800404e:	445a      	add	r2, fp
 8004050:	9209      	str	r2, [sp, #36]	; 0x24
 8004052:	f89a 3000 	ldrb.w	r3, [sl]
 8004056:	2b00      	cmp	r3, #0
 8004058:	f000 80a2 	beq.w	80041a0 <_svfiprintf_r+0x1c8>
 800405c:	2300      	movs	r3, #0
 800405e:	f04f 32ff 	mov.w	r2, #4294967295
 8004062:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004066:	f10a 0a01 	add.w	sl, sl, #1
 800406a:	9304      	str	r3, [sp, #16]
 800406c:	9307      	str	r3, [sp, #28]
 800406e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004072:	931a      	str	r3, [sp, #104]	; 0x68
 8004074:	4654      	mov	r4, sl
 8004076:	2205      	movs	r2, #5
 8004078:	f814 1b01 	ldrb.w	r1, [r4], #1
 800407c:	4851      	ldr	r0, [pc, #324]	; (80041c4 <_svfiprintf_r+0x1ec>)
 800407e:	f000 fa43 	bl	8004508 <memchr>
 8004082:	9a04      	ldr	r2, [sp, #16]
 8004084:	b9d8      	cbnz	r0, 80040be <_svfiprintf_r+0xe6>
 8004086:	06d0      	lsls	r0, r2, #27
 8004088:	bf44      	itt	mi
 800408a:	2320      	movmi	r3, #32
 800408c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004090:	0711      	lsls	r1, r2, #28
 8004092:	bf44      	itt	mi
 8004094:	232b      	movmi	r3, #43	; 0x2b
 8004096:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800409a:	f89a 3000 	ldrb.w	r3, [sl]
 800409e:	2b2a      	cmp	r3, #42	; 0x2a
 80040a0:	d015      	beq.n	80040ce <_svfiprintf_r+0xf6>
 80040a2:	4654      	mov	r4, sl
 80040a4:	2000      	movs	r0, #0
 80040a6:	f04f 0c0a 	mov.w	ip, #10
 80040aa:	9a07      	ldr	r2, [sp, #28]
 80040ac:	4621      	mov	r1, r4
 80040ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040b2:	3b30      	subs	r3, #48	; 0x30
 80040b4:	2b09      	cmp	r3, #9
 80040b6:	d94e      	bls.n	8004156 <_svfiprintf_r+0x17e>
 80040b8:	b1b0      	cbz	r0, 80040e8 <_svfiprintf_r+0x110>
 80040ba:	9207      	str	r2, [sp, #28]
 80040bc:	e014      	b.n	80040e8 <_svfiprintf_r+0x110>
 80040be:	eba0 0308 	sub.w	r3, r0, r8
 80040c2:	fa09 f303 	lsl.w	r3, r9, r3
 80040c6:	4313      	orrs	r3, r2
 80040c8:	46a2      	mov	sl, r4
 80040ca:	9304      	str	r3, [sp, #16]
 80040cc:	e7d2      	b.n	8004074 <_svfiprintf_r+0x9c>
 80040ce:	9b03      	ldr	r3, [sp, #12]
 80040d0:	1d19      	adds	r1, r3, #4
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	9103      	str	r1, [sp, #12]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	bfbb      	ittet	lt
 80040da:	425b      	neglt	r3, r3
 80040dc:	f042 0202 	orrlt.w	r2, r2, #2
 80040e0:	9307      	strge	r3, [sp, #28]
 80040e2:	9307      	strlt	r3, [sp, #28]
 80040e4:	bfb8      	it	lt
 80040e6:	9204      	strlt	r2, [sp, #16]
 80040e8:	7823      	ldrb	r3, [r4, #0]
 80040ea:	2b2e      	cmp	r3, #46	; 0x2e
 80040ec:	d10c      	bne.n	8004108 <_svfiprintf_r+0x130>
 80040ee:	7863      	ldrb	r3, [r4, #1]
 80040f0:	2b2a      	cmp	r3, #42	; 0x2a
 80040f2:	d135      	bne.n	8004160 <_svfiprintf_r+0x188>
 80040f4:	9b03      	ldr	r3, [sp, #12]
 80040f6:	3402      	adds	r4, #2
 80040f8:	1d1a      	adds	r2, r3, #4
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	9203      	str	r2, [sp, #12]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	bfb8      	it	lt
 8004102:	f04f 33ff 	movlt.w	r3, #4294967295
 8004106:	9305      	str	r3, [sp, #20]
 8004108:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80041d4 <_svfiprintf_r+0x1fc>
 800410c:	2203      	movs	r2, #3
 800410e:	4650      	mov	r0, sl
 8004110:	7821      	ldrb	r1, [r4, #0]
 8004112:	f000 f9f9 	bl	8004508 <memchr>
 8004116:	b140      	cbz	r0, 800412a <_svfiprintf_r+0x152>
 8004118:	2340      	movs	r3, #64	; 0x40
 800411a:	eba0 000a 	sub.w	r0, r0, sl
 800411e:	fa03 f000 	lsl.w	r0, r3, r0
 8004122:	9b04      	ldr	r3, [sp, #16]
 8004124:	3401      	adds	r4, #1
 8004126:	4303      	orrs	r3, r0
 8004128:	9304      	str	r3, [sp, #16]
 800412a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800412e:	2206      	movs	r2, #6
 8004130:	4825      	ldr	r0, [pc, #148]	; (80041c8 <_svfiprintf_r+0x1f0>)
 8004132:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004136:	f000 f9e7 	bl	8004508 <memchr>
 800413a:	2800      	cmp	r0, #0
 800413c:	d038      	beq.n	80041b0 <_svfiprintf_r+0x1d8>
 800413e:	4b23      	ldr	r3, [pc, #140]	; (80041cc <_svfiprintf_r+0x1f4>)
 8004140:	bb1b      	cbnz	r3, 800418a <_svfiprintf_r+0x1b2>
 8004142:	9b03      	ldr	r3, [sp, #12]
 8004144:	3307      	adds	r3, #7
 8004146:	f023 0307 	bic.w	r3, r3, #7
 800414a:	3308      	adds	r3, #8
 800414c:	9303      	str	r3, [sp, #12]
 800414e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004150:	4433      	add	r3, r6
 8004152:	9309      	str	r3, [sp, #36]	; 0x24
 8004154:	e767      	b.n	8004026 <_svfiprintf_r+0x4e>
 8004156:	460c      	mov	r4, r1
 8004158:	2001      	movs	r0, #1
 800415a:	fb0c 3202 	mla	r2, ip, r2, r3
 800415e:	e7a5      	b.n	80040ac <_svfiprintf_r+0xd4>
 8004160:	2300      	movs	r3, #0
 8004162:	f04f 0c0a 	mov.w	ip, #10
 8004166:	4619      	mov	r1, r3
 8004168:	3401      	adds	r4, #1
 800416a:	9305      	str	r3, [sp, #20]
 800416c:	4620      	mov	r0, r4
 800416e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004172:	3a30      	subs	r2, #48	; 0x30
 8004174:	2a09      	cmp	r2, #9
 8004176:	d903      	bls.n	8004180 <_svfiprintf_r+0x1a8>
 8004178:	2b00      	cmp	r3, #0
 800417a:	d0c5      	beq.n	8004108 <_svfiprintf_r+0x130>
 800417c:	9105      	str	r1, [sp, #20]
 800417e:	e7c3      	b.n	8004108 <_svfiprintf_r+0x130>
 8004180:	4604      	mov	r4, r0
 8004182:	2301      	movs	r3, #1
 8004184:	fb0c 2101 	mla	r1, ip, r1, r2
 8004188:	e7f0      	b.n	800416c <_svfiprintf_r+0x194>
 800418a:	ab03      	add	r3, sp, #12
 800418c:	9300      	str	r3, [sp, #0]
 800418e:	462a      	mov	r2, r5
 8004190:	4638      	mov	r0, r7
 8004192:	4b0f      	ldr	r3, [pc, #60]	; (80041d0 <_svfiprintf_r+0x1f8>)
 8004194:	a904      	add	r1, sp, #16
 8004196:	f3af 8000 	nop.w
 800419a:	1c42      	adds	r2, r0, #1
 800419c:	4606      	mov	r6, r0
 800419e:	d1d6      	bne.n	800414e <_svfiprintf_r+0x176>
 80041a0:	89ab      	ldrh	r3, [r5, #12]
 80041a2:	065b      	lsls	r3, r3, #25
 80041a4:	f53f af2c 	bmi.w	8004000 <_svfiprintf_r+0x28>
 80041a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041aa:	b01d      	add	sp, #116	; 0x74
 80041ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041b0:	ab03      	add	r3, sp, #12
 80041b2:	9300      	str	r3, [sp, #0]
 80041b4:	462a      	mov	r2, r5
 80041b6:	4638      	mov	r0, r7
 80041b8:	4b05      	ldr	r3, [pc, #20]	; (80041d0 <_svfiprintf_r+0x1f8>)
 80041ba:	a904      	add	r1, sp, #16
 80041bc:	f000 f87c 	bl	80042b8 <_printf_i>
 80041c0:	e7eb      	b.n	800419a <_svfiprintf_r+0x1c2>
 80041c2:	bf00      	nop
 80041c4:	0800463e 	.word	0x0800463e
 80041c8:	08004648 	.word	0x08004648
 80041cc:	00000000 	.word	0x00000000
 80041d0:	08003f21 	.word	0x08003f21
 80041d4:	08004644 	.word	0x08004644

080041d8 <_printf_common>:
 80041d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041dc:	4616      	mov	r6, r2
 80041de:	4699      	mov	r9, r3
 80041e0:	688a      	ldr	r2, [r1, #8]
 80041e2:	690b      	ldr	r3, [r1, #16]
 80041e4:	4607      	mov	r7, r0
 80041e6:	4293      	cmp	r3, r2
 80041e8:	bfb8      	it	lt
 80041ea:	4613      	movlt	r3, r2
 80041ec:	6033      	str	r3, [r6, #0]
 80041ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80041f2:	460c      	mov	r4, r1
 80041f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80041f8:	b10a      	cbz	r2, 80041fe <_printf_common+0x26>
 80041fa:	3301      	adds	r3, #1
 80041fc:	6033      	str	r3, [r6, #0]
 80041fe:	6823      	ldr	r3, [r4, #0]
 8004200:	0699      	lsls	r1, r3, #26
 8004202:	bf42      	ittt	mi
 8004204:	6833      	ldrmi	r3, [r6, #0]
 8004206:	3302      	addmi	r3, #2
 8004208:	6033      	strmi	r3, [r6, #0]
 800420a:	6825      	ldr	r5, [r4, #0]
 800420c:	f015 0506 	ands.w	r5, r5, #6
 8004210:	d106      	bne.n	8004220 <_printf_common+0x48>
 8004212:	f104 0a19 	add.w	sl, r4, #25
 8004216:	68e3      	ldr	r3, [r4, #12]
 8004218:	6832      	ldr	r2, [r6, #0]
 800421a:	1a9b      	subs	r3, r3, r2
 800421c:	42ab      	cmp	r3, r5
 800421e:	dc28      	bgt.n	8004272 <_printf_common+0x9a>
 8004220:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004224:	1e13      	subs	r3, r2, #0
 8004226:	6822      	ldr	r2, [r4, #0]
 8004228:	bf18      	it	ne
 800422a:	2301      	movne	r3, #1
 800422c:	0692      	lsls	r2, r2, #26
 800422e:	d42d      	bmi.n	800428c <_printf_common+0xb4>
 8004230:	4649      	mov	r1, r9
 8004232:	4638      	mov	r0, r7
 8004234:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004238:	47c0      	blx	r8
 800423a:	3001      	adds	r0, #1
 800423c:	d020      	beq.n	8004280 <_printf_common+0xa8>
 800423e:	6823      	ldr	r3, [r4, #0]
 8004240:	68e5      	ldr	r5, [r4, #12]
 8004242:	f003 0306 	and.w	r3, r3, #6
 8004246:	2b04      	cmp	r3, #4
 8004248:	bf18      	it	ne
 800424a:	2500      	movne	r5, #0
 800424c:	6832      	ldr	r2, [r6, #0]
 800424e:	f04f 0600 	mov.w	r6, #0
 8004252:	68a3      	ldr	r3, [r4, #8]
 8004254:	bf08      	it	eq
 8004256:	1aad      	subeq	r5, r5, r2
 8004258:	6922      	ldr	r2, [r4, #16]
 800425a:	bf08      	it	eq
 800425c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004260:	4293      	cmp	r3, r2
 8004262:	bfc4      	itt	gt
 8004264:	1a9b      	subgt	r3, r3, r2
 8004266:	18ed      	addgt	r5, r5, r3
 8004268:	341a      	adds	r4, #26
 800426a:	42b5      	cmp	r5, r6
 800426c:	d11a      	bne.n	80042a4 <_printf_common+0xcc>
 800426e:	2000      	movs	r0, #0
 8004270:	e008      	b.n	8004284 <_printf_common+0xac>
 8004272:	2301      	movs	r3, #1
 8004274:	4652      	mov	r2, sl
 8004276:	4649      	mov	r1, r9
 8004278:	4638      	mov	r0, r7
 800427a:	47c0      	blx	r8
 800427c:	3001      	adds	r0, #1
 800427e:	d103      	bne.n	8004288 <_printf_common+0xb0>
 8004280:	f04f 30ff 	mov.w	r0, #4294967295
 8004284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004288:	3501      	adds	r5, #1
 800428a:	e7c4      	b.n	8004216 <_printf_common+0x3e>
 800428c:	2030      	movs	r0, #48	; 0x30
 800428e:	18e1      	adds	r1, r4, r3
 8004290:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004294:	1c5a      	adds	r2, r3, #1
 8004296:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800429a:	4422      	add	r2, r4
 800429c:	3302      	adds	r3, #2
 800429e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80042a2:	e7c5      	b.n	8004230 <_printf_common+0x58>
 80042a4:	2301      	movs	r3, #1
 80042a6:	4622      	mov	r2, r4
 80042a8:	4649      	mov	r1, r9
 80042aa:	4638      	mov	r0, r7
 80042ac:	47c0      	blx	r8
 80042ae:	3001      	adds	r0, #1
 80042b0:	d0e6      	beq.n	8004280 <_printf_common+0xa8>
 80042b2:	3601      	adds	r6, #1
 80042b4:	e7d9      	b.n	800426a <_printf_common+0x92>
	...

080042b8 <_printf_i>:
 80042b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042bc:	460c      	mov	r4, r1
 80042be:	7e27      	ldrb	r7, [r4, #24]
 80042c0:	4691      	mov	r9, r2
 80042c2:	2f78      	cmp	r7, #120	; 0x78
 80042c4:	4680      	mov	r8, r0
 80042c6:	469a      	mov	sl, r3
 80042c8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80042ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042ce:	d807      	bhi.n	80042e0 <_printf_i+0x28>
 80042d0:	2f62      	cmp	r7, #98	; 0x62
 80042d2:	d80a      	bhi.n	80042ea <_printf_i+0x32>
 80042d4:	2f00      	cmp	r7, #0
 80042d6:	f000 80d9 	beq.w	800448c <_printf_i+0x1d4>
 80042da:	2f58      	cmp	r7, #88	; 0x58
 80042dc:	f000 80a4 	beq.w	8004428 <_printf_i+0x170>
 80042e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80042e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80042e8:	e03a      	b.n	8004360 <_printf_i+0xa8>
 80042ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80042ee:	2b15      	cmp	r3, #21
 80042f0:	d8f6      	bhi.n	80042e0 <_printf_i+0x28>
 80042f2:	a001      	add	r0, pc, #4	; (adr r0, 80042f8 <_printf_i+0x40>)
 80042f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80042f8:	08004351 	.word	0x08004351
 80042fc:	08004365 	.word	0x08004365
 8004300:	080042e1 	.word	0x080042e1
 8004304:	080042e1 	.word	0x080042e1
 8004308:	080042e1 	.word	0x080042e1
 800430c:	080042e1 	.word	0x080042e1
 8004310:	08004365 	.word	0x08004365
 8004314:	080042e1 	.word	0x080042e1
 8004318:	080042e1 	.word	0x080042e1
 800431c:	080042e1 	.word	0x080042e1
 8004320:	080042e1 	.word	0x080042e1
 8004324:	08004473 	.word	0x08004473
 8004328:	08004395 	.word	0x08004395
 800432c:	08004455 	.word	0x08004455
 8004330:	080042e1 	.word	0x080042e1
 8004334:	080042e1 	.word	0x080042e1
 8004338:	08004495 	.word	0x08004495
 800433c:	080042e1 	.word	0x080042e1
 8004340:	08004395 	.word	0x08004395
 8004344:	080042e1 	.word	0x080042e1
 8004348:	080042e1 	.word	0x080042e1
 800434c:	0800445d 	.word	0x0800445d
 8004350:	680b      	ldr	r3, [r1, #0]
 8004352:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004356:	1d1a      	adds	r2, r3, #4
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	600a      	str	r2, [r1, #0]
 800435c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004360:	2301      	movs	r3, #1
 8004362:	e0a4      	b.n	80044ae <_printf_i+0x1f6>
 8004364:	6825      	ldr	r5, [r4, #0]
 8004366:	6808      	ldr	r0, [r1, #0]
 8004368:	062e      	lsls	r6, r5, #24
 800436a:	f100 0304 	add.w	r3, r0, #4
 800436e:	d50a      	bpl.n	8004386 <_printf_i+0xce>
 8004370:	6805      	ldr	r5, [r0, #0]
 8004372:	600b      	str	r3, [r1, #0]
 8004374:	2d00      	cmp	r5, #0
 8004376:	da03      	bge.n	8004380 <_printf_i+0xc8>
 8004378:	232d      	movs	r3, #45	; 0x2d
 800437a:	426d      	negs	r5, r5
 800437c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004380:	230a      	movs	r3, #10
 8004382:	485e      	ldr	r0, [pc, #376]	; (80044fc <_printf_i+0x244>)
 8004384:	e019      	b.n	80043ba <_printf_i+0x102>
 8004386:	f015 0f40 	tst.w	r5, #64	; 0x40
 800438a:	6805      	ldr	r5, [r0, #0]
 800438c:	600b      	str	r3, [r1, #0]
 800438e:	bf18      	it	ne
 8004390:	b22d      	sxthne	r5, r5
 8004392:	e7ef      	b.n	8004374 <_printf_i+0xbc>
 8004394:	680b      	ldr	r3, [r1, #0]
 8004396:	6825      	ldr	r5, [r4, #0]
 8004398:	1d18      	adds	r0, r3, #4
 800439a:	6008      	str	r0, [r1, #0]
 800439c:	0628      	lsls	r0, r5, #24
 800439e:	d501      	bpl.n	80043a4 <_printf_i+0xec>
 80043a0:	681d      	ldr	r5, [r3, #0]
 80043a2:	e002      	b.n	80043aa <_printf_i+0xf2>
 80043a4:	0669      	lsls	r1, r5, #25
 80043a6:	d5fb      	bpl.n	80043a0 <_printf_i+0xe8>
 80043a8:	881d      	ldrh	r5, [r3, #0]
 80043aa:	2f6f      	cmp	r7, #111	; 0x6f
 80043ac:	bf0c      	ite	eq
 80043ae:	2308      	moveq	r3, #8
 80043b0:	230a      	movne	r3, #10
 80043b2:	4852      	ldr	r0, [pc, #328]	; (80044fc <_printf_i+0x244>)
 80043b4:	2100      	movs	r1, #0
 80043b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80043ba:	6866      	ldr	r6, [r4, #4]
 80043bc:	2e00      	cmp	r6, #0
 80043be:	bfa8      	it	ge
 80043c0:	6821      	ldrge	r1, [r4, #0]
 80043c2:	60a6      	str	r6, [r4, #8]
 80043c4:	bfa4      	itt	ge
 80043c6:	f021 0104 	bicge.w	r1, r1, #4
 80043ca:	6021      	strge	r1, [r4, #0]
 80043cc:	b90d      	cbnz	r5, 80043d2 <_printf_i+0x11a>
 80043ce:	2e00      	cmp	r6, #0
 80043d0:	d04d      	beq.n	800446e <_printf_i+0x1b6>
 80043d2:	4616      	mov	r6, r2
 80043d4:	fbb5 f1f3 	udiv	r1, r5, r3
 80043d8:	fb03 5711 	mls	r7, r3, r1, r5
 80043dc:	5dc7      	ldrb	r7, [r0, r7]
 80043de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80043e2:	462f      	mov	r7, r5
 80043e4:	42bb      	cmp	r3, r7
 80043e6:	460d      	mov	r5, r1
 80043e8:	d9f4      	bls.n	80043d4 <_printf_i+0x11c>
 80043ea:	2b08      	cmp	r3, #8
 80043ec:	d10b      	bne.n	8004406 <_printf_i+0x14e>
 80043ee:	6823      	ldr	r3, [r4, #0]
 80043f0:	07df      	lsls	r7, r3, #31
 80043f2:	d508      	bpl.n	8004406 <_printf_i+0x14e>
 80043f4:	6923      	ldr	r3, [r4, #16]
 80043f6:	6861      	ldr	r1, [r4, #4]
 80043f8:	4299      	cmp	r1, r3
 80043fa:	bfde      	ittt	le
 80043fc:	2330      	movle	r3, #48	; 0x30
 80043fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004402:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004406:	1b92      	subs	r2, r2, r6
 8004408:	6122      	str	r2, [r4, #16]
 800440a:	464b      	mov	r3, r9
 800440c:	4621      	mov	r1, r4
 800440e:	4640      	mov	r0, r8
 8004410:	f8cd a000 	str.w	sl, [sp]
 8004414:	aa03      	add	r2, sp, #12
 8004416:	f7ff fedf 	bl	80041d8 <_printf_common>
 800441a:	3001      	adds	r0, #1
 800441c:	d14c      	bne.n	80044b8 <_printf_i+0x200>
 800441e:	f04f 30ff 	mov.w	r0, #4294967295
 8004422:	b004      	add	sp, #16
 8004424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004428:	4834      	ldr	r0, [pc, #208]	; (80044fc <_printf_i+0x244>)
 800442a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800442e:	680e      	ldr	r6, [r1, #0]
 8004430:	6823      	ldr	r3, [r4, #0]
 8004432:	f856 5b04 	ldr.w	r5, [r6], #4
 8004436:	061f      	lsls	r7, r3, #24
 8004438:	600e      	str	r6, [r1, #0]
 800443a:	d514      	bpl.n	8004466 <_printf_i+0x1ae>
 800443c:	07d9      	lsls	r1, r3, #31
 800443e:	bf44      	itt	mi
 8004440:	f043 0320 	orrmi.w	r3, r3, #32
 8004444:	6023      	strmi	r3, [r4, #0]
 8004446:	b91d      	cbnz	r5, 8004450 <_printf_i+0x198>
 8004448:	6823      	ldr	r3, [r4, #0]
 800444a:	f023 0320 	bic.w	r3, r3, #32
 800444e:	6023      	str	r3, [r4, #0]
 8004450:	2310      	movs	r3, #16
 8004452:	e7af      	b.n	80043b4 <_printf_i+0xfc>
 8004454:	6823      	ldr	r3, [r4, #0]
 8004456:	f043 0320 	orr.w	r3, r3, #32
 800445a:	6023      	str	r3, [r4, #0]
 800445c:	2378      	movs	r3, #120	; 0x78
 800445e:	4828      	ldr	r0, [pc, #160]	; (8004500 <_printf_i+0x248>)
 8004460:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004464:	e7e3      	b.n	800442e <_printf_i+0x176>
 8004466:	065e      	lsls	r6, r3, #25
 8004468:	bf48      	it	mi
 800446a:	b2ad      	uxthmi	r5, r5
 800446c:	e7e6      	b.n	800443c <_printf_i+0x184>
 800446e:	4616      	mov	r6, r2
 8004470:	e7bb      	b.n	80043ea <_printf_i+0x132>
 8004472:	680b      	ldr	r3, [r1, #0]
 8004474:	6826      	ldr	r6, [r4, #0]
 8004476:	1d1d      	adds	r5, r3, #4
 8004478:	6960      	ldr	r0, [r4, #20]
 800447a:	600d      	str	r5, [r1, #0]
 800447c:	0635      	lsls	r5, r6, #24
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	d501      	bpl.n	8004486 <_printf_i+0x1ce>
 8004482:	6018      	str	r0, [r3, #0]
 8004484:	e002      	b.n	800448c <_printf_i+0x1d4>
 8004486:	0671      	lsls	r1, r6, #25
 8004488:	d5fb      	bpl.n	8004482 <_printf_i+0x1ca>
 800448a:	8018      	strh	r0, [r3, #0]
 800448c:	2300      	movs	r3, #0
 800448e:	4616      	mov	r6, r2
 8004490:	6123      	str	r3, [r4, #16]
 8004492:	e7ba      	b.n	800440a <_printf_i+0x152>
 8004494:	680b      	ldr	r3, [r1, #0]
 8004496:	1d1a      	adds	r2, r3, #4
 8004498:	600a      	str	r2, [r1, #0]
 800449a:	681e      	ldr	r6, [r3, #0]
 800449c:	2100      	movs	r1, #0
 800449e:	4630      	mov	r0, r6
 80044a0:	6862      	ldr	r2, [r4, #4]
 80044a2:	f000 f831 	bl	8004508 <memchr>
 80044a6:	b108      	cbz	r0, 80044ac <_printf_i+0x1f4>
 80044a8:	1b80      	subs	r0, r0, r6
 80044aa:	6060      	str	r0, [r4, #4]
 80044ac:	6863      	ldr	r3, [r4, #4]
 80044ae:	6123      	str	r3, [r4, #16]
 80044b0:	2300      	movs	r3, #0
 80044b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044b6:	e7a8      	b.n	800440a <_printf_i+0x152>
 80044b8:	4632      	mov	r2, r6
 80044ba:	4649      	mov	r1, r9
 80044bc:	4640      	mov	r0, r8
 80044be:	6923      	ldr	r3, [r4, #16]
 80044c0:	47d0      	blx	sl
 80044c2:	3001      	adds	r0, #1
 80044c4:	d0ab      	beq.n	800441e <_printf_i+0x166>
 80044c6:	6823      	ldr	r3, [r4, #0]
 80044c8:	079b      	lsls	r3, r3, #30
 80044ca:	d413      	bmi.n	80044f4 <_printf_i+0x23c>
 80044cc:	68e0      	ldr	r0, [r4, #12]
 80044ce:	9b03      	ldr	r3, [sp, #12]
 80044d0:	4298      	cmp	r0, r3
 80044d2:	bfb8      	it	lt
 80044d4:	4618      	movlt	r0, r3
 80044d6:	e7a4      	b.n	8004422 <_printf_i+0x16a>
 80044d8:	2301      	movs	r3, #1
 80044da:	4632      	mov	r2, r6
 80044dc:	4649      	mov	r1, r9
 80044de:	4640      	mov	r0, r8
 80044e0:	47d0      	blx	sl
 80044e2:	3001      	adds	r0, #1
 80044e4:	d09b      	beq.n	800441e <_printf_i+0x166>
 80044e6:	3501      	adds	r5, #1
 80044e8:	68e3      	ldr	r3, [r4, #12]
 80044ea:	9903      	ldr	r1, [sp, #12]
 80044ec:	1a5b      	subs	r3, r3, r1
 80044ee:	42ab      	cmp	r3, r5
 80044f0:	dcf2      	bgt.n	80044d8 <_printf_i+0x220>
 80044f2:	e7eb      	b.n	80044cc <_printf_i+0x214>
 80044f4:	2500      	movs	r5, #0
 80044f6:	f104 0619 	add.w	r6, r4, #25
 80044fa:	e7f5      	b.n	80044e8 <_printf_i+0x230>
 80044fc:	0800464f 	.word	0x0800464f
 8004500:	08004660 	.word	0x08004660

08004504 <__retarget_lock_acquire_recursive>:
 8004504:	4770      	bx	lr

08004506 <__retarget_lock_release_recursive>:
 8004506:	4770      	bx	lr

08004508 <memchr>:
 8004508:	4603      	mov	r3, r0
 800450a:	b510      	push	{r4, lr}
 800450c:	b2c9      	uxtb	r1, r1
 800450e:	4402      	add	r2, r0
 8004510:	4293      	cmp	r3, r2
 8004512:	4618      	mov	r0, r3
 8004514:	d101      	bne.n	800451a <memchr+0x12>
 8004516:	2000      	movs	r0, #0
 8004518:	e003      	b.n	8004522 <memchr+0x1a>
 800451a:	7804      	ldrb	r4, [r0, #0]
 800451c:	3301      	adds	r3, #1
 800451e:	428c      	cmp	r4, r1
 8004520:	d1f6      	bne.n	8004510 <memchr+0x8>
 8004522:	bd10      	pop	{r4, pc}

08004524 <memcpy>:
 8004524:	440a      	add	r2, r1
 8004526:	4291      	cmp	r1, r2
 8004528:	f100 33ff 	add.w	r3, r0, #4294967295
 800452c:	d100      	bne.n	8004530 <memcpy+0xc>
 800452e:	4770      	bx	lr
 8004530:	b510      	push	{r4, lr}
 8004532:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004536:	4291      	cmp	r1, r2
 8004538:	f803 4f01 	strb.w	r4, [r3, #1]!
 800453c:	d1f9      	bne.n	8004532 <memcpy+0xe>
 800453e:	bd10      	pop	{r4, pc}

08004540 <memmove>:
 8004540:	4288      	cmp	r0, r1
 8004542:	b510      	push	{r4, lr}
 8004544:	eb01 0402 	add.w	r4, r1, r2
 8004548:	d902      	bls.n	8004550 <memmove+0x10>
 800454a:	4284      	cmp	r4, r0
 800454c:	4623      	mov	r3, r4
 800454e:	d807      	bhi.n	8004560 <memmove+0x20>
 8004550:	1e43      	subs	r3, r0, #1
 8004552:	42a1      	cmp	r1, r4
 8004554:	d008      	beq.n	8004568 <memmove+0x28>
 8004556:	f811 2b01 	ldrb.w	r2, [r1], #1
 800455a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800455e:	e7f8      	b.n	8004552 <memmove+0x12>
 8004560:	4601      	mov	r1, r0
 8004562:	4402      	add	r2, r0
 8004564:	428a      	cmp	r2, r1
 8004566:	d100      	bne.n	800456a <memmove+0x2a>
 8004568:	bd10      	pop	{r4, pc}
 800456a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800456e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004572:	e7f7      	b.n	8004564 <memmove+0x24>

08004574 <_realloc_r>:
 8004574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004576:	4607      	mov	r7, r0
 8004578:	4614      	mov	r4, r2
 800457a:	460e      	mov	r6, r1
 800457c:	b921      	cbnz	r1, 8004588 <_realloc_r+0x14>
 800457e:	4611      	mov	r1, r2
 8004580:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004584:	f7ff bc36 	b.w	8003df4 <_malloc_r>
 8004588:	b922      	cbnz	r2, 8004594 <_realloc_r+0x20>
 800458a:	f7ff fbe7 	bl	8003d5c <_free_r>
 800458e:	4625      	mov	r5, r4
 8004590:	4628      	mov	r0, r5
 8004592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004594:	f000 f814 	bl	80045c0 <_malloc_usable_size_r>
 8004598:	42a0      	cmp	r0, r4
 800459a:	d20f      	bcs.n	80045bc <_realloc_r+0x48>
 800459c:	4621      	mov	r1, r4
 800459e:	4638      	mov	r0, r7
 80045a0:	f7ff fc28 	bl	8003df4 <_malloc_r>
 80045a4:	4605      	mov	r5, r0
 80045a6:	2800      	cmp	r0, #0
 80045a8:	d0f2      	beq.n	8004590 <_realloc_r+0x1c>
 80045aa:	4631      	mov	r1, r6
 80045ac:	4622      	mov	r2, r4
 80045ae:	f7ff ffb9 	bl	8004524 <memcpy>
 80045b2:	4631      	mov	r1, r6
 80045b4:	4638      	mov	r0, r7
 80045b6:	f7ff fbd1 	bl	8003d5c <_free_r>
 80045ba:	e7e9      	b.n	8004590 <_realloc_r+0x1c>
 80045bc:	4635      	mov	r5, r6
 80045be:	e7e7      	b.n	8004590 <_realloc_r+0x1c>

080045c0 <_malloc_usable_size_r>:
 80045c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045c4:	1f18      	subs	r0, r3, #4
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	bfbc      	itt	lt
 80045ca:	580b      	ldrlt	r3, [r1, r0]
 80045cc:	18c0      	addlt	r0, r0, r3
 80045ce:	4770      	bx	lr

080045d0 <_init>:
 80045d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045d2:	bf00      	nop
 80045d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045d6:	bc08      	pop	{r3}
 80045d8:	469e      	mov	lr, r3
 80045da:	4770      	bx	lr

080045dc <_fini>:
 80045dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045de:	bf00      	nop
 80045e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045e2:	bc08      	pop	{r3}
 80045e4:	469e      	mov	lr, r3
 80045e6:	4770      	bx	lr

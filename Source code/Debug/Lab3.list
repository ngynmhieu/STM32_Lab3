
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f3c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003048  08003048  00013048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800306c  0800306c  00020050  2**0
                  CONTENTS
  4 .ARM          00000000  0800306c  0800306c  00020050  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800306c  0800306c  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800306c  0800306c  0001306c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003070  08003070  00013070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  08003074  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000050  080030c4  00020050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  080030c4  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000954e  00000000  00000000  00020079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ab8  00000000  00000000  000295c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  0002b080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000998  00000000  00000000  0002bb00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b5a  00000000  00000000  0002c498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b5cf  00000000  00000000  00042ff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000825b1  00000000  00000000  0004e5c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0b72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a10  00000000  00000000  000d0bc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000050 	.word	0x20000050
 8000128:	00000000 	.word	0x00000000
 800012c:	08003030 	.word	0x08003030

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000054 	.word	0x20000054
 8000148:	08003030 	.word	0x08003030

0800014c <isButton1Pressed>:
int button1_flag = 0;
int button2_flag = 0;
int button3_flag = 0;
int TimeOutForKeyPress =  200;

int isButton1Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if (button1_flag == 1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		button1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	2000006c 	.word	0x2000006c

08000170 <isButton2Pressed>:
int isButton2Pressed(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if (button2_flag == 1){
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton2Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton2Pressed+0x16>
		button2_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton2Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton2Pressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	20000070 	.word	0x20000070

08000194 <isButton3Pressed>:
int isButton3Pressed(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if (button3_flag == 1){
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton3Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton3Pressed+0x16>
		button3_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton3Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton3Pressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	20000074 	.word	0x20000074

080001b8 <subKeyProcess>:

void subKeyProcess(int i){
 80001b8:	b480      	push	{r7}
 80001ba:	b083      	sub	sp, #12
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]
	if (i == 1) button1_flag = 1;
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	2b01      	cmp	r3, #1
 80001c4:	d102      	bne.n	80001cc <subKeyProcess+0x14>
 80001c6:	4b0a      	ldr	r3, [pc, #40]	; (80001f0 <subKeyProcess+0x38>)
 80001c8:	2201      	movs	r2, #1
 80001ca:	601a      	str	r2, [r3, #0]
	if (i == 2) button2_flag = 1;
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	2b02      	cmp	r3, #2
 80001d0:	d102      	bne.n	80001d8 <subKeyProcess+0x20>
 80001d2:	4b08      	ldr	r3, [pc, #32]	; (80001f4 <subKeyProcess+0x3c>)
 80001d4:	2201      	movs	r2, #1
 80001d6:	601a      	str	r2, [r3, #0]
	if (i == 3) button3_flag = 1;
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	2b03      	cmp	r3, #3
 80001dc:	d102      	bne.n	80001e4 <subKeyProcess+0x2c>
 80001de:	4b06      	ldr	r3, [pc, #24]	; (80001f8 <subKeyProcess+0x40>)
 80001e0:	2201      	movs	r2, #1
 80001e2:	601a      	str	r2, [r3, #0]
}
 80001e4:	bf00      	nop
 80001e6:	370c      	adds	r7, #12
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bc80      	pop	{r7}
 80001ec:	4770      	bx	lr
 80001ee:	bf00      	nop
 80001f0:	2000006c 	.word	0x2000006c
 80001f4:	20000070 	.word	0x20000070
 80001f8:	20000074 	.word	0x20000074

080001fc <getKeyinput>:
void getKeyinput(){
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
	KeyReg0_1 = KeyReg1_1;
 8000200:	4b5d      	ldr	r3, [pc, #372]	; (8000378 <getKeyinput+0x17c>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a5d      	ldr	r2, [pc, #372]	; (800037c <getKeyinput+0x180>)
 8000206:	6013      	str	r3, [r2, #0]
	KeyReg1_1 = KeyReg2_1;
 8000208:	4b5d      	ldr	r3, [pc, #372]	; (8000380 <getKeyinput+0x184>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a5a      	ldr	r2, [pc, #360]	; (8000378 <getKeyinput+0x17c>)
 800020e:	6013      	str	r3, [r2, #0]
	KeyReg2_1 = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 8000210:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000214:	485b      	ldr	r0, [pc, #364]	; (8000384 <getKeyinput+0x188>)
 8000216:	f001 fed3 	bl	8001fc0 <HAL_GPIO_ReadPin>
 800021a:	4603      	mov	r3, r0
 800021c:	461a      	mov	r2, r3
 800021e:	4b58      	ldr	r3, [pc, #352]	; (8000380 <getKeyinput+0x184>)
 8000220:	601a      	str	r2, [r3, #0]

	KeyReg0_2 = KeyReg1_2;
 8000222:	4b59      	ldr	r3, [pc, #356]	; (8000388 <getKeyinput+0x18c>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	4a59      	ldr	r2, [pc, #356]	; (800038c <getKeyinput+0x190>)
 8000228:	6013      	str	r3, [r2, #0]
	KeyReg1_2 = KeyReg2_2;
 800022a:	4b59      	ldr	r3, [pc, #356]	; (8000390 <getKeyinput+0x194>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	4a56      	ldr	r2, [pc, #344]	; (8000388 <getKeyinput+0x18c>)
 8000230:	6013      	str	r3, [r2, #0]
	KeyReg2_2 = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 8000232:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000236:	4853      	ldr	r0, [pc, #332]	; (8000384 <getKeyinput+0x188>)
 8000238:	f001 fec2 	bl	8001fc0 <HAL_GPIO_ReadPin>
 800023c:	4603      	mov	r3, r0
 800023e:	461a      	mov	r2, r3
 8000240:	4b53      	ldr	r3, [pc, #332]	; (8000390 <getKeyinput+0x194>)
 8000242:	601a      	str	r2, [r3, #0]

	KeyReg0_3 = KeyReg1_3;
 8000244:	4b53      	ldr	r3, [pc, #332]	; (8000394 <getKeyinput+0x198>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a53      	ldr	r2, [pc, #332]	; (8000398 <getKeyinput+0x19c>)
 800024a:	6013      	str	r3, [r2, #0]
	KeyReg1_3 = KeyReg2_3;
 800024c:	4b53      	ldr	r3, [pc, #332]	; (800039c <getKeyinput+0x1a0>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a50      	ldr	r2, [pc, #320]	; (8000394 <getKeyinput+0x198>)
 8000252:	6013      	str	r3, [r2, #0]
	KeyReg2_3 = HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 8000254:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000258:	484a      	ldr	r0, [pc, #296]	; (8000384 <getKeyinput+0x188>)
 800025a:	f001 feb1 	bl	8001fc0 <HAL_GPIO_ReadPin>
 800025e:	4603      	mov	r3, r0
 8000260:	461a      	mov	r2, r3
 8000262:	4b4e      	ldr	r3, [pc, #312]	; (800039c <getKeyinput+0x1a0>)
 8000264:	601a      	str	r2, [r3, #0]

	if ((KeyReg0_1 == KeyReg1_1) && (KeyReg1_1 == KeyReg2_1)){
 8000266:	4b45      	ldr	r3, [pc, #276]	; (800037c <getKeyinput+0x180>)
 8000268:	681a      	ldr	r2, [r3, #0]
 800026a:	4b43      	ldr	r3, [pc, #268]	; (8000378 <getKeyinput+0x17c>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	429a      	cmp	r2, r3
 8000270:	d126      	bne.n	80002c0 <getKeyinput+0xc4>
 8000272:	4b41      	ldr	r3, [pc, #260]	; (8000378 <getKeyinput+0x17c>)
 8000274:	681a      	ldr	r2, [r3, #0]
 8000276:	4b42      	ldr	r3, [pc, #264]	; (8000380 <getKeyinput+0x184>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	429a      	cmp	r2, r3
 800027c:	d120      	bne.n	80002c0 <getKeyinput+0xc4>
		if (KeyReg3_1 != KeyReg2_1){
 800027e:	4b48      	ldr	r3, [pc, #288]	; (80003a0 <getKeyinput+0x1a4>)
 8000280:	681a      	ldr	r2, [r3, #0]
 8000282:	4b3f      	ldr	r3, [pc, #252]	; (8000380 <getKeyinput+0x184>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	429a      	cmp	r2, r3
 8000288:	d00e      	beq.n	80002a8 <getKeyinput+0xac>
			KeyReg3_1 = KeyReg2_1;
 800028a:	4b3d      	ldr	r3, [pc, #244]	; (8000380 <getKeyinput+0x184>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	4a44      	ldr	r2, [pc, #272]	; (80003a0 <getKeyinput+0x1a4>)
 8000290:	6013      	str	r3, [r2, #0]

			if (KeyReg3_1 == PRESSED_STATE){
 8000292:	4b43      	ldr	r3, [pc, #268]	; (80003a0 <getKeyinput+0x1a4>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d112      	bne.n	80002c0 <getKeyinput+0xc4>
				TimeOutForKeyPress= 200;
 800029a:	4b42      	ldr	r3, [pc, #264]	; (80003a4 <getKeyinput+0x1a8>)
 800029c:	22c8      	movs	r2, #200	; 0xc8
 800029e:	601a      	str	r2, [r3, #0]
				subKeyProcess(1);
 80002a0:	2001      	movs	r0, #1
 80002a2:	f7ff ff89 	bl	80001b8 <subKeyProcess>
 80002a6:	e00b      	b.n	80002c0 <getKeyinput+0xc4>
			}
		}
		else{
			TimeOutForKeyPress --;
 80002a8:	4b3e      	ldr	r3, [pc, #248]	; (80003a4 <getKeyinput+0x1a8>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	3b01      	subs	r3, #1
 80002ae:	4a3d      	ldr	r2, [pc, #244]	; (80003a4 <getKeyinput+0x1a8>)
 80002b0:	6013      	str	r3, [r2, #0]
			if (TimeOutForKeyPress ==0 ){
 80002b2:	4b3c      	ldr	r3, [pc, #240]	; (80003a4 <getKeyinput+0x1a8>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d102      	bne.n	80002c0 <getKeyinput+0xc4>
				KeyReg3_1 = NORMAL_STATE;
 80002ba:	4b39      	ldr	r3, [pc, #228]	; (80003a0 <getKeyinput+0x1a4>)
 80002bc:	2201      	movs	r2, #1
 80002be:	601a      	str	r2, [r3, #0]
			}
		}
	}
	if ((KeyReg0_2 == KeyReg1_2) && (KeyReg1_2 == KeyReg2_2)){
 80002c0:	4b32      	ldr	r3, [pc, #200]	; (800038c <getKeyinput+0x190>)
 80002c2:	681a      	ldr	r2, [r3, #0]
 80002c4:	4b30      	ldr	r3, [pc, #192]	; (8000388 <getKeyinput+0x18c>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	429a      	cmp	r2, r3
 80002ca:	d126      	bne.n	800031a <getKeyinput+0x11e>
 80002cc:	4b2e      	ldr	r3, [pc, #184]	; (8000388 <getKeyinput+0x18c>)
 80002ce:	681a      	ldr	r2, [r3, #0]
 80002d0:	4b2f      	ldr	r3, [pc, #188]	; (8000390 <getKeyinput+0x194>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	429a      	cmp	r2, r3
 80002d6:	d120      	bne.n	800031a <getKeyinput+0x11e>
		if (KeyReg3_2 != KeyReg2_2){
 80002d8:	4b33      	ldr	r3, [pc, #204]	; (80003a8 <getKeyinput+0x1ac>)
 80002da:	681a      	ldr	r2, [r3, #0]
 80002dc:	4b2c      	ldr	r3, [pc, #176]	; (8000390 <getKeyinput+0x194>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	429a      	cmp	r2, r3
 80002e2:	d00e      	beq.n	8000302 <getKeyinput+0x106>
			KeyReg3_2 = KeyReg2_2;
 80002e4:	4b2a      	ldr	r3, [pc, #168]	; (8000390 <getKeyinput+0x194>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a2f      	ldr	r2, [pc, #188]	; (80003a8 <getKeyinput+0x1ac>)
 80002ea:	6013      	str	r3, [r2, #0]

			if (KeyReg3_2 == PRESSED_STATE){
 80002ec:	4b2e      	ldr	r3, [pc, #184]	; (80003a8 <getKeyinput+0x1ac>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d112      	bne.n	800031a <getKeyinput+0x11e>
				TimeOutForKeyPress= 200;
 80002f4:	4b2b      	ldr	r3, [pc, #172]	; (80003a4 <getKeyinput+0x1a8>)
 80002f6:	22c8      	movs	r2, #200	; 0xc8
 80002f8:	601a      	str	r2, [r3, #0]
				subKeyProcess(2);
 80002fa:	2002      	movs	r0, #2
 80002fc:	f7ff ff5c 	bl	80001b8 <subKeyProcess>
 8000300:	e00b      	b.n	800031a <getKeyinput+0x11e>
			}
		}
		else{
			TimeOutForKeyPress --;
 8000302:	4b28      	ldr	r3, [pc, #160]	; (80003a4 <getKeyinput+0x1a8>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	3b01      	subs	r3, #1
 8000308:	4a26      	ldr	r2, [pc, #152]	; (80003a4 <getKeyinput+0x1a8>)
 800030a:	6013      	str	r3, [r2, #0]
			if (TimeOutForKeyPress ==0 ){
 800030c:	4b25      	ldr	r3, [pc, #148]	; (80003a4 <getKeyinput+0x1a8>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d102      	bne.n	800031a <getKeyinput+0x11e>
				KeyReg3_2 = NORMAL_STATE;
 8000314:	4b24      	ldr	r3, [pc, #144]	; (80003a8 <getKeyinput+0x1ac>)
 8000316:	2201      	movs	r2, #1
 8000318:	601a      	str	r2, [r3, #0]
			}
		}
	}
	if ((KeyReg0_3 == KeyReg1_3) && (KeyReg1_3 == KeyReg2_3)){
 800031a:	4b1f      	ldr	r3, [pc, #124]	; (8000398 <getKeyinput+0x19c>)
 800031c:	681a      	ldr	r2, [r3, #0]
 800031e:	4b1d      	ldr	r3, [pc, #116]	; (8000394 <getKeyinput+0x198>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	429a      	cmp	r2, r3
 8000324:	d126      	bne.n	8000374 <getKeyinput+0x178>
 8000326:	4b1b      	ldr	r3, [pc, #108]	; (8000394 <getKeyinput+0x198>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	4b1c      	ldr	r3, [pc, #112]	; (800039c <getKeyinput+0x1a0>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	429a      	cmp	r2, r3
 8000330:	d120      	bne.n	8000374 <getKeyinput+0x178>
		if (KeyReg3_3 != KeyReg2_3){
 8000332:	4b1e      	ldr	r3, [pc, #120]	; (80003ac <getKeyinput+0x1b0>)
 8000334:	681a      	ldr	r2, [r3, #0]
 8000336:	4b19      	ldr	r3, [pc, #100]	; (800039c <getKeyinput+0x1a0>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	429a      	cmp	r2, r3
 800033c:	d00e      	beq.n	800035c <getKeyinput+0x160>
			KeyReg3_3 = KeyReg2_3;
 800033e:	4b17      	ldr	r3, [pc, #92]	; (800039c <getKeyinput+0x1a0>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	4a1a      	ldr	r2, [pc, #104]	; (80003ac <getKeyinput+0x1b0>)
 8000344:	6013      	str	r3, [r2, #0]

			if (KeyReg3_3 == PRESSED_STATE){
 8000346:	4b19      	ldr	r3, [pc, #100]	; (80003ac <getKeyinput+0x1b0>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d112      	bne.n	8000374 <getKeyinput+0x178>
				TimeOutForKeyPress= 200;
 800034e:	4b15      	ldr	r3, [pc, #84]	; (80003a4 <getKeyinput+0x1a8>)
 8000350:	22c8      	movs	r2, #200	; 0xc8
 8000352:	601a      	str	r2, [r3, #0]
				subKeyProcess(3);
 8000354:	2003      	movs	r0, #3
 8000356:	f7ff ff2f 	bl	80001b8 <subKeyProcess>
			if (TimeOutForKeyPress ==0 ){
				KeyReg3_3 = NORMAL_STATE;
			}
		}
	}
}
 800035a:	e00b      	b.n	8000374 <getKeyinput+0x178>
			TimeOutForKeyPress --;
 800035c:	4b11      	ldr	r3, [pc, #68]	; (80003a4 <getKeyinput+0x1a8>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	3b01      	subs	r3, #1
 8000362:	4a10      	ldr	r2, [pc, #64]	; (80003a4 <getKeyinput+0x1a8>)
 8000364:	6013      	str	r3, [r2, #0]
			if (TimeOutForKeyPress ==0 ){
 8000366:	4b0f      	ldr	r3, [pc, #60]	; (80003a4 <getKeyinput+0x1a8>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	2b00      	cmp	r3, #0
 800036c:	d102      	bne.n	8000374 <getKeyinput+0x178>
				KeyReg3_3 = NORMAL_STATE;
 800036e:	4b0f      	ldr	r3, [pc, #60]	; (80003ac <getKeyinput+0x1b0>)
 8000370:	2201      	movs	r2, #1
 8000372:	601a      	str	r2, [r3, #0]
}
 8000374:	bf00      	nop
 8000376:	bd80      	pop	{r7, pc}
 8000378:	20000004 	.word	0x20000004
 800037c:	20000000 	.word	0x20000000
 8000380:	20000008 	.word	0x20000008
 8000384:	40011000 	.word	0x40011000
 8000388:	20000014 	.word	0x20000014
 800038c:	20000010 	.word	0x20000010
 8000390:	20000018 	.word	0x20000018
 8000394:	20000024 	.word	0x20000024
 8000398:	20000020 	.word	0x20000020
 800039c:	20000028 	.word	0x20000028
 80003a0:	2000000c 	.word	0x2000000c
 80003a4:	20000030 	.word	0x20000030
 80003a8:	2000001c 	.word	0x2000001c
 80003ac:	2000002c 	.word	0x2000002c

080003b0 <display7SEGtopbottom>:
int tmp_yellow = 0;
int tmp_green = 0;

int enable_trigger = 0;

void display7SEGtopbottom(int num){
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
	  if (num == 0){
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d123      	bne.n	8000406 <display7SEGtopbottom+0x56>
		  HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, RESET);
 80003be:	2200      	movs	r2, #0
 80003c0:	2101      	movs	r1, #1
 80003c2:	48c2      	ldr	r0, [pc, #776]	; (80006cc <display7SEGtopbottom+0x31c>)
 80003c4:	f001 fe13 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, RESET);
 80003c8:	2200      	movs	r2, #0
 80003ca:	2102      	movs	r1, #2
 80003cc:	48bf      	ldr	r0, [pc, #764]	; (80006cc <display7SEGtopbottom+0x31c>)
 80003ce:	f001 fe0e 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, RESET);
 80003d2:	2200      	movs	r2, #0
 80003d4:	2104      	movs	r1, #4
 80003d6:	48bd      	ldr	r0, [pc, #756]	; (80006cc <display7SEGtopbottom+0x31c>)
 80003d8:	f001 fe09 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, RESET);
 80003dc:	2200      	movs	r2, #0
 80003de:	2108      	movs	r1, #8
 80003e0:	48ba      	ldr	r0, [pc, #744]	; (80006cc <display7SEGtopbottom+0x31c>)
 80003e2:	f001 fe04 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, RESET);
 80003e6:	2200      	movs	r2, #0
 80003e8:	2110      	movs	r1, #16
 80003ea:	48b8      	ldr	r0, [pc, #736]	; (80006cc <display7SEGtopbottom+0x31c>)
 80003ec:	f001 fdff 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, RESET);
 80003f0:	2200      	movs	r2, #0
 80003f2:	2120      	movs	r1, #32
 80003f4:	48b5      	ldr	r0, [pc, #724]	; (80006cc <display7SEGtopbottom+0x31c>)
 80003f6:	f001 fdfa 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, SET);
 80003fa:	2201      	movs	r2, #1
 80003fc:	2140      	movs	r1, #64	; 0x40
 80003fe:	48b3      	ldr	r0, [pc, #716]	; (80006cc <display7SEGtopbottom+0x31c>)
 8000400:	f001 fdf5 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, RESET);
		  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, SET);
		  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, RESET);
		  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, RESET);
	  }
}
 8000404:	e15d      	b.n	80006c2 <display7SEGtopbottom+0x312>
	  else if (num == 1){
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	2b01      	cmp	r3, #1
 800040a:	d123      	bne.n	8000454 <display7SEGtopbottom+0xa4>
		  HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, SET);
 800040c:	2201      	movs	r2, #1
 800040e:	2101      	movs	r1, #1
 8000410:	48ae      	ldr	r0, [pc, #696]	; (80006cc <display7SEGtopbottom+0x31c>)
 8000412:	f001 fdec 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, RESET);
 8000416:	2200      	movs	r2, #0
 8000418:	2102      	movs	r1, #2
 800041a:	48ac      	ldr	r0, [pc, #688]	; (80006cc <display7SEGtopbottom+0x31c>)
 800041c:	f001 fde7 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, RESET);
 8000420:	2200      	movs	r2, #0
 8000422:	2104      	movs	r1, #4
 8000424:	48a9      	ldr	r0, [pc, #676]	; (80006cc <display7SEGtopbottom+0x31c>)
 8000426:	f001 fde2 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, SET);
 800042a:	2201      	movs	r2, #1
 800042c:	2108      	movs	r1, #8
 800042e:	48a7      	ldr	r0, [pc, #668]	; (80006cc <display7SEGtopbottom+0x31c>)
 8000430:	f001 fddd 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, SET);
 8000434:	2201      	movs	r2, #1
 8000436:	2110      	movs	r1, #16
 8000438:	48a4      	ldr	r0, [pc, #656]	; (80006cc <display7SEGtopbottom+0x31c>)
 800043a:	f001 fdd8 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, SET);
 800043e:	2201      	movs	r2, #1
 8000440:	2120      	movs	r1, #32
 8000442:	48a2      	ldr	r0, [pc, #648]	; (80006cc <display7SEGtopbottom+0x31c>)
 8000444:	f001 fdd3 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, SET);
 8000448:	2201      	movs	r2, #1
 800044a:	2140      	movs	r1, #64	; 0x40
 800044c:	489f      	ldr	r0, [pc, #636]	; (80006cc <display7SEGtopbottom+0x31c>)
 800044e:	f001 fdce 	bl	8001fee <HAL_GPIO_WritePin>
}
 8000452:	e136      	b.n	80006c2 <display7SEGtopbottom+0x312>
	  else if (num == 2){
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	2b02      	cmp	r3, #2
 8000458:	d123      	bne.n	80004a2 <display7SEGtopbottom+0xf2>
		  HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, RESET);
 800045a:	2200      	movs	r2, #0
 800045c:	2101      	movs	r1, #1
 800045e:	489b      	ldr	r0, [pc, #620]	; (80006cc <display7SEGtopbottom+0x31c>)
 8000460:	f001 fdc5 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, RESET);
 8000464:	2200      	movs	r2, #0
 8000466:	2102      	movs	r1, #2
 8000468:	4898      	ldr	r0, [pc, #608]	; (80006cc <display7SEGtopbottom+0x31c>)
 800046a:	f001 fdc0 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, SET);
 800046e:	2201      	movs	r2, #1
 8000470:	2104      	movs	r1, #4
 8000472:	4896      	ldr	r0, [pc, #600]	; (80006cc <display7SEGtopbottom+0x31c>)
 8000474:	f001 fdbb 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, RESET);
 8000478:	2200      	movs	r2, #0
 800047a:	2108      	movs	r1, #8
 800047c:	4893      	ldr	r0, [pc, #588]	; (80006cc <display7SEGtopbottom+0x31c>)
 800047e:	f001 fdb6 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, RESET);
 8000482:	2200      	movs	r2, #0
 8000484:	2110      	movs	r1, #16
 8000486:	4891      	ldr	r0, [pc, #580]	; (80006cc <display7SEGtopbottom+0x31c>)
 8000488:	f001 fdb1 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, SET);
 800048c:	2201      	movs	r2, #1
 800048e:	2120      	movs	r1, #32
 8000490:	488e      	ldr	r0, [pc, #568]	; (80006cc <display7SEGtopbottom+0x31c>)
 8000492:	f001 fdac 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, RESET);
 8000496:	2200      	movs	r2, #0
 8000498:	2140      	movs	r1, #64	; 0x40
 800049a:	488c      	ldr	r0, [pc, #560]	; (80006cc <display7SEGtopbottom+0x31c>)
 800049c:	f001 fda7 	bl	8001fee <HAL_GPIO_WritePin>
}
 80004a0:	e10f      	b.n	80006c2 <display7SEGtopbottom+0x312>
	  else if (num == 3){
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	2b03      	cmp	r3, #3
 80004a6:	d123      	bne.n	80004f0 <display7SEGtopbottom+0x140>
		  HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, RESET);
 80004a8:	2200      	movs	r2, #0
 80004aa:	2101      	movs	r1, #1
 80004ac:	4887      	ldr	r0, [pc, #540]	; (80006cc <display7SEGtopbottom+0x31c>)
 80004ae:	f001 fd9e 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, RESET);
 80004b2:	2200      	movs	r2, #0
 80004b4:	2102      	movs	r1, #2
 80004b6:	4885      	ldr	r0, [pc, #532]	; (80006cc <display7SEGtopbottom+0x31c>)
 80004b8:	f001 fd99 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, RESET);
 80004bc:	2200      	movs	r2, #0
 80004be:	2104      	movs	r1, #4
 80004c0:	4882      	ldr	r0, [pc, #520]	; (80006cc <display7SEGtopbottom+0x31c>)
 80004c2:	f001 fd94 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, RESET);
 80004c6:	2200      	movs	r2, #0
 80004c8:	2108      	movs	r1, #8
 80004ca:	4880      	ldr	r0, [pc, #512]	; (80006cc <display7SEGtopbottom+0x31c>)
 80004cc:	f001 fd8f 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, SET);
 80004d0:	2201      	movs	r2, #1
 80004d2:	2110      	movs	r1, #16
 80004d4:	487d      	ldr	r0, [pc, #500]	; (80006cc <display7SEGtopbottom+0x31c>)
 80004d6:	f001 fd8a 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, SET);
 80004da:	2201      	movs	r2, #1
 80004dc:	2120      	movs	r1, #32
 80004de:	487b      	ldr	r0, [pc, #492]	; (80006cc <display7SEGtopbottom+0x31c>)
 80004e0:	f001 fd85 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, RESET);
 80004e4:	2200      	movs	r2, #0
 80004e6:	2140      	movs	r1, #64	; 0x40
 80004e8:	4878      	ldr	r0, [pc, #480]	; (80006cc <display7SEGtopbottom+0x31c>)
 80004ea:	f001 fd80 	bl	8001fee <HAL_GPIO_WritePin>
}
 80004ee:	e0e8      	b.n	80006c2 <display7SEGtopbottom+0x312>
	  else if (num == 4){
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	2b04      	cmp	r3, #4
 80004f4:	d123      	bne.n	800053e <display7SEGtopbottom+0x18e>
		  HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, SET);
 80004f6:	2201      	movs	r2, #1
 80004f8:	2101      	movs	r1, #1
 80004fa:	4874      	ldr	r0, [pc, #464]	; (80006cc <display7SEGtopbottom+0x31c>)
 80004fc:	f001 fd77 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, RESET);
 8000500:	2200      	movs	r2, #0
 8000502:	2102      	movs	r1, #2
 8000504:	4871      	ldr	r0, [pc, #452]	; (80006cc <display7SEGtopbottom+0x31c>)
 8000506:	f001 fd72 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, RESET);
 800050a:	2200      	movs	r2, #0
 800050c:	2104      	movs	r1, #4
 800050e:	486f      	ldr	r0, [pc, #444]	; (80006cc <display7SEGtopbottom+0x31c>)
 8000510:	f001 fd6d 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, SET);
 8000514:	2201      	movs	r2, #1
 8000516:	2108      	movs	r1, #8
 8000518:	486c      	ldr	r0, [pc, #432]	; (80006cc <display7SEGtopbottom+0x31c>)
 800051a:	f001 fd68 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, SET);
 800051e:	2201      	movs	r2, #1
 8000520:	2110      	movs	r1, #16
 8000522:	486a      	ldr	r0, [pc, #424]	; (80006cc <display7SEGtopbottom+0x31c>)
 8000524:	f001 fd63 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, RESET);
 8000528:	2200      	movs	r2, #0
 800052a:	2120      	movs	r1, #32
 800052c:	4867      	ldr	r0, [pc, #412]	; (80006cc <display7SEGtopbottom+0x31c>)
 800052e:	f001 fd5e 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, RESET);
 8000532:	2200      	movs	r2, #0
 8000534:	2140      	movs	r1, #64	; 0x40
 8000536:	4865      	ldr	r0, [pc, #404]	; (80006cc <display7SEGtopbottom+0x31c>)
 8000538:	f001 fd59 	bl	8001fee <HAL_GPIO_WritePin>
}
 800053c:	e0c1      	b.n	80006c2 <display7SEGtopbottom+0x312>
	  else if (num == 5){
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	2b05      	cmp	r3, #5
 8000542:	d123      	bne.n	800058c <display7SEGtopbottom+0x1dc>
		  HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, RESET);
 8000544:	2200      	movs	r2, #0
 8000546:	2101      	movs	r1, #1
 8000548:	4860      	ldr	r0, [pc, #384]	; (80006cc <display7SEGtopbottom+0x31c>)
 800054a:	f001 fd50 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, SET);
 800054e:	2201      	movs	r2, #1
 8000550:	2102      	movs	r1, #2
 8000552:	485e      	ldr	r0, [pc, #376]	; (80006cc <display7SEGtopbottom+0x31c>)
 8000554:	f001 fd4b 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, RESET);
 8000558:	2200      	movs	r2, #0
 800055a:	2104      	movs	r1, #4
 800055c:	485b      	ldr	r0, [pc, #364]	; (80006cc <display7SEGtopbottom+0x31c>)
 800055e:	f001 fd46 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, RESET);
 8000562:	2200      	movs	r2, #0
 8000564:	2108      	movs	r1, #8
 8000566:	4859      	ldr	r0, [pc, #356]	; (80006cc <display7SEGtopbottom+0x31c>)
 8000568:	f001 fd41 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, SET);
 800056c:	2201      	movs	r2, #1
 800056e:	2110      	movs	r1, #16
 8000570:	4856      	ldr	r0, [pc, #344]	; (80006cc <display7SEGtopbottom+0x31c>)
 8000572:	f001 fd3c 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, RESET);
 8000576:	2200      	movs	r2, #0
 8000578:	2120      	movs	r1, #32
 800057a:	4854      	ldr	r0, [pc, #336]	; (80006cc <display7SEGtopbottom+0x31c>)
 800057c:	f001 fd37 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, RESET);
 8000580:	2200      	movs	r2, #0
 8000582:	2140      	movs	r1, #64	; 0x40
 8000584:	4851      	ldr	r0, [pc, #324]	; (80006cc <display7SEGtopbottom+0x31c>)
 8000586:	f001 fd32 	bl	8001fee <HAL_GPIO_WritePin>
}
 800058a:	e09a      	b.n	80006c2 <display7SEGtopbottom+0x312>
	  else if (num == 6){
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	2b06      	cmp	r3, #6
 8000590:	d123      	bne.n	80005da <display7SEGtopbottom+0x22a>
		  HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	2101      	movs	r1, #1
 8000596:	484d      	ldr	r0, [pc, #308]	; (80006cc <display7SEGtopbottom+0x31c>)
 8000598:	f001 fd29 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, SET);
 800059c:	2201      	movs	r2, #1
 800059e:	2102      	movs	r1, #2
 80005a0:	484a      	ldr	r0, [pc, #296]	; (80006cc <display7SEGtopbottom+0x31c>)
 80005a2:	f001 fd24 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2104      	movs	r1, #4
 80005aa:	4848      	ldr	r0, [pc, #288]	; (80006cc <display7SEGtopbottom+0x31c>)
 80005ac:	f001 fd1f 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2108      	movs	r1, #8
 80005b4:	4845      	ldr	r0, [pc, #276]	; (80006cc <display7SEGtopbottom+0x31c>)
 80005b6:	f001 fd1a 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2110      	movs	r1, #16
 80005be:	4843      	ldr	r0, [pc, #268]	; (80006cc <display7SEGtopbottom+0x31c>)
 80005c0:	f001 fd15 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	2120      	movs	r1, #32
 80005c8:	4840      	ldr	r0, [pc, #256]	; (80006cc <display7SEGtopbottom+0x31c>)
 80005ca:	f001 fd10 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2140      	movs	r1, #64	; 0x40
 80005d2:	483e      	ldr	r0, [pc, #248]	; (80006cc <display7SEGtopbottom+0x31c>)
 80005d4:	f001 fd0b 	bl	8001fee <HAL_GPIO_WritePin>
}
 80005d8:	e073      	b.n	80006c2 <display7SEGtopbottom+0x312>
	  else if (num == 7){
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	2b07      	cmp	r3, #7
 80005de:	d123      	bne.n	8000628 <display7SEGtopbottom+0x278>
		  HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	2101      	movs	r1, #1
 80005e4:	4839      	ldr	r0, [pc, #228]	; (80006cc <display7SEGtopbottom+0x31c>)
 80005e6:	f001 fd02 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2102      	movs	r1, #2
 80005ee:	4837      	ldr	r0, [pc, #220]	; (80006cc <display7SEGtopbottom+0x31c>)
 80005f0:	f001 fcfd 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2104      	movs	r1, #4
 80005f8:	4834      	ldr	r0, [pc, #208]	; (80006cc <display7SEGtopbottom+0x31c>)
 80005fa:	f001 fcf8 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, SET);
 80005fe:	2201      	movs	r2, #1
 8000600:	2108      	movs	r1, #8
 8000602:	4832      	ldr	r0, [pc, #200]	; (80006cc <display7SEGtopbottom+0x31c>)
 8000604:	f001 fcf3 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, SET);
 8000608:	2201      	movs	r2, #1
 800060a:	2110      	movs	r1, #16
 800060c:	482f      	ldr	r0, [pc, #188]	; (80006cc <display7SEGtopbottom+0x31c>)
 800060e:	f001 fcee 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, SET);
 8000612:	2201      	movs	r2, #1
 8000614:	2120      	movs	r1, #32
 8000616:	482d      	ldr	r0, [pc, #180]	; (80006cc <display7SEGtopbottom+0x31c>)
 8000618:	f001 fce9 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, SET);
 800061c:	2201      	movs	r2, #1
 800061e:	2140      	movs	r1, #64	; 0x40
 8000620:	482a      	ldr	r0, [pc, #168]	; (80006cc <display7SEGtopbottom+0x31c>)
 8000622:	f001 fce4 	bl	8001fee <HAL_GPIO_WritePin>
}
 8000626:	e04c      	b.n	80006c2 <display7SEGtopbottom+0x312>
	  else if (num == 8){
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2b08      	cmp	r3, #8
 800062c:	d123      	bne.n	8000676 <display7SEGtopbottom+0x2c6>
		  HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	2101      	movs	r1, #1
 8000632:	4826      	ldr	r0, [pc, #152]	; (80006cc <display7SEGtopbottom+0x31c>)
 8000634:	f001 fcdb 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	2102      	movs	r1, #2
 800063c:	4823      	ldr	r0, [pc, #140]	; (80006cc <display7SEGtopbottom+0x31c>)
 800063e:	f001 fcd6 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	2104      	movs	r1, #4
 8000646:	4821      	ldr	r0, [pc, #132]	; (80006cc <display7SEGtopbottom+0x31c>)
 8000648:	f001 fcd1 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	2108      	movs	r1, #8
 8000650:	481e      	ldr	r0, [pc, #120]	; (80006cc <display7SEGtopbottom+0x31c>)
 8000652:	f001 fccc 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	2110      	movs	r1, #16
 800065a:	481c      	ldr	r0, [pc, #112]	; (80006cc <display7SEGtopbottom+0x31c>)
 800065c:	f001 fcc7 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	2120      	movs	r1, #32
 8000664:	4819      	ldr	r0, [pc, #100]	; (80006cc <display7SEGtopbottom+0x31c>)
 8000666:	f001 fcc2 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	2140      	movs	r1, #64	; 0x40
 800066e:	4817      	ldr	r0, [pc, #92]	; (80006cc <display7SEGtopbottom+0x31c>)
 8000670:	f001 fcbd 	bl	8001fee <HAL_GPIO_WritePin>
}
 8000674:	e025      	b.n	80006c2 <display7SEGtopbottom+0x312>
	  else if (num == 9){
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2b09      	cmp	r3, #9
 800067a:	d122      	bne.n	80006c2 <display7SEGtopbottom+0x312>
		  HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, RESET);
 800067c:	2200      	movs	r2, #0
 800067e:	2101      	movs	r1, #1
 8000680:	4812      	ldr	r0, [pc, #72]	; (80006cc <display7SEGtopbottom+0x31c>)
 8000682:	f001 fcb4 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	2102      	movs	r1, #2
 800068a:	4810      	ldr	r0, [pc, #64]	; (80006cc <display7SEGtopbottom+0x31c>)
 800068c:	f001 fcaf 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, RESET);
 8000690:	2200      	movs	r2, #0
 8000692:	2104      	movs	r1, #4
 8000694:	480d      	ldr	r0, [pc, #52]	; (80006cc <display7SEGtopbottom+0x31c>)
 8000696:	f001 fcaa 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	2108      	movs	r1, #8
 800069e:	480b      	ldr	r0, [pc, #44]	; (80006cc <display7SEGtopbottom+0x31c>)
 80006a0:	f001 fca5 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, SET);
 80006a4:	2201      	movs	r2, #1
 80006a6:	2110      	movs	r1, #16
 80006a8:	4808      	ldr	r0, [pc, #32]	; (80006cc <display7SEGtopbottom+0x31c>)
 80006aa:	f001 fca0 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, RESET);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2120      	movs	r1, #32
 80006b2:	4806      	ldr	r0, [pc, #24]	; (80006cc <display7SEGtopbottom+0x31c>)
 80006b4:	f001 fc9b 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, RESET);
 80006b8:	2200      	movs	r2, #0
 80006ba:	2140      	movs	r1, #64	; 0x40
 80006bc:	4803      	ldr	r0, [pc, #12]	; (80006cc <display7SEGtopbottom+0x31c>)
 80006be:	f001 fc96 	bl	8001fee <HAL_GPIO_WritePin>
}
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40010c00 	.word	0x40010c00

080006d0 <display7SEGleftright>:
void display7SEGleftright(int num){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	  if (num == 0){
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d129      	bne.n	8000732 <display7SEGleftright+0x62>
		  HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	2180      	movs	r1, #128	; 0x80
 80006e2:	48c8      	ldr	r0, [pc, #800]	; (8000a04 <display7SEGleftright+0x334>)
 80006e4:	f001 fc83 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, RESET);
 80006e8:	2200      	movs	r2, #0
 80006ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ee:	48c5      	ldr	r0, [pc, #788]	; (8000a04 <display7SEGleftright+0x334>)
 80006f0:	f001 fc7d 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, RESET);
 80006f4:	2200      	movs	r2, #0
 80006f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006fa:	48c2      	ldr	r0, [pc, #776]	; (8000a04 <display7SEGleftright+0x334>)
 80006fc:	f001 fc77 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, RESET);
 8000700:	2200      	movs	r2, #0
 8000702:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000706:	48bf      	ldr	r0, [pc, #764]	; (8000a04 <display7SEGleftright+0x334>)
 8000708:	f001 fc71 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, RESET);
 800070c:	2200      	movs	r2, #0
 800070e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000712:	48bc      	ldr	r0, [pc, #752]	; (8000a04 <display7SEGleftright+0x334>)
 8000714:	f001 fc6b 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, RESET);
 8000718:	2200      	movs	r2, #0
 800071a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800071e:	48b9      	ldr	r0, [pc, #740]	; (8000a04 <display7SEGleftright+0x334>)
 8000720:	f001 fc65 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, SET);
 8000724:	2201      	movs	r2, #1
 8000726:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800072a:	48b6      	ldr	r0, [pc, #728]	; (8000a04 <display7SEGleftright+0x334>)
 800072c:	f001 fc5f 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, RESET);
		  HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, SET);
		  HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, RESET);
		  HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, RESET);
	  }
}
 8000730:	e196      	b.n	8000a60 <display7SEGleftright+0x390>
	  else if (num == 1){
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2b01      	cmp	r3, #1
 8000736:	d129      	bne.n	800078c <display7SEGleftright+0xbc>
		  HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, SET);
 8000738:	2201      	movs	r2, #1
 800073a:	2180      	movs	r1, #128	; 0x80
 800073c:	48b1      	ldr	r0, [pc, #708]	; (8000a04 <display7SEGleftright+0x334>)
 800073e:	f001 fc56 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000748:	48ae      	ldr	r0, [pc, #696]	; (8000a04 <display7SEGleftright+0x334>)
 800074a:	f001 fc50 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000754:	48ab      	ldr	r0, [pc, #684]	; (8000a04 <display7SEGleftright+0x334>)
 8000756:	f001 fc4a 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, SET);
 800075a:	2201      	movs	r2, #1
 800075c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000760:	48a8      	ldr	r0, [pc, #672]	; (8000a04 <display7SEGleftright+0x334>)
 8000762:	f001 fc44 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, SET);
 8000766:	2201      	movs	r2, #1
 8000768:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800076c:	48a5      	ldr	r0, [pc, #660]	; (8000a04 <display7SEGleftright+0x334>)
 800076e:	f001 fc3e 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, SET);
 8000772:	2201      	movs	r2, #1
 8000774:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000778:	48a2      	ldr	r0, [pc, #648]	; (8000a04 <display7SEGleftright+0x334>)
 800077a:	f001 fc38 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, SET);
 800077e:	2201      	movs	r2, #1
 8000780:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000784:	489f      	ldr	r0, [pc, #636]	; (8000a04 <display7SEGleftright+0x334>)
 8000786:	f001 fc32 	bl	8001fee <HAL_GPIO_WritePin>
}
 800078a:	e169      	b.n	8000a60 <display7SEGleftright+0x390>
	  else if (num == 2){
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2b02      	cmp	r3, #2
 8000790:	d129      	bne.n	80007e6 <display7SEGleftright+0x116>
		  HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	2180      	movs	r1, #128	; 0x80
 8000796:	489b      	ldr	r0, [pc, #620]	; (8000a04 <display7SEGleftright+0x334>)
 8000798:	f001 fc29 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007a2:	4898      	ldr	r0, [pc, #608]	; (8000a04 <display7SEGleftright+0x334>)
 80007a4:	f001 fc23 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, SET);
 80007a8:	2201      	movs	r2, #1
 80007aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007ae:	4895      	ldr	r0, [pc, #596]	; (8000a04 <display7SEGleftright+0x334>)
 80007b0:	f001 fc1d 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, RESET);
 80007b4:	2200      	movs	r2, #0
 80007b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007ba:	4892      	ldr	r0, [pc, #584]	; (8000a04 <display7SEGleftright+0x334>)
 80007bc:	f001 fc17 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, RESET);
 80007c0:	2200      	movs	r2, #0
 80007c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007c6:	488f      	ldr	r0, [pc, #572]	; (8000a04 <display7SEGleftright+0x334>)
 80007c8:	f001 fc11 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, SET);
 80007cc:	2201      	movs	r2, #1
 80007ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007d2:	488c      	ldr	r0, [pc, #560]	; (8000a04 <display7SEGleftright+0x334>)
 80007d4:	f001 fc0b 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, RESET);
 80007d8:	2200      	movs	r2, #0
 80007da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007de:	4889      	ldr	r0, [pc, #548]	; (8000a04 <display7SEGleftright+0x334>)
 80007e0:	f001 fc05 	bl	8001fee <HAL_GPIO_WritePin>
}
 80007e4:	e13c      	b.n	8000a60 <display7SEGleftright+0x390>
	  else if (num == 3){
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2b03      	cmp	r3, #3
 80007ea:	d129      	bne.n	8000840 <display7SEGleftright+0x170>
		  HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, RESET);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2180      	movs	r1, #128	; 0x80
 80007f0:	4884      	ldr	r0, [pc, #528]	; (8000a04 <display7SEGleftright+0x334>)
 80007f2:	f001 fbfc 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007fc:	4881      	ldr	r0, [pc, #516]	; (8000a04 <display7SEGleftright+0x334>)
 80007fe:	f001 fbf6 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000808:	487e      	ldr	r0, [pc, #504]	; (8000a04 <display7SEGleftright+0x334>)
 800080a:	f001 fbf0 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000814:	487b      	ldr	r0, [pc, #492]	; (8000a04 <display7SEGleftright+0x334>)
 8000816:	f001 fbea 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, SET);
 800081a:	2201      	movs	r2, #1
 800081c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000820:	4878      	ldr	r0, [pc, #480]	; (8000a04 <display7SEGleftright+0x334>)
 8000822:	f001 fbe4 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, SET);
 8000826:	2201      	movs	r2, #1
 8000828:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800082c:	4875      	ldr	r0, [pc, #468]	; (8000a04 <display7SEGleftright+0x334>)
 800082e:	f001 fbde 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000838:	4872      	ldr	r0, [pc, #456]	; (8000a04 <display7SEGleftright+0x334>)
 800083a:	f001 fbd8 	bl	8001fee <HAL_GPIO_WritePin>
}
 800083e:	e10f      	b.n	8000a60 <display7SEGleftright+0x390>
	  else if (num == 4){
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2b04      	cmp	r3, #4
 8000844:	d129      	bne.n	800089a <display7SEGleftright+0x1ca>
		  HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, SET);
 8000846:	2201      	movs	r2, #1
 8000848:	2180      	movs	r1, #128	; 0x80
 800084a:	486e      	ldr	r0, [pc, #440]	; (8000a04 <display7SEGleftright+0x334>)
 800084c:	f001 fbcf 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000856:	486b      	ldr	r0, [pc, #428]	; (8000a04 <display7SEGleftright+0x334>)
 8000858:	f001 fbc9 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, RESET);
 800085c:	2200      	movs	r2, #0
 800085e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000862:	4868      	ldr	r0, [pc, #416]	; (8000a04 <display7SEGleftright+0x334>)
 8000864:	f001 fbc3 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, SET);
 8000868:	2201      	movs	r2, #1
 800086a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800086e:	4865      	ldr	r0, [pc, #404]	; (8000a04 <display7SEGleftright+0x334>)
 8000870:	f001 fbbd 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, SET);
 8000874:	2201      	movs	r2, #1
 8000876:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800087a:	4862      	ldr	r0, [pc, #392]	; (8000a04 <display7SEGleftright+0x334>)
 800087c:	f001 fbb7 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, RESET);
 8000880:	2200      	movs	r2, #0
 8000882:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000886:	485f      	ldr	r0, [pc, #380]	; (8000a04 <display7SEGleftright+0x334>)
 8000888:	f001 fbb1 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, RESET);
 800088c:	2200      	movs	r2, #0
 800088e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000892:	485c      	ldr	r0, [pc, #368]	; (8000a04 <display7SEGleftright+0x334>)
 8000894:	f001 fbab 	bl	8001fee <HAL_GPIO_WritePin>
}
 8000898:	e0e2      	b.n	8000a60 <display7SEGleftright+0x390>
	  else if (num == 5){
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	2b05      	cmp	r3, #5
 800089e:	d129      	bne.n	80008f4 <display7SEGleftright+0x224>
		  HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2180      	movs	r1, #128	; 0x80
 80008a4:	4857      	ldr	r0, [pc, #348]	; (8000a04 <display7SEGleftright+0x334>)
 80008a6:	f001 fba2 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, SET);
 80008aa:	2201      	movs	r2, #1
 80008ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008b0:	4854      	ldr	r0, [pc, #336]	; (8000a04 <display7SEGleftright+0x334>)
 80008b2:	f001 fb9c 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008bc:	4851      	ldr	r0, [pc, #324]	; (8000a04 <display7SEGleftright+0x334>)
 80008be:	f001 fb96 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008c8:	484e      	ldr	r0, [pc, #312]	; (8000a04 <display7SEGleftright+0x334>)
 80008ca:	f001 fb90 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, SET);
 80008ce:	2201      	movs	r2, #1
 80008d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008d4:	484b      	ldr	r0, [pc, #300]	; (8000a04 <display7SEGleftright+0x334>)
 80008d6:	f001 fb8a 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008e0:	4848      	ldr	r0, [pc, #288]	; (8000a04 <display7SEGleftright+0x334>)
 80008e2:	f001 fb84 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008ec:	4845      	ldr	r0, [pc, #276]	; (8000a04 <display7SEGleftright+0x334>)
 80008ee:	f001 fb7e 	bl	8001fee <HAL_GPIO_WritePin>
}
 80008f2:	e0b5      	b.n	8000a60 <display7SEGleftright+0x390>
	  else if (num == 6){
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2b06      	cmp	r3, #6
 80008f8:	d129      	bne.n	800094e <display7SEGleftright+0x27e>
		  HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2180      	movs	r1, #128	; 0x80
 80008fe:	4841      	ldr	r0, [pc, #260]	; (8000a04 <display7SEGleftright+0x334>)
 8000900:	f001 fb75 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, SET);
 8000904:	2201      	movs	r2, #1
 8000906:	f44f 7180 	mov.w	r1, #256	; 0x100
 800090a:	483e      	ldr	r0, [pc, #248]	; (8000a04 <display7SEGleftright+0x334>)
 800090c:	f001 fb6f 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, RESET);
 8000910:	2200      	movs	r2, #0
 8000912:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000916:	483b      	ldr	r0, [pc, #236]	; (8000a04 <display7SEGleftright+0x334>)
 8000918:	f001 fb69 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, RESET);
 800091c:	2200      	movs	r2, #0
 800091e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000922:	4838      	ldr	r0, [pc, #224]	; (8000a04 <display7SEGleftright+0x334>)
 8000924:	f001 fb63 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, RESET);
 8000928:	2200      	movs	r2, #0
 800092a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800092e:	4835      	ldr	r0, [pc, #212]	; (8000a04 <display7SEGleftright+0x334>)
 8000930:	f001 fb5d 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, RESET);
 8000934:	2200      	movs	r2, #0
 8000936:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800093a:	4832      	ldr	r0, [pc, #200]	; (8000a04 <display7SEGleftright+0x334>)
 800093c:	f001 fb57 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, RESET);
 8000940:	2200      	movs	r2, #0
 8000942:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000946:	482f      	ldr	r0, [pc, #188]	; (8000a04 <display7SEGleftright+0x334>)
 8000948:	f001 fb51 	bl	8001fee <HAL_GPIO_WritePin>
}
 800094c:	e088      	b.n	8000a60 <display7SEGleftright+0x390>
	  else if (num == 7){
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2b07      	cmp	r3, #7
 8000952:	d129      	bne.n	80009a8 <display7SEGleftright+0x2d8>
		  HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, RESET);
 8000954:	2200      	movs	r2, #0
 8000956:	2180      	movs	r1, #128	; 0x80
 8000958:	482a      	ldr	r0, [pc, #168]	; (8000a04 <display7SEGleftright+0x334>)
 800095a:	f001 fb48 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000964:	4827      	ldr	r0, [pc, #156]	; (8000a04 <display7SEGleftright+0x334>)
 8000966:	f001 fb42 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000970:	4824      	ldr	r0, [pc, #144]	; (8000a04 <display7SEGleftright+0x334>)
 8000972:	f001 fb3c 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, SET);
 8000976:	2201      	movs	r2, #1
 8000978:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800097c:	4821      	ldr	r0, [pc, #132]	; (8000a04 <display7SEGleftright+0x334>)
 800097e:	f001 fb36 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, SET);
 8000982:	2201      	movs	r2, #1
 8000984:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000988:	481e      	ldr	r0, [pc, #120]	; (8000a04 <display7SEGleftright+0x334>)
 800098a:	f001 fb30 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, SET);
 800098e:	2201      	movs	r2, #1
 8000990:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000994:	481b      	ldr	r0, [pc, #108]	; (8000a04 <display7SEGleftright+0x334>)
 8000996:	f001 fb2a 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, SET);
 800099a:	2201      	movs	r2, #1
 800099c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009a0:	4818      	ldr	r0, [pc, #96]	; (8000a04 <display7SEGleftright+0x334>)
 80009a2:	f001 fb24 	bl	8001fee <HAL_GPIO_WritePin>
}
 80009a6:	e05b      	b.n	8000a60 <display7SEGleftright+0x390>
	  else if (num == 8){
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2b08      	cmp	r3, #8
 80009ac:	d12c      	bne.n	8000a08 <display7SEGleftright+0x338>
		  HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2180      	movs	r1, #128	; 0x80
 80009b2:	4814      	ldr	r0, [pc, #80]	; (8000a04 <display7SEGleftright+0x334>)
 80009b4:	f001 fb1b 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, RESET);
 80009b8:	2200      	movs	r2, #0
 80009ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009be:	4811      	ldr	r0, [pc, #68]	; (8000a04 <display7SEGleftright+0x334>)
 80009c0:	f001 fb15 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, RESET);
 80009c4:	2200      	movs	r2, #0
 80009c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ca:	480e      	ldr	r0, [pc, #56]	; (8000a04 <display7SEGleftright+0x334>)
 80009cc:	f001 fb0f 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, RESET);
 80009d0:	2200      	movs	r2, #0
 80009d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009d6:	480b      	ldr	r0, [pc, #44]	; (8000a04 <display7SEGleftright+0x334>)
 80009d8:	f001 fb09 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, RESET);
 80009dc:	2200      	movs	r2, #0
 80009de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009e2:	4808      	ldr	r0, [pc, #32]	; (8000a04 <display7SEGleftright+0x334>)
 80009e4:	f001 fb03 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, RESET);
 80009e8:	2200      	movs	r2, #0
 80009ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009ee:	4805      	ldr	r0, [pc, #20]	; (8000a04 <display7SEGleftright+0x334>)
 80009f0:	f001 fafd 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009fa:	4802      	ldr	r0, [pc, #8]	; (8000a04 <display7SEGleftright+0x334>)
 80009fc:	f001 faf7 	bl	8001fee <HAL_GPIO_WritePin>
}
 8000a00:	e02e      	b.n	8000a60 <display7SEGleftright+0x390>
 8000a02:	bf00      	nop
 8000a04:	40010c00 	.word	0x40010c00
	  else if (num == 9){
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2b09      	cmp	r3, #9
 8000a0c:	d128      	bne.n	8000a60 <display7SEGleftright+0x390>
		  HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2180      	movs	r1, #128	; 0x80
 8000a12:	4815      	ldr	r0, [pc, #84]	; (8000a68 <display7SEGleftright+0x398>)
 8000a14:	f001 faeb 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, RESET);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a1e:	4812      	ldr	r0, [pc, #72]	; (8000a68 <display7SEGleftright+0x398>)
 8000a20:	f001 fae5 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, RESET);
 8000a24:	2200      	movs	r2, #0
 8000a26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a2a:	480f      	ldr	r0, [pc, #60]	; (8000a68 <display7SEGleftright+0x398>)
 8000a2c:	f001 fadf 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a36:	480c      	ldr	r0, [pc, #48]	; (8000a68 <display7SEGleftright+0x398>)
 8000a38:	f001 fad9 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, SET);
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a42:	4809      	ldr	r0, [pc, #36]	; (8000a68 <display7SEGleftright+0x398>)
 8000a44:	f001 fad3 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, RESET);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a4e:	4806      	ldr	r0, [pc, #24]	; (8000a68 <display7SEGleftright+0x398>)
 8000a50:	f001 facd 	bl	8001fee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, RESET);
 8000a54:	2200      	movs	r2, #0
 8000a56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a5a:	4803      	ldr	r0, [pc, #12]	; (8000a68 <display7SEGleftright+0x398>)
 8000a5c:	f001 fac7 	bl	8001fee <HAL_GPIO_WritePin>
}
 8000a60:	bf00      	nop
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40010c00 	.word	0x40010c00

08000a6c <led_turnon>:

void led_turnon(int led, int position){
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	6039      	str	r1, [r7, #0]
	if(position == topbottom){
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	2b7a      	cmp	r3, #122	; 0x7a
 8000a7a:	d13c      	bne.n	8000af6 <led_turnon+0x8a>
		switch(led){
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2b5c      	cmp	r3, #92	; 0x5c
 8000a80:	d029      	beq.n	8000ad6 <led_turnon+0x6a>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2b5c      	cmp	r3, #92	; 0x5c
 8000a86:	dc76      	bgt.n	8000b76 <led_turnon+0x10a>
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2b5a      	cmp	r3, #90	; 0x5a
 8000a8c:	d003      	beq.n	8000a96 <led_turnon+0x2a>
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2b5b      	cmp	r3, #91	; 0x5b
 8000a92:	d010      	beq.n	8000ab6 <led_turnon+0x4a>
		case green_led:
			HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, SET);
			HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, SET);
			HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, RESET);
			break;
		default: break;
 8000a94:	e06f      	b.n	8000b76 <led_turnon+0x10a>
			HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2102      	movs	r1, #2
 8000a9a:	483b      	ldr	r0, [pc, #236]	; (8000b88 <led_turnon+0x11c>)
 8000a9c:	f001 faa7 	bl	8001fee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, SET);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	2104      	movs	r1, #4
 8000aa4:	4838      	ldr	r0, [pc, #224]	; (8000b88 <led_turnon+0x11c>)
 8000aa6:	f001 faa2 	bl	8001fee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, SET);
 8000aaa:	2201      	movs	r2, #1
 8000aac:	2108      	movs	r1, #8
 8000aae:	4836      	ldr	r0, [pc, #216]	; (8000b88 <led_turnon+0x11c>)
 8000ab0:	f001 fa9d 	bl	8001fee <HAL_GPIO_WritePin>
			break;
 8000ab4:	e064      	b.n	8000b80 <led_turnon+0x114>
			HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, SET);
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	2102      	movs	r1, #2
 8000aba:	4833      	ldr	r0, [pc, #204]	; (8000b88 <led_turnon+0x11c>)
 8000abc:	f001 fa97 	bl	8001fee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, RESET);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2104      	movs	r1, #4
 8000ac4:	4830      	ldr	r0, [pc, #192]	; (8000b88 <led_turnon+0x11c>)
 8000ac6:	f001 fa92 	bl	8001fee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, SET);
 8000aca:	2201      	movs	r2, #1
 8000acc:	2108      	movs	r1, #8
 8000ace:	482e      	ldr	r0, [pc, #184]	; (8000b88 <led_turnon+0x11c>)
 8000ad0:	f001 fa8d 	bl	8001fee <HAL_GPIO_WritePin>
			break;
 8000ad4:	e054      	b.n	8000b80 <led_turnon+0x114>
			HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, SET);
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	2102      	movs	r1, #2
 8000ada:	482b      	ldr	r0, [pc, #172]	; (8000b88 <led_turnon+0x11c>)
 8000adc:	f001 fa87 	bl	8001fee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, SET);
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	2104      	movs	r1, #4
 8000ae4:	4828      	ldr	r0, [pc, #160]	; (8000b88 <led_turnon+0x11c>)
 8000ae6:	f001 fa82 	bl	8001fee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2108      	movs	r1, #8
 8000aee:	4826      	ldr	r0, [pc, #152]	; (8000b88 <led_turnon+0x11c>)
 8000af0:	f001 fa7d 	bl	8001fee <HAL_GPIO_WritePin>
			break;
 8000af4:	e044      	b.n	8000b80 <led_turnon+0x114>
		}
	}
	else if (position == leftright){
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	2b7b      	cmp	r3, #123	; 0x7b
 8000afa:	d13e      	bne.n	8000b7a <led_turnon+0x10e>
		switch(led){
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2b5c      	cmp	r3, #92	; 0x5c
 8000b00:	d029      	beq.n	8000b56 <led_turnon+0xea>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2b5c      	cmp	r3, #92	; 0x5c
 8000b06:	dc3a      	bgt.n	8000b7e <led_turnon+0x112>
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2b5a      	cmp	r3, #90	; 0x5a
 8000b0c:	d003      	beq.n	8000b16 <led_turnon+0xaa>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2b5b      	cmp	r3, #91	; 0x5b
 8000b12:	d010      	beq.n	8000b36 <led_turnon+0xca>
		case green_led:
			HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, SET);
			HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, SET);
			HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, RESET);
			break;
		default:break;
 8000b14:	e033      	b.n	8000b7e <led_turnon+0x112>
			HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2110      	movs	r1, #16
 8000b1a:	481b      	ldr	r0, [pc, #108]	; (8000b88 <led_turnon+0x11c>)
 8000b1c:	f001 fa67 	bl	8001fee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, SET);
 8000b20:	2201      	movs	r2, #1
 8000b22:	2120      	movs	r1, #32
 8000b24:	4818      	ldr	r0, [pc, #96]	; (8000b88 <led_turnon+0x11c>)
 8000b26:	f001 fa62 	bl	8001fee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, SET);
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	2140      	movs	r1, #64	; 0x40
 8000b2e:	4816      	ldr	r0, [pc, #88]	; (8000b88 <led_turnon+0x11c>)
 8000b30:	f001 fa5d 	bl	8001fee <HAL_GPIO_WritePin>
			break;
 8000b34:	e024      	b.n	8000b80 <led_turnon+0x114>
			HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, SET);
 8000b36:	2201      	movs	r2, #1
 8000b38:	2110      	movs	r1, #16
 8000b3a:	4813      	ldr	r0, [pc, #76]	; (8000b88 <led_turnon+0x11c>)
 8000b3c:	f001 fa57 	bl	8001fee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, RESET);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2120      	movs	r1, #32
 8000b44:	4810      	ldr	r0, [pc, #64]	; (8000b88 <led_turnon+0x11c>)
 8000b46:	f001 fa52 	bl	8001fee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, SET);
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	2140      	movs	r1, #64	; 0x40
 8000b4e:	480e      	ldr	r0, [pc, #56]	; (8000b88 <led_turnon+0x11c>)
 8000b50:	f001 fa4d 	bl	8001fee <HAL_GPIO_WritePin>
			break;
 8000b54:	e014      	b.n	8000b80 <led_turnon+0x114>
			HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, SET);
 8000b56:	2201      	movs	r2, #1
 8000b58:	2110      	movs	r1, #16
 8000b5a:	480b      	ldr	r0, [pc, #44]	; (8000b88 <led_turnon+0x11c>)
 8000b5c:	f001 fa47 	bl	8001fee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, SET);
 8000b60:	2201      	movs	r2, #1
 8000b62:	2120      	movs	r1, #32
 8000b64:	4808      	ldr	r0, [pc, #32]	; (8000b88 <led_turnon+0x11c>)
 8000b66:	f001 fa42 	bl	8001fee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, RESET);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2140      	movs	r1, #64	; 0x40
 8000b6e:	4806      	ldr	r0, [pc, #24]	; (8000b88 <led_turnon+0x11c>)
 8000b70:	f001 fa3d 	bl	8001fee <HAL_GPIO_WritePin>
			break;
 8000b74:	e004      	b.n	8000b80 <led_turnon+0x114>
		default: break;
 8000b76:	bf00      	nop
 8000b78:	e002      	b.n	8000b80 <led_turnon+0x114>
		}
	}
 8000b7a:	bf00      	nop
 8000b7c:	e000      	b.n	8000b80 <led_turnon+0x114>
		default:break;
 8000b7e:	bf00      	nop
}
 8000b80:	bf00      	nop
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40010800 	.word	0x40010800

08000b8c <number_for2led>:
void number_for2led(int duration, int *index_0, int *index_1){
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
	*index_0 = duration/10;
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	4a0d      	ldr	r2, [pc, #52]	; (8000bd0 <number_for2led+0x44>)
 8000b9c:	fb82 1203 	smull	r1, r2, r2, r3
 8000ba0:	1092      	asrs	r2, r2, #2
 8000ba2:	17db      	asrs	r3, r3, #31
 8000ba4:	1ad2      	subs	r2, r2, r3
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	601a      	str	r2, [r3, #0]
	*index_1 = duration%10;
 8000baa:	68f9      	ldr	r1, [r7, #12]
 8000bac:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <number_for2led+0x44>)
 8000bae:	fb83 2301 	smull	r2, r3, r3, r1
 8000bb2:	109a      	asrs	r2, r3, #2
 8000bb4:	17cb      	asrs	r3, r1, #31
 8000bb6:	1ad2      	subs	r2, r2, r3
 8000bb8:	4613      	mov	r3, r2
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	4413      	add	r3, r2
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	1aca      	subs	r2, r1, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	601a      	str	r2, [r3, #0]
}
 8000bc6:	bf00      	nop
 8000bc8:	3714      	adds	r7, #20
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr
 8000bd0:	66666667 	.word	0x66666667

08000bd4 <update_countdown>:

void update_countdown(int mode){
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
	if (mode == red_green){
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2b0c      	cmp	r3, #12
 8000be0:	d116      	bne.n	8000c10 <update_countdown+0x3c>
		tmp_red = red_time/100 - 1;
 8000be2:	4b29      	ldr	r3, [pc, #164]	; (8000c88 <update_countdown+0xb4>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a29      	ldr	r2, [pc, #164]	; (8000c8c <update_countdown+0xb8>)
 8000be8:	fb82 1203 	smull	r1, r2, r2, r3
 8000bec:	1152      	asrs	r2, r2, #5
 8000bee:	17db      	asrs	r3, r3, #31
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	4a26      	ldr	r2, [pc, #152]	; (8000c90 <update_countdown+0xbc>)
 8000bf6:	6013      	str	r3, [r2, #0]
		tmp_green = green_time/100 -1;
 8000bf8:	4b26      	ldr	r3, [pc, #152]	; (8000c94 <update_countdown+0xc0>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a23      	ldr	r2, [pc, #140]	; (8000c8c <update_countdown+0xb8>)
 8000bfe:	fb82 1203 	smull	r1, r2, r2, r3
 8000c02:	1152      	asrs	r2, r2, #5
 8000c04:	17db      	asrs	r3, r3, #31
 8000c06:	1ad3      	subs	r3, r2, r3
 8000c08:	3b01      	subs	r3, #1
 8000c0a:	4a23      	ldr	r2, [pc, #140]	; (8000c98 <update_countdown+0xc4>)
 8000c0c:	6013      	str	r3, [r2, #0]
		tmp_red = red_time/100 - 1;
	}
	else if (mode == yellow_red){
		tmp_yellow = yellow_time/100 - 1;
	}
}
 8000c0e:	e036      	b.n	8000c7e <update_countdown+0xaa>
	else if (mode == red_yellow){
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2b0d      	cmp	r3, #13
 8000c14:	d10b      	bne.n	8000c2e <update_countdown+0x5a>
		tmp_yellow = yellow_time/100 - 1;
 8000c16:	4b21      	ldr	r3, [pc, #132]	; (8000c9c <update_countdown+0xc8>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a1c      	ldr	r2, [pc, #112]	; (8000c8c <update_countdown+0xb8>)
 8000c1c:	fb82 1203 	smull	r1, r2, r2, r3
 8000c20:	1152      	asrs	r2, r2, #5
 8000c22:	17db      	asrs	r3, r3, #31
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	3b01      	subs	r3, #1
 8000c28:	4a1d      	ldr	r2, [pc, #116]	; (8000ca0 <update_countdown+0xcc>)
 8000c2a:	6013      	str	r3, [r2, #0]
}
 8000c2c:	e027      	b.n	8000c7e <update_countdown+0xaa>
	else if (mode == green_red){
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2b0e      	cmp	r3, #14
 8000c32:	d116      	bne.n	8000c62 <update_countdown+0x8e>
		tmp_green = green_time/100 - 1;
 8000c34:	4b17      	ldr	r3, [pc, #92]	; (8000c94 <update_countdown+0xc0>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a14      	ldr	r2, [pc, #80]	; (8000c8c <update_countdown+0xb8>)
 8000c3a:	fb82 1203 	smull	r1, r2, r2, r3
 8000c3e:	1152      	asrs	r2, r2, #5
 8000c40:	17db      	asrs	r3, r3, #31
 8000c42:	1ad3      	subs	r3, r2, r3
 8000c44:	3b01      	subs	r3, #1
 8000c46:	4a14      	ldr	r2, [pc, #80]	; (8000c98 <update_countdown+0xc4>)
 8000c48:	6013      	str	r3, [r2, #0]
		tmp_red = red_time/100 - 1;
 8000c4a:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <update_countdown+0xb4>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a0f      	ldr	r2, [pc, #60]	; (8000c8c <update_countdown+0xb8>)
 8000c50:	fb82 1203 	smull	r1, r2, r2, r3
 8000c54:	1152      	asrs	r2, r2, #5
 8000c56:	17db      	asrs	r3, r3, #31
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	4a0c      	ldr	r2, [pc, #48]	; (8000c90 <update_countdown+0xbc>)
 8000c5e:	6013      	str	r3, [r2, #0]
}
 8000c60:	e00d      	b.n	8000c7e <update_countdown+0xaa>
	else if (mode == yellow_red){
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2b0f      	cmp	r3, #15
 8000c66:	d10a      	bne.n	8000c7e <update_countdown+0xaa>
		tmp_yellow = yellow_time/100 - 1;
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <update_countdown+0xc8>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a07      	ldr	r2, [pc, #28]	; (8000c8c <update_countdown+0xb8>)
 8000c6e:	fb82 1203 	smull	r1, r2, r2, r3
 8000c72:	1152      	asrs	r2, r2, #5
 8000c74:	17db      	asrs	r3, r3, #31
 8000c76:	1ad3      	subs	r3, r2, r3
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	4a09      	ldr	r2, [pc, #36]	; (8000ca0 <update_countdown+0xcc>)
 8000c7c:	6013      	str	r3, [r2, #0]
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr
 8000c88:	20000038 	.word	0x20000038
 8000c8c:	51eb851f 	.word	0x51eb851f
 8000c90:	20000078 	.word	0x20000078
 8000c94:	20000040 	.word	0x20000040
 8000c98:	20000080 	.word	0x20000080
 8000c9c:	2000003c 	.word	0x2000003c
 8000ca0:	2000007c 	.word	0x2000007c

08000ca4 <enablechange>:

void enablechange(){
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
	if (timer2_flag == 1){
 8000ca8:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <enablechange+0x34>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d111      	bne.n	8000cd4 <enablechange+0x30>
		if (enable_trigger == 1) enable_trigger = 0;
 8000cb0:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <enablechange+0x38>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d103      	bne.n	8000cc0 <enablechange+0x1c>
 8000cb8:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <enablechange+0x38>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	e006      	b.n	8000cce <enablechange+0x2a>
		else if (enable_trigger == 0) enable_trigger = 1;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <enablechange+0x38>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d102      	bne.n	8000cce <enablechange+0x2a>
 8000cc8:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <enablechange+0x38>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	601a      	str	r2, [r3, #0]
		setTimer2(50);
 8000cce:	2032      	movs	r0, #50	; 0x32
 8000cd0:	f000 fd46 	bl	8001760 <setTimer2>
	}
}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	200000a0 	.word	0x200000a0
 8000cdc:	20000084 	.word	0x20000084

08000ce0 <timechange>:


void timechange(int *time1, int *time2){
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]
	if (timer3_flag == 1){
 8000cea:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <timechange+0x34>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d10c      	bne.n	8000d0c <timechange+0x2c>
		*time1 = *time1 - 1;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	1e5a      	subs	r2, r3, #1
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	601a      	str	r2, [r3, #0]
		*time2 = *time2 - 1;
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	1e5a      	subs	r2, r3, #1
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	601a      	str	r2, [r3, #0]
		setTimer3(100);
 8000d06:	2064      	movs	r0, #100	; 0x64
 8000d08:	f000 fd3e 	bl	8001788 <setTimer3>
	}
}
 8000d0c:	bf00      	nop
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	200000a8 	.word	0x200000a8

08000d18 <timefortopbottom>:

void timefortopbottom(int num0, int num1){
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
	if (enable_trigger == 0){
 8000d22:	4b14      	ldr	r3, [pc, #80]	; (8000d74 <timefortopbottom+0x5c>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d10e      	bne.n	8000d48 <timefortopbottom+0x30>
		HAL_GPIO_WritePin(en0_GPIO_Port, en0_Pin, RESET);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2180      	movs	r1, #128	; 0x80
 8000d2e:	4812      	ldr	r0, [pc, #72]	; (8000d78 <timefortopbottom+0x60>)
 8000d30:	f001 f95d 	bl	8001fee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(en1_GPIO_Port, en1_Pin, SET);
 8000d34:	2201      	movs	r2, #1
 8000d36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d3a:	480f      	ldr	r0, [pc, #60]	; (8000d78 <timefortopbottom+0x60>)
 8000d3c:	f001 f957 	bl	8001fee <HAL_GPIO_WritePin>
		display7SEGtopbottom(num0);
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f7ff fb35 	bl	80003b0 <display7SEGtopbottom>
	else if (enable_trigger == 1){
		HAL_GPIO_WritePin(en0_GPIO_Port, en0_Pin, SET);
		HAL_GPIO_WritePin(en1_GPIO_Port, en1_Pin, RESET);
		display7SEGtopbottom(num1);
	}
}
 8000d46:	e011      	b.n	8000d6c <timefortopbottom+0x54>
	else if (enable_trigger == 1){
 8000d48:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <timefortopbottom+0x5c>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d10d      	bne.n	8000d6c <timefortopbottom+0x54>
		HAL_GPIO_WritePin(en0_GPIO_Port, en0_Pin, SET);
 8000d50:	2201      	movs	r2, #1
 8000d52:	2180      	movs	r1, #128	; 0x80
 8000d54:	4808      	ldr	r0, [pc, #32]	; (8000d78 <timefortopbottom+0x60>)
 8000d56:	f001 f94a 	bl	8001fee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(en1_GPIO_Port, en1_Pin, RESET);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d60:	4805      	ldr	r0, [pc, #20]	; (8000d78 <timefortopbottom+0x60>)
 8000d62:	f001 f944 	bl	8001fee <HAL_GPIO_WritePin>
		display7SEGtopbottom(num1);
 8000d66:	6838      	ldr	r0, [r7, #0]
 8000d68:	f7ff fb22 	bl	80003b0 <display7SEGtopbottom>
}
 8000d6c:	bf00      	nop
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20000084 	.word	0x20000084
 8000d78:	40010800 	.word	0x40010800

08000d7c <timeforleftright>:
void timeforleftright(int num0, int num1){
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
	if (enable_trigger == 0){
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <timeforleftright+0x60>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d10f      	bne.n	8000dae <timeforleftright+0x32>
		HAL_GPIO_WritePin(en2_GPIO_Port, en2_Pin, RESET);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d94:	4812      	ldr	r0, [pc, #72]	; (8000de0 <timeforleftright+0x64>)
 8000d96:	f001 f92a 	bl	8001fee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(en3_GPIO_Port, en3_Pin, SET);
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000da0:	480f      	ldr	r0, [pc, #60]	; (8000de0 <timeforleftright+0x64>)
 8000da2:	f001 f924 	bl	8001fee <HAL_GPIO_WritePin>
		display7SEGleftright(num0);
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f7ff fc92 	bl	80006d0 <display7SEGleftright>
	else if (enable_trigger == 1){
		HAL_GPIO_WritePin(en2_GPIO_Port, en2_Pin, SET);
		HAL_GPIO_WritePin(en3_GPIO_Port, en3_Pin, RESET);
		display7SEGleftright(num1);
	}
}
 8000dac:	e012      	b.n	8000dd4 <timeforleftright+0x58>
	else if (enable_trigger == 1){
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <timeforleftright+0x60>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d10e      	bne.n	8000dd4 <timeforleftright+0x58>
		HAL_GPIO_WritePin(en2_GPIO_Port, en2_Pin, SET);
 8000db6:	2201      	movs	r2, #1
 8000db8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dbc:	4808      	ldr	r0, [pc, #32]	; (8000de0 <timeforleftright+0x64>)
 8000dbe:	f001 f916 	bl	8001fee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(en3_GPIO_Port, en3_Pin, RESET);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dc8:	4805      	ldr	r0, [pc, #20]	; (8000de0 <timeforleftright+0x64>)
 8000dca:	f001 f910 	bl	8001fee <HAL_GPIO_WritePin>
		display7SEGleftright(num1);
 8000dce:	6838      	ldr	r0, [r7, #0]
 8000dd0:	f7ff fc7e 	bl	80006d0 <display7SEGleftright>
}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20000084 	.word	0x20000084
 8000de0:	40010800 	.word	0x40010800

08000de4 <fsm_auto>:
void fsm_auto(){
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
	int index_0 = 0; // used for 7seg topbottom
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
	int index_1 = 0; // used for 7seg topbottom
 8000dee:	2300      	movs	r3, #0
 8000df0:	60bb      	str	r3, [r7, #8]
	int index_2 = 0; // used for 7seg leftright
 8000df2:	2300      	movs	r3, #0
 8000df4:	607b      	str	r3, [r7, #4]
	int index_3 = 0; // used for 7seg leftright
 8000df6:	2300      	movs	r3, #0
 8000df8:	603b      	str	r3, [r7, #0]
	switch(status){
 8000dfa:	4b8e      	ldr	r3, [pc, #568]	; (8001034 <fsm_auto+0x250>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	3b0b      	subs	r3, #11
 8000e00:	2b04      	cmp	r3, #4
 8000e02:	f200 8112 	bhi.w	800102a <fsm_auto+0x246>
 8000e06:	a201      	add	r2, pc, #4	; (adr r2, 8000e0c <fsm_auto+0x28>)
 8000e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e0c:	08000e21 	.word	0x08000e21
 8000e10:	08000e4b 	.word	0x08000e4b
 8000e14:	08000ec3 	.word	0x08000ec3
 8000e18:	08000f3b 	.word	0x08000f3b
 8000e1c:	08000fb3 	.word	0x08000fb3
	case init:
		status = red_green;
 8000e20:	4b84      	ldr	r3, [pc, #528]	; (8001034 <fsm_auto+0x250>)
 8000e22:	220c      	movs	r2, #12
 8000e24:	601a      	str	r2, [r3, #0]
		update_countdown(red_green);
 8000e26:	200c      	movs	r0, #12
 8000e28:	f7ff fed4 	bl	8000bd4 <update_countdown>
		setTimer1(green_time); //time duration for 7segleg
 8000e2c:	4b82      	ldr	r3, [pc, #520]	; (8001038 <fsm_auto+0x254>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f000 fc81 	bl	8001738 <setTimer1>
		setTimer2(50); // time duration for enable trigger
 8000e36:	2032      	movs	r0, #50	; 0x32
 8000e38:	f000 fc92 	bl	8001760 <setTimer2>
		setTimer3(100); // time duration for reducing 1 second
 8000e3c:	2064      	movs	r0, #100	; 0x64
 8000e3e:	f000 fca3 	bl	8001788 <setTimer3>

		enable_trigger = 0;
 8000e42:	4b7e      	ldr	r3, [pc, #504]	; (800103c <fsm_auto+0x258>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
		break;
 8000e48:	e0ef      	b.n	800102a <fsm_auto+0x246>
	case red_green:
		led_turnon(red_led, topbottom);
 8000e4a:	217a      	movs	r1, #122	; 0x7a
 8000e4c:	205a      	movs	r0, #90	; 0x5a
 8000e4e:	f7ff fe0d 	bl	8000a6c <led_turnon>
		led_turnon(green_led, leftright);
 8000e52:	217b      	movs	r1, #123	; 0x7b
 8000e54:	205c      	movs	r0, #92	; 0x5c
 8000e56:	f7ff fe09 	bl	8000a6c <led_turnon>
		if (timer1_flag == 1){
 8000e5a:	4b79      	ldr	r3, [pc, #484]	; (8001040 <fsm_auto+0x25c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d10a      	bne.n	8000e78 <fsm_auto+0x94>
			status = red_yellow;
 8000e62:	4b74      	ldr	r3, [pc, #464]	; (8001034 <fsm_auto+0x250>)
 8000e64:	220d      	movs	r2, #13
 8000e66:	601a      	str	r2, [r3, #0]
			setTimer1(yellow_time);
 8000e68:	4b76      	ldr	r3, [pc, #472]	; (8001044 <fsm_auto+0x260>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f000 fc63 	bl	8001738 <setTimer1>
			update_countdown(red_yellow);
 8000e72:	200d      	movs	r0, #13
 8000e74:	f7ff feae 	bl	8000bd4 <update_countdown>
		}

		number_for2led(tmp_red, &index_0, &index_1);
 8000e78:	4b73      	ldr	r3, [pc, #460]	; (8001048 <fsm_auto+0x264>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f107 0208 	add.w	r2, r7, #8
 8000e80:	f107 010c 	add.w	r1, r7, #12
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff fe81 	bl	8000b8c <number_for2led>
		number_for2led(tmp_green, &index_2, &index_3);
 8000e8a:	4b70      	ldr	r3, [pc, #448]	; (800104c <fsm_auto+0x268>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	463a      	mov	r2, r7
 8000e90:	1d39      	adds	r1, r7, #4
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff fe7a 	bl	8000b8c <number_for2led>
		timefortopbottom(index_0, index_1);
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	68ba      	ldr	r2, [r7, #8]
 8000e9c:	4611      	mov	r1, r2
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff ff3a 	bl	8000d18 <timefortopbottom>
		timeforleftright(index_2, index_3);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	683a      	ldr	r2, [r7, #0]
 8000ea8:	4611      	mov	r1, r2
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff ff66 	bl	8000d7c <timeforleftright>
		enablechange();
 8000eb0:	f7ff fef8 	bl	8000ca4 <enablechange>
		timechange(&tmp_red, &tmp_green);
 8000eb4:	4965      	ldr	r1, [pc, #404]	; (800104c <fsm_auto+0x268>)
 8000eb6:	4864      	ldr	r0, [pc, #400]	; (8001048 <fsm_auto+0x264>)
 8000eb8:	f7ff ff12 	bl	8000ce0 <timechange>


		button1_check();
 8000ebc:	f000 f920 	bl	8001100 <button1_check>
		break;
 8000ec0:	e0b3      	b.n	800102a <fsm_auto+0x246>
	case red_yellow:
		led_turnon(red_led, topbottom);
 8000ec2:	217a      	movs	r1, #122	; 0x7a
 8000ec4:	205a      	movs	r0, #90	; 0x5a
 8000ec6:	f7ff fdd1 	bl	8000a6c <led_turnon>
		led_turnon(yellow_led, leftright);
 8000eca:	217b      	movs	r1, #123	; 0x7b
 8000ecc:	205b      	movs	r0, #91	; 0x5b
 8000ece:	f7ff fdcd 	bl	8000a6c <led_turnon>
		if (timer1_flag == 1){
 8000ed2:	4b5b      	ldr	r3, [pc, #364]	; (8001040 <fsm_auto+0x25c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d10a      	bne.n	8000ef0 <fsm_auto+0x10c>
			status = green_red;
 8000eda:	4b56      	ldr	r3, [pc, #344]	; (8001034 <fsm_auto+0x250>)
 8000edc:	220e      	movs	r2, #14
 8000ede:	601a      	str	r2, [r3, #0]
			setTimer1(green_time);
 8000ee0:	4b55      	ldr	r3, [pc, #340]	; (8001038 <fsm_auto+0x254>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f000 fc27 	bl	8001738 <setTimer1>
			update_countdown(green_red);
 8000eea:	200e      	movs	r0, #14
 8000eec:	f7ff fe72 	bl	8000bd4 <update_countdown>
		}

		number_for2led(tmp_red, &index_0, &index_1);
 8000ef0:	4b55      	ldr	r3, [pc, #340]	; (8001048 <fsm_auto+0x264>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f107 0208 	add.w	r2, r7, #8
 8000ef8:	f107 010c 	add.w	r1, r7, #12
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff fe45 	bl	8000b8c <number_for2led>
		number_for2led(tmp_yellow, &index_2, &index_3);
 8000f02:	4b53      	ldr	r3, [pc, #332]	; (8001050 <fsm_auto+0x26c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	463a      	mov	r2, r7
 8000f08:	1d39      	adds	r1, r7, #4
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff fe3e 	bl	8000b8c <number_for2led>

		timefortopbottom(index_0, index_1);
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	4611      	mov	r1, r2
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff fefe 	bl	8000d18 <timefortopbottom>
		timeforleftright(index_2, index_3);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	683a      	ldr	r2, [r7, #0]
 8000f20:	4611      	mov	r1, r2
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff ff2a 	bl	8000d7c <timeforleftright>

		enablechange();
 8000f28:	f7ff febc 	bl	8000ca4 <enablechange>
		timechange(&tmp_red, &tmp_yellow);
 8000f2c:	4948      	ldr	r1, [pc, #288]	; (8001050 <fsm_auto+0x26c>)
 8000f2e:	4846      	ldr	r0, [pc, #280]	; (8001048 <fsm_auto+0x264>)
 8000f30:	f7ff fed6 	bl	8000ce0 <timechange>

		button1_check();
 8000f34:	f000 f8e4 	bl	8001100 <button1_check>
		break;
 8000f38:	e077      	b.n	800102a <fsm_auto+0x246>
	case green_red:
		led_turnon(green_led, topbottom);
 8000f3a:	217a      	movs	r1, #122	; 0x7a
 8000f3c:	205c      	movs	r0, #92	; 0x5c
 8000f3e:	f7ff fd95 	bl	8000a6c <led_turnon>
		led_turnon(red_led, leftright);
 8000f42:	217b      	movs	r1, #123	; 0x7b
 8000f44:	205a      	movs	r0, #90	; 0x5a
 8000f46:	f7ff fd91 	bl	8000a6c <led_turnon>
		if (timer1_flag == 1){
 8000f4a:	4b3d      	ldr	r3, [pc, #244]	; (8001040 <fsm_auto+0x25c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d10a      	bne.n	8000f68 <fsm_auto+0x184>
			status = yellow_red;
 8000f52:	4b38      	ldr	r3, [pc, #224]	; (8001034 <fsm_auto+0x250>)
 8000f54:	220f      	movs	r2, #15
 8000f56:	601a      	str	r2, [r3, #0]
			setTimer1(yellow_time);
 8000f58:	4b3a      	ldr	r3, [pc, #232]	; (8001044 <fsm_auto+0x260>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f000 fbeb 	bl	8001738 <setTimer1>
			update_countdown(yellow_red);
 8000f62:	200f      	movs	r0, #15
 8000f64:	f7ff fe36 	bl	8000bd4 <update_countdown>
		}

		number_for2led(tmp_green, &index_0, &index_1);
 8000f68:	4b38      	ldr	r3, [pc, #224]	; (800104c <fsm_auto+0x268>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f107 0208 	add.w	r2, r7, #8
 8000f70:	f107 010c 	add.w	r1, r7, #12
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fe09 	bl	8000b8c <number_for2led>
		number_for2led(tmp_red, &index_2, &index_3);
 8000f7a:	4b33      	ldr	r3, [pc, #204]	; (8001048 <fsm_auto+0x264>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	463a      	mov	r2, r7
 8000f80:	1d39      	adds	r1, r7, #4
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff fe02 	bl	8000b8c <number_for2led>
		timefortopbottom(index_0, index_1);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	68ba      	ldr	r2, [r7, #8]
 8000f8c:	4611      	mov	r1, r2
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fec2 	bl	8000d18 <timefortopbottom>
		timeforleftright(index_2, index_3);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	683a      	ldr	r2, [r7, #0]
 8000f98:	4611      	mov	r1, r2
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff feee 	bl	8000d7c <timeforleftright>

		enablechange();
 8000fa0:	f7ff fe80 	bl	8000ca4 <enablechange>
		timechange(&tmp_green, &tmp_red);
 8000fa4:	4928      	ldr	r1, [pc, #160]	; (8001048 <fsm_auto+0x264>)
 8000fa6:	4829      	ldr	r0, [pc, #164]	; (800104c <fsm_auto+0x268>)
 8000fa8:	f7ff fe9a 	bl	8000ce0 <timechange>

		button1_check();
 8000fac:	f000 f8a8 	bl	8001100 <button1_check>
		break;
 8000fb0:	e03b      	b.n	800102a <fsm_auto+0x246>
	case yellow_red:
		led_turnon(yellow_led, topbottom);
 8000fb2:	217a      	movs	r1, #122	; 0x7a
 8000fb4:	205b      	movs	r0, #91	; 0x5b
 8000fb6:	f7ff fd59 	bl	8000a6c <led_turnon>
		led_turnon(red_led, leftright);
 8000fba:	217b      	movs	r1, #123	; 0x7b
 8000fbc:	205a      	movs	r0, #90	; 0x5a
 8000fbe:	f7ff fd55 	bl	8000a6c <led_turnon>
		if (timer1_flag == 1){
 8000fc2:	4b1f      	ldr	r3, [pc, #124]	; (8001040 <fsm_auto+0x25c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d10a      	bne.n	8000fe0 <fsm_auto+0x1fc>
			status = red_green;
 8000fca:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <fsm_auto+0x250>)
 8000fcc:	220c      	movs	r2, #12
 8000fce:	601a      	str	r2, [r3, #0]
			setTimer1(yellow_time);
 8000fd0:	4b1c      	ldr	r3, [pc, #112]	; (8001044 <fsm_auto+0x260>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f000 fbaf 	bl	8001738 <setTimer1>
			update_countdown(red_green);
 8000fda:	200c      	movs	r0, #12
 8000fdc:	f7ff fdfa 	bl	8000bd4 <update_countdown>
		}

		number_for2led(tmp_yellow, &index_0, &index_1);
 8000fe0:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <fsm_auto+0x26c>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f107 0208 	add.w	r2, r7, #8
 8000fe8:	f107 010c 	add.w	r1, r7, #12
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff fdcd 	bl	8000b8c <number_for2led>
		number_for2led(tmp_red, &index_2, &index_3);
 8000ff2:	4b15      	ldr	r3, [pc, #84]	; (8001048 <fsm_auto+0x264>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	463a      	mov	r2, r7
 8000ff8:	1d39      	adds	r1, r7, #4
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fdc6 	bl	8000b8c <number_for2led>

		timefortopbottom(index_0, index_1);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	68ba      	ldr	r2, [r7, #8]
 8001004:	4611      	mov	r1, r2
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff fe86 	bl	8000d18 <timefortopbottom>
		timeforleftright(index_2, index_3);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	683a      	ldr	r2, [r7, #0]
 8001010:	4611      	mov	r1, r2
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff feb2 	bl	8000d7c <timeforleftright>

		enablechange();
 8001018:	f7ff fe44 	bl	8000ca4 <enablechange>
		timechange(&tmp_yellow, &tmp_red);
 800101c:	490a      	ldr	r1, [pc, #40]	; (8001048 <fsm_auto+0x264>)
 800101e:	480c      	ldr	r0, [pc, #48]	; (8001050 <fsm_auto+0x26c>)
 8001020:	f7ff fe5e 	bl	8000ce0 <timechange>


		button1_check();
 8001024:	f000 f86c 	bl	8001100 <button1_check>
		break;
 8001028:	bf00      	nop

	}
}
 800102a:	bf00      	nop
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000034 	.word	0x20000034
 8001038:	20000040 	.word	0x20000040
 800103c:	20000084 	.word	0x20000084
 8001040:	20000098 	.word	0x20000098
 8001044:	2000003c 	.word	0x2000003c
 8001048:	20000078 	.word	0x20000078
 800104c:	20000080 	.word	0x20000080
 8001050:	2000007c 	.word	0x2000007c

08001054 <led_time_saved>:
#include "fsm_manual.h"
int red_his = 0;
int yellow_his = 0;
int green_his = 0;

void led_time_saved(){
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
	red_his = red_time/100;
 8001058:	4b10      	ldr	r3, [pc, #64]	; (800109c <led_time_saved+0x48>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a10      	ldr	r2, [pc, #64]	; (80010a0 <led_time_saved+0x4c>)
 800105e:	fb82 1203 	smull	r1, r2, r2, r3
 8001062:	1152      	asrs	r2, r2, #5
 8001064:	17db      	asrs	r3, r3, #31
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	4a0e      	ldr	r2, [pc, #56]	; (80010a4 <led_time_saved+0x50>)
 800106a:	6013      	str	r3, [r2, #0]
	yellow_his = yellow_time/100;
 800106c:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <led_time_saved+0x54>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a0b      	ldr	r2, [pc, #44]	; (80010a0 <led_time_saved+0x4c>)
 8001072:	fb82 1203 	smull	r1, r2, r2, r3
 8001076:	1152      	asrs	r2, r2, #5
 8001078:	17db      	asrs	r3, r3, #31
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	4a0b      	ldr	r2, [pc, #44]	; (80010ac <led_time_saved+0x58>)
 800107e:	6013      	str	r3, [r2, #0]
	green_his = green_time/100;
 8001080:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <led_time_saved+0x5c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a06      	ldr	r2, [pc, #24]	; (80010a0 <led_time_saved+0x4c>)
 8001086:	fb82 1203 	smull	r1, r2, r2, r3
 800108a:	1152      	asrs	r2, r2, #5
 800108c:	17db      	asrs	r3, r3, #31
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	4a08      	ldr	r2, [pc, #32]	; (80010b4 <led_time_saved+0x60>)
 8001092:	6013      	str	r3, [r2, #0]
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr
 800109c:	20000038 	.word	0x20000038
 80010a0:	51eb851f 	.word	0x51eb851f
 80010a4:	20000088 	.word	0x20000088
 80010a8:	2000003c 	.word	0x2000003c
 80010ac:	2000008c 	.word	0x2000008c
 80010b0:	20000040 	.word	0x20000040
 80010b4:	20000090 	.word	0x20000090

080010b8 <turnoff_leds>:

void turnoff_leds(){
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, SET);
 80010bc:	2201      	movs	r2, #1
 80010be:	2102      	movs	r1, #2
 80010c0:	480e      	ldr	r0, [pc, #56]	; (80010fc <turnoff_leds+0x44>)
 80010c2:	f000 ff94 	bl	8001fee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, SET);
 80010c6:	2201      	movs	r2, #1
 80010c8:	2104      	movs	r1, #4
 80010ca:	480c      	ldr	r0, [pc, #48]	; (80010fc <turnoff_leds+0x44>)
 80010cc:	f000 ff8f 	bl	8001fee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, SET);
 80010d0:	2201      	movs	r2, #1
 80010d2:	2108      	movs	r1, #8
 80010d4:	4809      	ldr	r0, [pc, #36]	; (80010fc <turnoff_leds+0x44>)
 80010d6:	f000 ff8a 	bl	8001fee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, SET);
 80010da:	2201      	movs	r2, #1
 80010dc:	2110      	movs	r1, #16
 80010de:	4807      	ldr	r0, [pc, #28]	; (80010fc <turnoff_leds+0x44>)
 80010e0:	f000 ff85 	bl	8001fee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, SET);
 80010e4:	2201      	movs	r2, #1
 80010e6:	2120      	movs	r1, #32
 80010e8:	4804      	ldr	r0, [pc, #16]	; (80010fc <turnoff_leds+0x44>)
 80010ea:	f000 ff80 	bl	8001fee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, SET);
 80010ee:	2201      	movs	r2, #1
 80010f0:	2140      	movs	r1, #64	; 0x40
 80010f2:	4802      	ldr	r0, [pc, #8]	; (80010fc <turnoff_leds+0x44>)
 80010f4:	f000 ff7b 	bl	8001fee <HAL_GPIO_WritePin>
}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40010800 	.word	0x40010800

08001100 <button1_check>:
void button1_check(){
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	if (isButton1Pressed() == 1){
 8001104:	f7ff f822 	bl	800014c <isButton1Pressed>
 8001108:	4603      	mov	r3, r0
 800110a:	2b01      	cmp	r3, #1
 800110c:	d128      	bne.n	8001160 <button1_check+0x60>
		tmp_red = 1;
 800110e:	4b15      	ldr	r3, [pc, #84]	; (8001164 <button1_check+0x64>)
 8001110:	2201      	movs	r2, #1
 8001112:	601a      	str	r2, [r3, #0]
		tmp_yellow= 1;
 8001114:	4b14      	ldr	r3, [pc, #80]	; (8001168 <button1_check+0x68>)
 8001116:	2201      	movs	r2, #1
 8001118:	601a      	str	r2, [r3, #0]
		tmp_green = 1;
 800111a:	4b14      	ldr	r3, [pc, #80]	; (800116c <button1_check+0x6c>)
 800111c:	2201      	movs	r2, #1
 800111e:	601a      	str	r2, [r3, #0]
		turnoff_leds();
 8001120:	f7ff ffca 	bl	80010b8 <turnoff_leds>
		setTimer4(50); // time duration for blinking led (used for blinky led file)
 8001124:	2032      	movs	r0, #50	; 0x32
 8001126:	f000 fb43 	bl	80017b0 <setTimer4>
		if (status == mode_2) status = mode_3;
 800112a:	4b11      	ldr	r3, [pc, #68]	; (8001170 <button1_check+0x70>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2b52      	cmp	r3, #82	; 0x52
 8001130:	d103      	bne.n	800113a <button1_check+0x3a>
 8001132:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <button1_check+0x70>)
 8001134:	2253      	movs	r2, #83	; 0x53
 8001136:	601a      	str	r2, [r3, #0]
		else if (status == mode_4) status = init;
		else status = mode_2;

	}

}
 8001138:	e012      	b.n	8001160 <button1_check+0x60>
		else if (status == mode_3) status = mode_4;
 800113a:	4b0d      	ldr	r3, [pc, #52]	; (8001170 <button1_check+0x70>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2b53      	cmp	r3, #83	; 0x53
 8001140:	d103      	bne.n	800114a <button1_check+0x4a>
 8001142:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <button1_check+0x70>)
 8001144:	2254      	movs	r2, #84	; 0x54
 8001146:	601a      	str	r2, [r3, #0]
}
 8001148:	e00a      	b.n	8001160 <button1_check+0x60>
		else if (status == mode_4) status = init;
 800114a:	4b09      	ldr	r3, [pc, #36]	; (8001170 <button1_check+0x70>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2b54      	cmp	r3, #84	; 0x54
 8001150:	d103      	bne.n	800115a <button1_check+0x5a>
 8001152:	4b07      	ldr	r3, [pc, #28]	; (8001170 <button1_check+0x70>)
 8001154:	220b      	movs	r2, #11
 8001156:	601a      	str	r2, [r3, #0]
}
 8001158:	e002      	b.n	8001160 <button1_check+0x60>
		else status = mode_2;
 800115a:	4b05      	ldr	r3, [pc, #20]	; (8001170 <button1_check+0x70>)
 800115c:	2252      	movs	r2, #82	; 0x52
 800115e:	601a      	str	r2, [r3, #0]
}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000078 	.word	0x20000078
 8001168:	2000007c 	.word	0x2000007c
 800116c:	20000080 	.word	0x20000080
 8001170:	20000034 	.word	0x20000034

08001174 <button2_check>:

void button2_check(){
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
	if (isButton2Pressed() == 1){
 8001178:	f7fe fffa 	bl	8000170 <isButton2Pressed>
 800117c:	4603      	mov	r3, r0
 800117e:	2b01      	cmp	r3, #1
 8001180:	d131      	bne.n	80011e6 <button2_check+0x72>
		if (status == mode_2){
 8001182:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <button2_check+0x78>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2b52      	cmp	r3, #82	; 0x52
 8001188:	d10c      	bne.n	80011a4 <button2_check+0x30>
			tmp_red ++;
 800118a:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <button2_check+0x7c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	3301      	adds	r3, #1
 8001190:	4a17      	ldr	r2, [pc, #92]	; (80011f0 <button2_check+0x7c>)
 8001192:	6013      	str	r3, [r2, #0]
			if (tmp_red > 99) tmp_red = 99;
 8001194:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <button2_check+0x7c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b63      	cmp	r3, #99	; 0x63
 800119a:	dd24      	ble.n	80011e6 <button2_check+0x72>
 800119c:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <button2_check+0x7c>)
 800119e:	2263      	movs	r2, #99	; 0x63
 80011a0:	601a      	str	r2, [r3, #0]
		else if (status == mode_4){
			tmp_green ++;
			if (tmp_green > 99) tmp_green = 99;
		}
	}
}
 80011a2:	e020      	b.n	80011e6 <button2_check+0x72>
		else if (status == mode_3){
 80011a4:	4b11      	ldr	r3, [pc, #68]	; (80011ec <button2_check+0x78>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2b53      	cmp	r3, #83	; 0x53
 80011aa:	d10c      	bne.n	80011c6 <button2_check+0x52>
			tmp_yellow ++;
 80011ac:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <button2_check+0x80>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	3301      	adds	r3, #1
 80011b2:	4a10      	ldr	r2, [pc, #64]	; (80011f4 <button2_check+0x80>)
 80011b4:	6013      	str	r3, [r2, #0]
			if (tmp_yellow > 99) tmp_yellow = 99;
 80011b6:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <button2_check+0x80>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2b63      	cmp	r3, #99	; 0x63
 80011bc:	dd13      	ble.n	80011e6 <button2_check+0x72>
 80011be:	4b0d      	ldr	r3, [pc, #52]	; (80011f4 <button2_check+0x80>)
 80011c0:	2263      	movs	r2, #99	; 0x63
 80011c2:	601a      	str	r2, [r3, #0]
}
 80011c4:	e00f      	b.n	80011e6 <button2_check+0x72>
		else if (status == mode_4){
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <button2_check+0x78>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2b54      	cmp	r3, #84	; 0x54
 80011cc:	d10b      	bne.n	80011e6 <button2_check+0x72>
			tmp_green ++;
 80011ce:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <button2_check+0x84>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	3301      	adds	r3, #1
 80011d4:	4a08      	ldr	r2, [pc, #32]	; (80011f8 <button2_check+0x84>)
 80011d6:	6013      	str	r3, [r2, #0]
			if (tmp_green > 99) tmp_green = 99;
 80011d8:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <button2_check+0x84>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b63      	cmp	r3, #99	; 0x63
 80011de:	dd02      	ble.n	80011e6 <button2_check+0x72>
 80011e0:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <button2_check+0x84>)
 80011e2:	2263      	movs	r2, #99	; 0x63
 80011e4:	601a      	str	r2, [r3, #0]
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000034 	.word	0x20000034
 80011f0:	20000078 	.word	0x20000078
 80011f4:	2000007c 	.word	0x2000007c
 80011f8:	20000080 	.word	0x20000080

080011fc <button3_check>:

void button3_check(){
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
	if (isButton3Pressed() == 1){
 8001200:	f7fe ffc8 	bl	8000194 <isButton3Pressed>
 8001204:	4603      	mov	r3, r0
 8001206:	2b01      	cmp	r3, #1
 8001208:	d122      	bne.n	8001250 <button3_check+0x54>
		if (status == mode_2){
 800120a:	4b12      	ldr	r3, [pc, #72]	; (8001254 <button3_check+0x58>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2b52      	cmp	r3, #82	; 0x52
 8001210:	d107      	bne.n	8001222 <button3_check+0x26>
			red_time = tmp_red*100;
 8001212:	4b11      	ldr	r3, [pc, #68]	; (8001258 <button3_check+0x5c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2264      	movs	r2, #100	; 0x64
 8001218:	fb02 f303 	mul.w	r3, r2, r3
 800121c:	4a0f      	ldr	r2, [pc, #60]	; (800125c <button3_check+0x60>)
 800121e:	6013      	str	r3, [r2, #0]
		}
		else if (status == mode_4){
			green_time = tmp_green*100;
		}
	}
}
 8001220:	e016      	b.n	8001250 <button3_check+0x54>
		else if (status == mode_3){
 8001222:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <button3_check+0x58>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2b53      	cmp	r3, #83	; 0x53
 8001228:	d107      	bne.n	800123a <button3_check+0x3e>
			yellow_time = tmp_yellow*100;
 800122a:	4b0d      	ldr	r3, [pc, #52]	; (8001260 <button3_check+0x64>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2264      	movs	r2, #100	; 0x64
 8001230:	fb02 f303 	mul.w	r3, r2, r3
 8001234:	4a0b      	ldr	r2, [pc, #44]	; (8001264 <button3_check+0x68>)
 8001236:	6013      	str	r3, [r2, #0]
}
 8001238:	e00a      	b.n	8001250 <button3_check+0x54>
		else if (status == mode_4){
 800123a:	4b06      	ldr	r3, [pc, #24]	; (8001254 <button3_check+0x58>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2b54      	cmp	r3, #84	; 0x54
 8001240:	d106      	bne.n	8001250 <button3_check+0x54>
			green_time = tmp_green*100;
 8001242:	4b09      	ldr	r3, [pc, #36]	; (8001268 <button3_check+0x6c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2264      	movs	r2, #100	; 0x64
 8001248:	fb02 f303 	mul.w	r3, r2, r3
 800124c:	4a07      	ldr	r2, [pc, #28]	; (800126c <button3_check+0x70>)
 800124e:	6013      	str	r3, [r2, #0]
}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000034 	.word	0x20000034
 8001258:	20000078 	.word	0x20000078
 800125c:	20000038 	.word	0x20000038
 8001260:	2000007c 	.word	0x2000007c
 8001264:	2000003c 	.word	0x2000003c
 8001268:	20000080 	.word	0x20000080
 800126c:	20000040 	.word	0x20000040

08001270 <blinky_red_led>:

void blinky_red_led(){
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	if (timer4_flag == 1){
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <blinky_red_led+0x28>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d10a      	bne.n	8001292 <blinky_red_led+0x22>
		setTimer4(50);
 800127c:	2032      	movs	r0, #50	; 0x32
 800127e:	f000 fa97 	bl	80017b0 <setTimer4>
		HAL_GPIO_TogglePin(red1_GPIO_Port, red1_Pin);
 8001282:	2102      	movs	r1, #2
 8001284:	4805      	ldr	r0, [pc, #20]	; (800129c <blinky_red_led+0x2c>)
 8001286:	f000 feca 	bl	800201e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(red2_GPIO_Port, red2_Pin);
 800128a:	2110      	movs	r1, #16
 800128c:	4803      	ldr	r0, [pc, #12]	; (800129c <blinky_red_led+0x2c>)
 800128e:	f000 fec6 	bl	800201e <HAL_GPIO_TogglePin>
	}
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	200000b0 	.word	0x200000b0
 800129c:	40010800 	.word	0x40010800

080012a0 <blinky_yellow_led>:
void blinky_yellow_led(){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
	if (timer4_flag == 1){
 80012a4:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <blinky_yellow_led+0x28>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d10a      	bne.n	80012c2 <blinky_yellow_led+0x22>
		setTimer4(50);
 80012ac:	2032      	movs	r0, #50	; 0x32
 80012ae:	f000 fa7f 	bl	80017b0 <setTimer4>
		HAL_GPIO_TogglePin(yellow1_GPIO_Port, yellow1_Pin);
 80012b2:	2104      	movs	r1, #4
 80012b4:	4805      	ldr	r0, [pc, #20]	; (80012cc <blinky_yellow_led+0x2c>)
 80012b6:	f000 feb2 	bl	800201e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(yellow2_GPIO_Port, yellow2_Pin);
 80012ba:	2120      	movs	r1, #32
 80012bc:	4803      	ldr	r0, [pc, #12]	; (80012cc <blinky_yellow_led+0x2c>)
 80012be:	f000 feae 	bl	800201e <HAL_GPIO_TogglePin>
	}
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	200000b0 	.word	0x200000b0
 80012cc:	40010800 	.word	0x40010800

080012d0 <blinky_green_led>:
void blinky_green_led(){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
	if (timer4_flag == 1){
 80012d4:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <blinky_green_led+0x28>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d10a      	bne.n	80012f2 <blinky_green_led+0x22>
		setTimer4(50);
 80012dc:	2032      	movs	r0, #50	; 0x32
 80012de:	f000 fa67 	bl	80017b0 <setTimer4>
		HAL_GPIO_TogglePin(green1_GPIO_Port, green1_Pin);
 80012e2:	2108      	movs	r1, #8
 80012e4:	4805      	ldr	r0, [pc, #20]	; (80012fc <blinky_green_led+0x2c>)
 80012e6:	f000 fe9a 	bl	800201e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(green2_GPIO_Port, green2_Pin);
 80012ea:	2140      	movs	r1, #64	; 0x40
 80012ec:	4803      	ldr	r0, [pc, #12]	; (80012fc <blinky_green_led+0x2c>)
 80012ee:	f000 fe96 	bl	800201e <HAL_GPIO_TogglePin>
	}
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	200000b0 	.word	0x200000b0
 80012fc:	40010800 	.word	0x40010800

08001300 <check_time_valid>:

void check_time_valid(){
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
	int red_t = red_time/100;
 8001306:	4b39      	ldr	r3, [pc, #228]	; (80013ec <check_time_valid+0xec>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a39      	ldr	r2, [pc, #228]	; (80013f0 <check_time_valid+0xf0>)
 800130c:	fb82 1203 	smull	r1, r2, r2, r3
 8001310:	1152      	asrs	r2, r2, #5
 8001312:	17db      	asrs	r3, r3, #31
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	60fb      	str	r3, [r7, #12]
	int yellow_t = yellow_time/100;
 8001318:	4b36      	ldr	r3, [pc, #216]	; (80013f4 <check_time_valid+0xf4>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a34      	ldr	r2, [pc, #208]	; (80013f0 <check_time_valid+0xf0>)
 800131e:	fb82 1203 	smull	r1, r2, r2, r3
 8001322:	1152      	asrs	r2, r2, #5
 8001324:	17db      	asrs	r3, r3, #31
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	60bb      	str	r3, [r7, #8]
	int green_t = green_time/100;
 800132a:	4b33      	ldr	r3, [pc, #204]	; (80013f8 <check_time_valid+0xf8>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a30      	ldr	r2, [pc, #192]	; (80013f0 <check_time_valid+0xf0>)
 8001330:	fb82 1203 	smull	r1, r2, r2, r3
 8001334:	1152      	asrs	r2, r2, #5
 8001336:	17db      	asrs	r3, r3, #31
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	607b      	str	r3, [r7, #4]

	if (red_t == 1 || yellow_t == 1 || green_t == 1){
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d005      	beq.n	800134e <check_time_valid+0x4e>
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d002      	beq.n	800134e <check_time_valid+0x4e>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d109      	bne.n	8001362 <check_time_valid+0x62>
		red_t = red_his;
 800134e:	4b2b      	ldr	r3, [pc, #172]	; (80013fc <check_time_valid+0xfc>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	60fb      	str	r3, [r7, #12]
		yellow_t = yellow_his;
 8001354:	4b2a      	ldr	r3, [pc, #168]	; (8001400 <check_time_valid+0x100>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	60bb      	str	r3, [r7, #8]
		green_t = green_his;
 800135a:	4b2a      	ldr	r3, [pc, #168]	; (8001404 <check_time_valid+0x104>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	e02d      	b.n	80013be <check_time_valid+0xbe>
	}
	else{
		if (red_t < (yellow_t + green_t)){
 8001362:	68ba      	ldr	r2, [r7, #8]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4413      	add	r3, r2
 8001368:	68fa      	ldr	r2, [r7, #12]
 800136a:	429a      	cmp	r2, r3
 800136c:	da04      	bge.n	8001378 <check_time_valid+0x78>
			red_t = yellow_t + green_t;
 800136e:	68ba      	ldr	r2, [r7, #8]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4413      	add	r3, r2
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	e018      	b.n	80013aa <check_time_valid+0xaa>
		}
		else if (red_t > (yellow_t + green_t)){
 8001378:	68ba      	ldr	r2, [r7, #8]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4413      	add	r3, r2
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	429a      	cmp	r2, r3
 8001382:	dd12      	ble.n	80013aa <check_time_valid+0xaa>
			if (yellow_t == yellow_his){
 8001384:	4b1e      	ldr	r3, [pc, #120]	; (8001400 <check_time_valid+0x100>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	68ba      	ldr	r2, [r7, #8]
 800138a:	429a      	cmp	r2, r3
 800138c:	d104      	bne.n	8001398 <check_time_valid+0x98>
				yellow_t = red_t - green_t;
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	e008      	b.n	80013aa <check_time_valid+0xaa>
			}
			else if (green_t == green_his){
 8001398:	4b1a      	ldr	r3, [pc, #104]	; (8001404 <check_time_valid+0x104>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	429a      	cmp	r2, r3
 80013a0:	d103      	bne.n	80013aa <check_time_valid+0xaa>
				green_t = red_t - yellow_t;
 80013a2:	68fa      	ldr	r2, [r7, #12]
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	607b      	str	r3, [r7, #4]
			}
		}
		if (yellow_t > green_t) {
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	dd05      	ble.n	80013be <check_time_valid+0xbe>
			int temp = yellow_t;
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	603b      	str	r3, [r7, #0]
			yellow_t = green_t;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	60bb      	str	r3, [r7, #8]
			green_t = temp;
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	607b      	str	r3, [r7, #4]
		}
	}

	red_time = red_t*100;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	2264      	movs	r2, #100	; 0x64
 80013c2:	fb02 f303 	mul.w	r3, r2, r3
 80013c6:	4a09      	ldr	r2, [pc, #36]	; (80013ec <check_time_valid+0xec>)
 80013c8:	6013      	str	r3, [r2, #0]
	yellow_time = yellow_t*100;
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	2264      	movs	r2, #100	; 0x64
 80013ce:	fb02 f303 	mul.w	r3, r2, r3
 80013d2:	4a08      	ldr	r2, [pc, #32]	; (80013f4 <check_time_valid+0xf4>)
 80013d4:	6013      	str	r3, [r2, #0]
	green_time = green_t*100;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2264      	movs	r2, #100	; 0x64
 80013da:	fb02 f303 	mul.w	r3, r2, r3
 80013de:	4a06      	ldr	r2, [pc, #24]	; (80013f8 <check_time_valid+0xf8>)
 80013e0:	6013      	str	r3, [r2, #0]
}
 80013e2:	bf00      	nop
 80013e4:	3714      	adds	r7, #20
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr
 80013ec:	20000038 	.word	0x20000038
 80013f0:	51eb851f 	.word	0x51eb851f
 80013f4:	2000003c 	.word	0x2000003c
 80013f8:	20000040 	.word	0x20000040
 80013fc:	20000088 	.word	0x20000088
 8001400:	2000008c 	.word	0x2000008c
 8001404:	20000090 	.word	0x20000090

08001408 <fsm_manual>:

void fsm_manual(){
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
	int index_0 = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	607b      	str	r3, [r7, #4]
	int index_1 = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	603b      	str	r3, [r7, #0]
	switch(status){
 8001416:	4b34      	ldr	r3, [pc, #208]	; (80014e8 <fsm_manual+0xe0>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b54      	cmp	r3, #84	; 0x54
 800141c:	d040      	beq.n	80014a0 <fsm_manual+0x98>
 800141e:	2b54      	cmp	r3, #84	; 0x54
 8001420:	dc5c      	bgt.n	80014dc <fsm_manual+0xd4>
 8001422:	2b52      	cmp	r3, #82	; 0x52
 8001424:	d002      	beq.n	800142c <fsm_manual+0x24>
 8001426:	2b53      	cmp	r3, #83	; 0x53
 8001428:	d01e      	beq.n	8001468 <fsm_manual+0x60>
		button3_check();

		check_time_valid();
		break;
	default:
		break;
 800142a:	e057      	b.n	80014dc <fsm_manual+0xd4>
		led_time_saved();
 800142c:	f7ff fe12 	bl	8001054 <led_time_saved>
		blinky_red_led();
 8001430:	f7ff ff1e 	bl	8001270 <blinky_red_led>
		number_for2led(tmp_red, &index_0, &index_1);
 8001434:	4b2d      	ldr	r3, [pc, #180]	; (80014ec <fsm_manual+0xe4>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	463a      	mov	r2, r7
 800143a:	1d39      	adds	r1, r7, #4
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff fba5 	bl	8000b8c <number_for2led>
		timefortopbottom(0, 2);
 8001442:	2102      	movs	r1, #2
 8001444:	2000      	movs	r0, #0
 8001446:	f7ff fc67 	bl	8000d18 <timefortopbottom>
		timeforleftright(index_0, index_1);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	4611      	mov	r1, r2
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff fc93 	bl	8000d7c <timeforleftright>
		enablechange();
 8001456:	f7ff fc25 	bl	8000ca4 <enablechange>
		button1_check();
 800145a:	f7ff fe51 	bl	8001100 <button1_check>
		button2_check();
 800145e:	f7ff fe89 	bl	8001174 <button2_check>
		button3_check();
 8001462:	f7ff fecb 	bl	80011fc <button3_check>
		break;
 8001466:	e03a      	b.n	80014de <fsm_manual+0xd6>
		blinky_yellow_led();
 8001468:	f7ff ff1a 	bl	80012a0 <blinky_yellow_led>
		number_for2led(tmp_yellow, &index_0, &index_1);
 800146c:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <fsm_manual+0xe8>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	463a      	mov	r2, r7
 8001472:	1d39      	adds	r1, r7, #4
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fb89 	bl	8000b8c <number_for2led>
		timefortopbottom(0, 3);
 800147a:	2103      	movs	r1, #3
 800147c:	2000      	movs	r0, #0
 800147e:	f7ff fc4b 	bl	8000d18 <timefortopbottom>
		timeforleftright(index_0, index_1);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	683a      	ldr	r2, [r7, #0]
 8001486:	4611      	mov	r1, r2
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff fc77 	bl	8000d7c <timeforleftright>
		enablechange();
 800148e:	f7ff fc09 	bl	8000ca4 <enablechange>
		button1_check();
 8001492:	f7ff fe35 	bl	8001100 <button1_check>
		button2_check();
 8001496:	f7ff fe6d 	bl	8001174 <button2_check>
		button3_check();
 800149a:	f7ff feaf 	bl	80011fc <button3_check>
		break;
 800149e:	e01e      	b.n	80014de <fsm_manual+0xd6>
		blinky_green_led();
 80014a0:	f7ff ff16 	bl	80012d0 <blinky_green_led>
		number_for2led(tmp_green, &index_0, &index_1);
 80014a4:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <fsm_manual+0xec>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	463a      	mov	r2, r7
 80014aa:	1d39      	adds	r1, r7, #4
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff fb6d 	bl	8000b8c <number_for2led>
		timefortopbottom(0, 4);
 80014b2:	2104      	movs	r1, #4
 80014b4:	2000      	movs	r0, #0
 80014b6:	f7ff fc2f 	bl	8000d18 <timefortopbottom>
		timeforleftright(index_0, index_1);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	683a      	ldr	r2, [r7, #0]
 80014be:	4611      	mov	r1, r2
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fc5b 	bl	8000d7c <timeforleftright>
		enablechange();
 80014c6:	f7ff fbed 	bl	8000ca4 <enablechange>
		button1_check();
 80014ca:	f7ff fe19 	bl	8001100 <button1_check>
		button2_check();
 80014ce:	f7ff fe51 	bl	8001174 <button2_check>
		button3_check();
 80014d2:	f7ff fe93 	bl	80011fc <button3_check>
		check_time_valid();
 80014d6:	f7ff ff13 	bl	8001300 <check_time_valid>
		break;
 80014da:	e000      	b.n	80014de <fsm_manual+0xd6>
		break;
 80014dc:	bf00      	nop
	}
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000034 	.word	0x20000034
 80014ec:	20000078 	.word	0x20000078
 80014f0:	2000007c 	.word	0x2000007c
 80014f4:	20000080 	.word	0x20000080

080014f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014fc:	f000 fa76 	bl	80019ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001500:	f000 f80e 	bl	8001520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001504:	f000 f894 	bl	8001630 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001508:	f000 f846 	bl	8001598 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start_IT(&htim2);
 800150c:	4803      	ldr	r0, [pc, #12]	; (800151c <main+0x24>)
 800150e:	f001 f9cb 	bl	80028a8 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_auto();
 8001512:	f7ff fc67 	bl	8000de4 <fsm_auto>
	  fsm_manual();
 8001516:	f7ff ff77 	bl	8001408 <fsm_manual>
	  fsm_auto();
 800151a:	e7fa      	b.n	8001512 <main+0x1a>
 800151c:	200000b4 	.word	0x200000b4

08001520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b090      	sub	sp, #64	; 0x40
 8001524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001526:	f107 0318 	add.w	r3, r7, #24
 800152a:	2228      	movs	r2, #40	; 0x28
 800152c:	2100      	movs	r1, #0
 800152e:	4618      	mov	r0, r3
 8001530:	f001 fd76 	bl	8003020 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001534:	1d3b      	adds	r3, r7, #4
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	60da      	str	r2, [r3, #12]
 8001540:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001542:	2302      	movs	r3, #2
 8001544:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001546:	2301      	movs	r3, #1
 8001548:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800154a:	2310      	movs	r3, #16
 800154c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800154e:	2300      	movs	r3, #0
 8001550:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001552:	f107 0318 	add.w	r3, r7, #24
 8001556:	4618      	mov	r0, r3
 8001558:	f000 fd7a 	bl	8002050 <HAL_RCC_OscConfig>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001562:	f000 f8e3 	bl	800172c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001566:	230f      	movs	r3, #15
 8001568:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800156a:	2300      	movs	r3, #0
 800156c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001576:	2300      	movs	r3, #0
 8001578:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	2100      	movs	r1, #0
 800157e:	4618      	mov	r0, r3
 8001580:	f000 ffe6 	bl	8002550 <HAL_RCC_ClockConfig>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800158a:	f000 f8cf 	bl	800172c <Error_Handler>
  }
}
 800158e:	bf00      	nop
 8001590:	3740      	adds	r7, #64	; 0x40
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800159e:	f107 0308 	add.w	r3, r7, #8
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	609a      	str	r2, [r3, #8]
 80015aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ac:	463b      	mov	r3, r7
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015b4:	4b1d      	ldr	r3, [pc, #116]	; (800162c <MX_TIM2_Init+0x94>)
 80015b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80015bc:	4b1b      	ldr	r3, [pc, #108]	; (800162c <MX_TIM2_Init+0x94>)
 80015be:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80015c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c4:	4b19      	ldr	r3, [pc, #100]	; (800162c <MX_TIM2_Init+0x94>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80015ca:	4b18      	ldr	r3, [pc, #96]	; (800162c <MX_TIM2_Init+0x94>)
 80015cc:	2209      	movs	r2, #9
 80015ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d0:	4b16      	ldr	r3, [pc, #88]	; (800162c <MX_TIM2_Init+0x94>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d6:	4b15      	ldr	r3, [pc, #84]	; (800162c <MX_TIM2_Init+0x94>)
 80015d8:	2200      	movs	r2, #0
 80015da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015dc:	4813      	ldr	r0, [pc, #76]	; (800162c <MX_TIM2_Init+0x94>)
 80015de:	f001 f913 	bl	8002808 <HAL_TIM_Base_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80015e8:	f000 f8a0 	bl	800172c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015f2:	f107 0308 	add.w	r3, r7, #8
 80015f6:	4619      	mov	r1, r3
 80015f8:	480c      	ldr	r0, [pc, #48]	; (800162c <MX_TIM2_Init+0x94>)
 80015fa:	f001 faa9 	bl	8002b50 <HAL_TIM_ConfigClockSource>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001604:	f000 f892 	bl	800172c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001608:	2300      	movs	r3, #0
 800160a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800160c:	2300      	movs	r3, #0
 800160e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001610:	463b      	mov	r3, r7
 8001612:	4619      	mov	r1, r3
 8001614:	4805      	ldr	r0, [pc, #20]	; (800162c <MX_TIM2_Init+0x94>)
 8001616:	f001 fc75 	bl	8002f04 <HAL_TIMEx_MasterConfigSynchronization>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001620:	f000 f884 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001624:	bf00      	nop
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	200000b4 	.word	0x200000b4

08001630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b088      	sub	sp, #32
 8001634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001636:	f107 0310 	add.w	r3, r7, #16
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	609a      	str	r2, [r3, #8]
 8001642:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001644:	4b2f      	ldr	r3, [pc, #188]	; (8001704 <MX_GPIO_Init+0xd4>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	4a2e      	ldr	r2, [pc, #184]	; (8001704 <MX_GPIO_Init+0xd4>)
 800164a:	f043 0310 	orr.w	r3, r3, #16
 800164e:	6193      	str	r3, [r2, #24]
 8001650:	4b2c      	ldr	r3, [pc, #176]	; (8001704 <MX_GPIO_Init+0xd4>)
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	f003 0310 	and.w	r3, r3, #16
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800165c:	4b29      	ldr	r3, [pc, #164]	; (8001704 <MX_GPIO_Init+0xd4>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	4a28      	ldr	r2, [pc, #160]	; (8001704 <MX_GPIO_Init+0xd4>)
 8001662:	f043 0304 	orr.w	r3, r3, #4
 8001666:	6193      	str	r3, [r2, #24]
 8001668:	4b26      	ldr	r3, [pc, #152]	; (8001704 <MX_GPIO_Init+0xd4>)
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	f003 0304 	and.w	r3, r3, #4
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001674:	4b23      	ldr	r3, [pc, #140]	; (8001704 <MX_GPIO_Init+0xd4>)
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	4a22      	ldr	r2, [pc, #136]	; (8001704 <MX_GPIO_Init+0xd4>)
 800167a:	f043 0308 	orr.w	r3, r3, #8
 800167e:	6193      	str	r3, [r2, #24]
 8001680:	4b20      	ldr	r3, [pc, #128]	; (8001704 <MX_GPIO_Init+0xd4>)
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	f003 0308 	and.w	r3, r3, #8
 8001688:	607b      	str	r3, [r7, #4]
 800168a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, red1_Pin|yellow1_Pin|green1_Pin|red2_Pin
 800168c:	2200      	movs	r2, #0
 800168e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8001692:	481d      	ldr	r0, [pc, #116]	; (8001708 <MX_GPIO_Init+0xd8>)
 8001694:	f000 fcab 	bl	8001fee <HAL_GPIO_WritePin>
                          |yellow2_Pin|green2_Pin|en0_Pin|en1_Pin
                          |en2_Pin|en3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a1_Pin|b1_Pin|c1_Pin|d2_Pin
 8001698:	2200      	movs	r2, #0
 800169a:	f643 71ff 	movw	r1, #16383	; 0x3fff
 800169e:	481b      	ldr	r0, [pc, #108]	; (800170c <MX_GPIO_Init+0xdc>)
 80016a0:	f000 fca5 	bl	8001fee <HAL_GPIO_WritePin>
                          |e2_Pin|f2_Pin|g2_Pin|d1_Pin
                          |e1_Pin|f1_Pin|g1_Pin|a2_Pin
                          |b2_Pin|c2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Button1_Pin Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin|Button3_Pin;
 80016a4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80016a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016ae:	2301      	movs	r3, #1
 80016b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016b2:	f107 0310 	add.w	r3, r7, #16
 80016b6:	4619      	mov	r1, r3
 80016b8:	4815      	ldr	r0, [pc, #84]	; (8001710 <MX_GPIO_Init+0xe0>)
 80016ba:	f000 fb07 	bl	8001ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : red1_Pin yellow1_Pin green1_Pin red2_Pin
                           yellow2_Pin green2_Pin en0_Pin en1_Pin
                           en2_Pin en3_Pin */
  GPIO_InitStruct.Pin = red1_Pin|yellow1_Pin|green1_Pin|red2_Pin
 80016be:	f240 73fe 	movw	r3, #2046	; 0x7fe
 80016c2:	613b      	str	r3, [r7, #16]
                          |yellow2_Pin|green2_Pin|en0_Pin|en1_Pin
                          |en2_Pin|en3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c4:	2301      	movs	r3, #1
 80016c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016cc:	2302      	movs	r3, #2
 80016ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d0:	f107 0310 	add.w	r3, r7, #16
 80016d4:	4619      	mov	r1, r3
 80016d6:	480c      	ldr	r0, [pc, #48]	; (8001708 <MX_GPIO_Init+0xd8>)
 80016d8:	f000 faf8 	bl	8001ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : a1_Pin b1_Pin c1_Pin d2_Pin
                           e2_Pin f2_Pin g2_Pin d1_Pin
                           e1_Pin f1_Pin g1_Pin a2_Pin
                           b2_Pin c2_Pin */
  GPIO_InitStruct.Pin = a1_Pin|b1_Pin|c1_Pin|d2_Pin
 80016dc:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80016e0:	613b      	str	r3, [r7, #16]
                          |e2_Pin|f2_Pin|g2_Pin|d1_Pin
                          |e1_Pin|f1_Pin|g1_Pin|a2_Pin
                          |b2_Pin|c2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e2:	2301      	movs	r3, #1
 80016e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ea:	2302      	movs	r3, #2
 80016ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ee:	f107 0310 	add.w	r3, r7, #16
 80016f2:	4619      	mov	r1, r3
 80016f4:	4805      	ldr	r0, [pc, #20]	; (800170c <MX_GPIO_Init+0xdc>)
 80016f6:	f000 fae9 	bl	8001ccc <HAL_GPIO_Init>

}
 80016fa:	bf00      	nop
 80016fc:	3720      	adds	r7, #32
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40021000 	.word	0x40021000
 8001708:	40010800 	.word	0x40010800
 800170c:	40010c00 	.word	0x40010c00
 8001710:	40011000 	.word	0x40011000

08001714 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
	timerRun();
 800171c:	f000 f85c 	bl	80017d8 <timerRun>
	getKeyinput();
 8001720:	f7fe fd6c 	bl	80001fc <getKeyinput>
}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001730:	b672      	cpsid	i
}
 8001732:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001734:	e7fe      	b.n	8001734 <Error_Handler+0x8>
	...

08001738 <setTimer1>:
int timer3_counter = 0;
int timer3_flag = 0;
int timer4_counter = 0;
int timer4_flag = 0;

void setTimer1(int duration){
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 8001740:	4a05      	ldr	r2, [pc, #20]	; (8001758 <setTimer1+0x20>)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001746:	4b05      	ldr	r3, [pc, #20]	; (800175c <setTimer1+0x24>)
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	20000094 	.word	0x20000094
 800175c:	20000098 	.word	0x20000098

08001760 <setTimer2>:
void setTimer2(int duration){
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 8001768:	4a05      	ldr	r2, [pc, #20]	; (8001780 <setTimer2+0x20>)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800176e:	4b05      	ldr	r3, [pc, #20]	; (8001784 <setTimer2+0x24>)
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	bc80      	pop	{r7}
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	2000009c 	.word	0x2000009c
 8001784:	200000a0 	.word	0x200000a0

08001788 <setTimer3>:
void setTimer3(int duration){
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 8001790:	4a05      	ldr	r2, [pc, #20]	; (80017a8 <setTimer3+0x20>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001796:	4b05      	ldr	r3, [pc, #20]	; (80017ac <setTimer3+0x24>)
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc80      	pop	{r7}
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	200000a4 	.word	0x200000a4
 80017ac:	200000a8 	.word	0x200000a8

080017b0 <setTimer4>:
void setTimer4(int duration){
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
	timer4_counter = duration;
 80017b8:	4a05      	ldr	r2, [pc, #20]	; (80017d0 <setTimer4+0x20>)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 80017be:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <setTimer4+0x24>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	200000ac 	.word	0x200000ac
 80017d4:	200000b0 	.word	0x200000b0

080017d8 <timerRun>:

void timerRun(){
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
	if (timer1_counter>0){
 80017dc:	4b21      	ldr	r3, [pc, #132]	; (8001864 <timerRun+0x8c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	dd0b      	ble.n	80017fc <timerRun+0x24>
		timer1_counter--;
 80017e4:	4b1f      	ldr	r3, [pc, #124]	; (8001864 <timerRun+0x8c>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	3b01      	subs	r3, #1
 80017ea:	4a1e      	ldr	r2, [pc, #120]	; (8001864 <timerRun+0x8c>)
 80017ec:	6013      	str	r3, [r2, #0]
		if (timer1_counter ==0 ){
 80017ee:	4b1d      	ldr	r3, [pc, #116]	; (8001864 <timerRun+0x8c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d102      	bne.n	80017fc <timerRun+0x24>
			timer1_flag = 1;
 80017f6:	4b1c      	ldr	r3, [pc, #112]	; (8001868 <timerRun+0x90>)
 80017f8:	2201      	movs	r2, #1
 80017fa:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter>0){
 80017fc:	4b1b      	ldr	r3, [pc, #108]	; (800186c <timerRun+0x94>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	dd0b      	ble.n	800181c <timerRun+0x44>
		timer2_counter--;
 8001804:	4b19      	ldr	r3, [pc, #100]	; (800186c <timerRun+0x94>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	3b01      	subs	r3, #1
 800180a:	4a18      	ldr	r2, [pc, #96]	; (800186c <timerRun+0x94>)
 800180c:	6013      	str	r3, [r2, #0]
		if (timer2_counter ==0 ){
 800180e:	4b17      	ldr	r3, [pc, #92]	; (800186c <timerRun+0x94>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d102      	bne.n	800181c <timerRun+0x44>
			timer2_flag = 1;
 8001816:	4b16      	ldr	r3, [pc, #88]	; (8001870 <timerRun+0x98>)
 8001818:	2201      	movs	r2, #1
 800181a:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer3_counter>0){
 800181c:	4b15      	ldr	r3, [pc, #84]	; (8001874 <timerRun+0x9c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	dd0b      	ble.n	800183c <timerRun+0x64>
		timer3_counter--;
 8001824:	4b13      	ldr	r3, [pc, #76]	; (8001874 <timerRun+0x9c>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	3b01      	subs	r3, #1
 800182a:	4a12      	ldr	r2, [pc, #72]	; (8001874 <timerRun+0x9c>)
 800182c:	6013      	str	r3, [r2, #0]
		if (timer3_counter ==0 ){
 800182e:	4b11      	ldr	r3, [pc, #68]	; (8001874 <timerRun+0x9c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d102      	bne.n	800183c <timerRun+0x64>
			timer3_flag = 1;
 8001836:	4b10      	ldr	r3, [pc, #64]	; (8001878 <timerRun+0xa0>)
 8001838:	2201      	movs	r2, #1
 800183a:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer4_counter>0){
 800183c:	4b0f      	ldr	r3, [pc, #60]	; (800187c <timerRun+0xa4>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	dd0b      	ble.n	800185c <timerRun+0x84>
		timer4_counter--;
 8001844:	4b0d      	ldr	r3, [pc, #52]	; (800187c <timerRun+0xa4>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	3b01      	subs	r3, #1
 800184a:	4a0c      	ldr	r2, [pc, #48]	; (800187c <timerRun+0xa4>)
 800184c:	6013      	str	r3, [r2, #0]
		if (timer4_counter ==0 ){
 800184e:	4b0b      	ldr	r3, [pc, #44]	; (800187c <timerRun+0xa4>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d102      	bne.n	800185c <timerRun+0x84>
			timer4_flag = 1;
 8001856:	4b0a      	ldr	r3, [pc, #40]	; (8001880 <timerRun+0xa8>)
 8001858:	2201      	movs	r2, #1
 800185a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr
 8001864:	20000094 	.word	0x20000094
 8001868:	20000098 	.word	0x20000098
 800186c:	2000009c 	.word	0x2000009c
 8001870:	200000a0 	.word	0x200000a0
 8001874:	200000a4 	.word	0x200000a4
 8001878:	200000a8 	.word	0x200000a8
 800187c:	200000ac 	.word	0x200000ac
 8001880:	200000b0 	.word	0x200000b0

08001884 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800188a:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <HAL_MspInit+0x5c>)
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	4a14      	ldr	r2, [pc, #80]	; (80018e0 <HAL_MspInit+0x5c>)
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	6193      	str	r3, [r2, #24]
 8001896:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <HAL_MspInit+0x5c>)
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	60bb      	str	r3, [r7, #8]
 80018a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018a2:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <HAL_MspInit+0x5c>)
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	4a0e      	ldr	r2, [pc, #56]	; (80018e0 <HAL_MspInit+0x5c>)
 80018a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ac:	61d3      	str	r3, [r2, #28]
 80018ae:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <HAL_MspInit+0x5c>)
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b6:	607b      	str	r3, [r7, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80018ba:	4b0a      	ldr	r3, [pc, #40]	; (80018e4 <HAL_MspInit+0x60>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	4a04      	ldr	r2, [pc, #16]	; (80018e4 <HAL_MspInit+0x60>)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018d6:	bf00      	nop
 80018d8:	3714      	adds	r7, #20
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr
 80018e0:	40021000 	.word	0x40021000
 80018e4:	40010000 	.word	0x40010000

080018e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018f8:	d113      	bne.n	8001922 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018fa:	4b0c      	ldr	r3, [pc, #48]	; (800192c <HAL_TIM_Base_MspInit+0x44>)
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	4a0b      	ldr	r2, [pc, #44]	; (800192c <HAL_TIM_Base_MspInit+0x44>)
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	61d3      	str	r3, [r2, #28]
 8001906:	4b09      	ldr	r3, [pc, #36]	; (800192c <HAL_TIM_Base_MspInit+0x44>)
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001912:	2200      	movs	r2, #0
 8001914:	2100      	movs	r1, #0
 8001916:	201c      	movs	r0, #28
 8001918:	f000 f9a1 	bl	8001c5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800191c:	201c      	movs	r0, #28
 800191e:	f000 f9ba 	bl	8001c96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001922:	bf00      	nop
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40021000 	.word	0x40021000

08001930 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001934:	e7fe      	b.n	8001934 <NMI_Handler+0x4>

08001936 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800193a:	e7fe      	b.n	800193a <HardFault_Handler+0x4>

0800193c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001940:	e7fe      	b.n	8001940 <MemManage_Handler+0x4>

08001942 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001946:	e7fe      	b.n	8001946 <BusFault_Handler+0x4>

08001948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800194c:	e7fe      	b.n	800194c <UsageFault_Handler+0x4>

0800194e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800194e:	b480      	push	{r7}
 8001950:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr

0800195a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	4770      	bx	lr

08001966 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001966:	b480      	push	{r7}
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	46bd      	mov	sp, r7
 800196e:	bc80      	pop	{r7}
 8001970:	4770      	bx	lr

08001972 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001976:	f000 f87f 	bl	8001a78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
	...

08001980 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001984:	4802      	ldr	r0, [pc, #8]	; (8001990 <TIM2_IRQHandler+0x10>)
 8001986:	f000 ffdb 	bl	8002940 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	200000b4 	.word	0x200000b4

08001994 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr

080019a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019a0:	f7ff fff8 	bl	8001994 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019a4:	480b      	ldr	r0, [pc, #44]	; (80019d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019a6:	490c      	ldr	r1, [pc, #48]	; (80019d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019a8:	4a0c      	ldr	r2, [pc, #48]	; (80019dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80019aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019ac:	e002      	b.n	80019b4 <LoopCopyDataInit>

080019ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019b2:	3304      	adds	r3, #4

080019b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019b8:	d3f9      	bcc.n	80019ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ba:	4a09      	ldr	r2, [pc, #36]	; (80019e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80019bc:	4c09      	ldr	r4, [pc, #36]	; (80019e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019c0:	e001      	b.n	80019c6 <LoopFillZerobss>

080019c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019c4:	3204      	adds	r2, #4

080019c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019c8:	d3fb      	bcc.n	80019c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ca:	f001 fb05 	bl	8002fd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019ce:	f7ff fd93 	bl	80014f8 <main>
  bx lr
 80019d2:	4770      	bx	lr
  ldr r0, =_sdata
 80019d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019d8:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 80019dc:	08003074 	.word	0x08003074
  ldr r2, =_sbss
 80019e0:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 80019e4:	20000100 	.word	0x20000100

080019e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019e8:	e7fe      	b.n	80019e8 <ADC1_2_IRQHandler>
	...

080019ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019f0:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <HAL_Init+0x28>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a07      	ldr	r2, [pc, #28]	; (8001a14 <HAL_Init+0x28>)
 80019f6:	f043 0310 	orr.w	r3, r3, #16
 80019fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019fc:	2003      	movs	r0, #3
 80019fe:	f000 f923 	bl	8001c48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a02:	200f      	movs	r0, #15
 8001a04:	f000 f808 	bl	8001a18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a08:	f7ff ff3c 	bl	8001884 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40022000 	.word	0x40022000

08001a18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a20:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <HAL_InitTick+0x54>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <HAL_InitTick+0x58>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a36:	4618      	mov	r0, r3
 8001a38:	f000 f93b 	bl	8001cb2 <HAL_SYSTICK_Config>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e00e      	b.n	8001a64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b0f      	cmp	r3, #15
 8001a4a:	d80a      	bhi.n	8001a62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	f04f 30ff 	mov.w	r0, #4294967295
 8001a54:	f000 f903 	bl	8001c5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a58:	4a06      	ldr	r2, [pc, #24]	; (8001a74 <HAL_InitTick+0x5c>)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	e000      	b.n	8001a64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20000044 	.word	0x20000044
 8001a70:	2000004c 	.word	0x2000004c
 8001a74:	20000048 	.word	0x20000048

08001a78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a7c:	4b05      	ldr	r3, [pc, #20]	; (8001a94 <HAL_IncTick+0x1c>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	461a      	mov	r2, r3
 8001a82:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <HAL_IncTick+0x20>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4413      	add	r3, r2
 8001a88:	4a03      	ldr	r2, [pc, #12]	; (8001a98 <HAL_IncTick+0x20>)
 8001a8a:	6013      	str	r3, [r2, #0]
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bc80      	pop	{r7}
 8001a92:	4770      	bx	lr
 8001a94:	2000004c 	.word	0x2000004c
 8001a98:	200000fc 	.word	0x200000fc

08001a9c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa0:	4b02      	ldr	r3, [pc, #8]	; (8001aac <HAL_GetTick+0x10>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr
 8001aac:	200000fc 	.word	0x200000fc

08001ab0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ac6:	68ba      	ldr	r2, [r7, #8]
 8001ac8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001acc:	4013      	ands	r3, r2
 8001ace:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ad8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ae2:	4a04      	ldr	r2, [pc, #16]	; (8001af4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	60d3      	str	r3, [r2, #12]
}
 8001ae8:	bf00      	nop
 8001aea:	3714      	adds	r7, #20
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc80      	pop	{r7}
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001afc:	4b04      	ldr	r3, [pc, #16]	; (8001b10 <__NVIC_GetPriorityGrouping+0x18>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	0a1b      	lsrs	r3, r3, #8
 8001b02:	f003 0307 	and.w	r3, r3, #7
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	db0b      	blt.n	8001b3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	f003 021f 	and.w	r2, r3, #31
 8001b2c:	4906      	ldr	r1, [pc, #24]	; (8001b48 <__NVIC_EnableIRQ+0x34>)
 8001b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b32:	095b      	lsrs	r3, r3, #5
 8001b34:	2001      	movs	r0, #1
 8001b36:	fa00 f202 	lsl.w	r2, r0, r2
 8001b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr
 8001b48:	e000e100 	.word	0xe000e100

08001b4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	6039      	str	r1, [r7, #0]
 8001b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	db0a      	blt.n	8001b76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	b2da      	uxtb	r2, r3
 8001b64:	490c      	ldr	r1, [pc, #48]	; (8001b98 <__NVIC_SetPriority+0x4c>)
 8001b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6a:	0112      	lsls	r2, r2, #4
 8001b6c:	b2d2      	uxtb	r2, r2
 8001b6e:	440b      	add	r3, r1
 8001b70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b74:	e00a      	b.n	8001b8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	4908      	ldr	r1, [pc, #32]	; (8001b9c <__NVIC_SetPriority+0x50>)
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	f003 030f 	and.w	r3, r3, #15
 8001b82:	3b04      	subs	r3, #4
 8001b84:	0112      	lsls	r2, r2, #4
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	440b      	add	r3, r1
 8001b8a:	761a      	strb	r2, [r3, #24]
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc80      	pop	{r7}
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	e000e100 	.word	0xe000e100
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b089      	sub	sp, #36	; 0x24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	f1c3 0307 	rsb	r3, r3, #7
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	bf28      	it	cs
 8001bbe:	2304      	movcs	r3, #4
 8001bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	2b06      	cmp	r3, #6
 8001bc8:	d902      	bls.n	8001bd0 <NVIC_EncodePriority+0x30>
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	3b03      	subs	r3, #3
 8001bce:	e000      	b.n	8001bd2 <NVIC_EncodePriority+0x32>
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43da      	mvns	r2, r3
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	401a      	ands	r2, r3
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001be8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf2:	43d9      	mvns	r1, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf8:	4313      	orrs	r3, r2
         );
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3724      	adds	r7, #36	; 0x24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr

08001c04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c14:	d301      	bcc.n	8001c1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c16:	2301      	movs	r3, #1
 8001c18:	e00f      	b.n	8001c3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c1a:	4a0a      	ldr	r2, [pc, #40]	; (8001c44 <SysTick_Config+0x40>)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c22:	210f      	movs	r1, #15
 8001c24:	f04f 30ff 	mov.w	r0, #4294967295
 8001c28:	f7ff ff90 	bl	8001b4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c2c:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <SysTick_Config+0x40>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c32:	4b04      	ldr	r3, [pc, #16]	; (8001c44 <SysTick_Config+0x40>)
 8001c34:	2207      	movs	r2, #7
 8001c36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	e000e010 	.word	0xe000e010

08001c48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7ff ff2d 	bl	8001ab0 <__NVIC_SetPriorityGrouping>
}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b086      	sub	sp, #24
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	4603      	mov	r3, r0
 8001c66:	60b9      	str	r1, [r7, #8]
 8001c68:	607a      	str	r2, [r7, #4]
 8001c6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c70:	f7ff ff42 	bl	8001af8 <__NVIC_GetPriorityGrouping>
 8001c74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	68b9      	ldr	r1, [r7, #8]
 8001c7a:	6978      	ldr	r0, [r7, #20]
 8001c7c:	f7ff ff90 	bl	8001ba0 <NVIC_EncodePriority>
 8001c80:	4602      	mov	r2, r0
 8001c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c86:	4611      	mov	r1, r2
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff ff5f 	bl	8001b4c <__NVIC_SetPriority>
}
 8001c8e:	bf00      	nop
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff ff35 	bl	8001b14 <__NVIC_EnableIRQ>
}
 8001caa:	bf00      	nop
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7ff ffa2 	bl	8001c04 <SysTick_Config>
 8001cc0:	4603      	mov	r3, r0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
	...

08001ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b08b      	sub	sp, #44	; 0x2c
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cde:	e148      	b.n	8001f72 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	69fa      	ldr	r2, [r7, #28]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	f040 8137 	bne.w	8001f6c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	4aa3      	ldr	r2, [pc, #652]	; (8001f90 <HAL_GPIO_Init+0x2c4>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d05e      	beq.n	8001dc6 <HAL_GPIO_Init+0xfa>
 8001d08:	4aa1      	ldr	r2, [pc, #644]	; (8001f90 <HAL_GPIO_Init+0x2c4>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d875      	bhi.n	8001dfa <HAL_GPIO_Init+0x12e>
 8001d0e:	4aa1      	ldr	r2, [pc, #644]	; (8001f94 <HAL_GPIO_Init+0x2c8>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d058      	beq.n	8001dc6 <HAL_GPIO_Init+0xfa>
 8001d14:	4a9f      	ldr	r2, [pc, #636]	; (8001f94 <HAL_GPIO_Init+0x2c8>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d86f      	bhi.n	8001dfa <HAL_GPIO_Init+0x12e>
 8001d1a:	4a9f      	ldr	r2, [pc, #636]	; (8001f98 <HAL_GPIO_Init+0x2cc>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d052      	beq.n	8001dc6 <HAL_GPIO_Init+0xfa>
 8001d20:	4a9d      	ldr	r2, [pc, #628]	; (8001f98 <HAL_GPIO_Init+0x2cc>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d869      	bhi.n	8001dfa <HAL_GPIO_Init+0x12e>
 8001d26:	4a9d      	ldr	r2, [pc, #628]	; (8001f9c <HAL_GPIO_Init+0x2d0>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d04c      	beq.n	8001dc6 <HAL_GPIO_Init+0xfa>
 8001d2c:	4a9b      	ldr	r2, [pc, #620]	; (8001f9c <HAL_GPIO_Init+0x2d0>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d863      	bhi.n	8001dfa <HAL_GPIO_Init+0x12e>
 8001d32:	4a9b      	ldr	r2, [pc, #620]	; (8001fa0 <HAL_GPIO_Init+0x2d4>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d046      	beq.n	8001dc6 <HAL_GPIO_Init+0xfa>
 8001d38:	4a99      	ldr	r2, [pc, #612]	; (8001fa0 <HAL_GPIO_Init+0x2d4>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d85d      	bhi.n	8001dfa <HAL_GPIO_Init+0x12e>
 8001d3e:	2b12      	cmp	r3, #18
 8001d40:	d82a      	bhi.n	8001d98 <HAL_GPIO_Init+0xcc>
 8001d42:	2b12      	cmp	r3, #18
 8001d44:	d859      	bhi.n	8001dfa <HAL_GPIO_Init+0x12e>
 8001d46:	a201      	add	r2, pc, #4	; (adr r2, 8001d4c <HAL_GPIO_Init+0x80>)
 8001d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d4c:	08001dc7 	.word	0x08001dc7
 8001d50:	08001da1 	.word	0x08001da1
 8001d54:	08001db3 	.word	0x08001db3
 8001d58:	08001df5 	.word	0x08001df5
 8001d5c:	08001dfb 	.word	0x08001dfb
 8001d60:	08001dfb 	.word	0x08001dfb
 8001d64:	08001dfb 	.word	0x08001dfb
 8001d68:	08001dfb 	.word	0x08001dfb
 8001d6c:	08001dfb 	.word	0x08001dfb
 8001d70:	08001dfb 	.word	0x08001dfb
 8001d74:	08001dfb 	.word	0x08001dfb
 8001d78:	08001dfb 	.word	0x08001dfb
 8001d7c:	08001dfb 	.word	0x08001dfb
 8001d80:	08001dfb 	.word	0x08001dfb
 8001d84:	08001dfb 	.word	0x08001dfb
 8001d88:	08001dfb 	.word	0x08001dfb
 8001d8c:	08001dfb 	.word	0x08001dfb
 8001d90:	08001da9 	.word	0x08001da9
 8001d94:	08001dbd 	.word	0x08001dbd
 8001d98:	4a82      	ldr	r2, [pc, #520]	; (8001fa4 <HAL_GPIO_Init+0x2d8>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d013      	beq.n	8001dc6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d9e:	e02c      	b.n	8001dfa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	623b      	str	r3, [r7, #32]
          break;
 8001da6:	e029      	b.n	8001dfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	3304      	adds	r3, #4
 8001dae:	623b      	str	r3, [r7, #32]
          break;
 8001db0:	e024      	b.n	8001dfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	3308      	adds	r3, #8
 8001db8:	623b      	str	r3, [r7, #32]
          break;
 8001dba:	e01f      	b.n	8001dfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	330c      	adds	r3, #12
 8001dc2:	623b      	str	r3, [r7, #32]
          break;
 8001dc4:	e01a      	b.n	8001dfc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d102      	bne.n	8001dd4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001dce:	2304      	movs	r3, #4
 8001dd0:	623b      	str	r3, [r7, #32]
          break;
 8001dd2:	e013      	b.n	8001dfc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d105      	bne.n	8001de8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ddc:	2308      	movs	r3, #8
 8001dde:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	69fa      	ldr	r2, [r7, #28]
 8001de4:	611a      	str	r2, [r3, #16]
          break;
 8001de6:	e009      	b.n	8001dfc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001de8:	2308      	movs	r3, #8
 8001dea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	69fa      	ldr	r2, [r7, #28]
 8001df0:	615a      	str	r2, [r3, #20]
          break;
 8001df2:	e003      	b.n	8001dfc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001df4:	2300      	movs	r3, #0
 8001df6:	623b      	str	r3, [r7, #32]
          break;
 8001df8:	e000      	b.n	8001dfc <HAL_GPIO_Init+0x130>
          break;
 8001dfa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	2bff      	cmp	r3, #255	; 0xff
 8001e00:	d801      	bhi.n	8001e06 <HAL_GPIO_Init+0x13a>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	e001      	b.n	8001e0a <HAL_GPIO_Init+0x13e>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	3304      	adds	r3, #4
 8001e0a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	2bff      	cmp	r3, #255	; 0xff
 8001e10:	d802      	bhi.n	8001e18 <HAL_GPIO_Init+0x14c>
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	e002      	b.n	8001e1e <HAL_GPIO_Init+0x152>
 8001e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1a:	3b08      	subs	r3, #8
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	210f      	movs	r1, #15
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	401a      	ands	r2, r3
 8001e30:	6a39      	ldr	r1, [r7, #32]
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	fa01 f303 	lsl.w	r3, r1, r3
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 8090 	beq.w	8001f6c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e4c:	4b56      	ldr	r3, [pc, #344]	; (8001fa8 <HAL_GPIO_Init+0x2dc>)
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	4a55      	ldr	r2, [pc, #340]	; (8001fa8 <HAL_GPIO_Init+0x2dc>)
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	6193      	str	r3, [r2, #24]
 8001e58:	4b53      	ldr	r3, [pc, #332]	; (8001fa8 <HAL_GPIO_Init+0x2dc>)
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	60bb      	str	r3, [r7, #8]
 8001e62:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e64:	4a51      	ldr	r2, [pc, #324]	; (8001fac <HAL_GPIO_Init+0x2e0>)
 8001e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e68:	089b      	lsrs	r3, r3, #2
 8001e6a:	3302      	adds	r3, #2
 8001e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e70:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e74:	f003 0303 	and.w	r3, r3, #3
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	220f      	movs	r2, #15
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	43db      	mvns	r3, r3
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	4013      	ands	r3, r2
 8001e86:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a49      	ldr	r2, [pc, #292]	; (8001fb0 <HAL_GPIO_Init+0x2e4>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d00d      	beq.n	8001eac <HAL_GPIO_Init+0x1e0>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a48      	ldr	r2, [pc, #288]	; (8001fb4 <HAL_GPIO_Init+0x2e8>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d007      	beq.n	8001ea8 <HAL_GPIO_Init+0x1dc>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a47      	ldr	r2, [pc, #284]	; (8001fb8 <HAL_GPIO_Init+0x2ec>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d101      	bne.n	8001ea4 <HAL_GPIO_Init+0x1d8>
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	e004      	b.n	8001eae <HAL_GPIO_Init+0x1e2>
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e002      	b.n	8001eae <HAL_GPIO_Init+0x1e2>
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e000      	b.n	8001eae <HAL_GPIO_Init+0x1e2>
 8001eac:	2300      	movs	r3, #0
 8001eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eb0:	f002 0203 	and.w	r2, r2, #3
 8001eb4:	0092      	lsls	r2, r2, #2
 8001eb6:	4093      	lsls	r3, r2
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ebe:	493b      	ldr	r1, [pc, #236]	; (8001fac <HAL_GPIO_Init+0x2e0>)
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec2:	089b      	lsrs	r3, r3, #2
 8001ec4:	3302      	adds	r3, #2
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d006      	beq.n	8001ee6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ed8:	4b38      	ldr	r3, [pc, #224]	; (8001fbc <HAL_GPIO_Init+0x2f0>)
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	4937      	ldr	r1, [pc, #220]	; (8001fbc <HAL_GPIO_Init+0x2f0>)
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	608b      	str	r3, [r1, #8]
 8001ee4:	e006      	b.n	8001ef4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ee6:	4b35      	ldr	r3, [pc, #212]	; (8001fbc <HAL_GPIO_Init+0x2f0>)
 8001ee8:	689a      	ldr	r2, [r3, #8]
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	43db      	mvns	r3, r3
 8001eee:	4933      	ldr	r1, [pc, #204]	; (8001fbc <HAL_GPIO_Init+0x2f0>)
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d006      	beq.n	8001f0e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f00:	4b2e      	ldr	r3, [pc, #184]	; (8001fbc <HAL_GPIO_Init+0x2f0>)
 8001f02:	68da      	ldr	r2, [r3, #12]
 8001f04:	492d      	ldr	r1, [pc, #180]	; (8001fbc <HAL_GPIO_Init+0x2f0>)
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	60cb      	str	r3, [r1, #12]
 8001f0c:	e006      	b.n	8001f1c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f0e:	4b2b      	ldr	r3, [pc, #172]	; (8001fbc <HAL_GPIO_Init+0x2f0>)
 8001f10:	68da      	ldr	r2, [r3, #12]
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	43db      	mvns	r3, r3
 8001f16:	4929      	ldr	r1, [pc, #164]	; (8001fbc <HAL_GPIO_Init+0x2f0>)
 8001f18:	4013      	ands	r3, r2
 8001f1a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d006      	beq.n	8001f36 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f28:	4b24      	ldr	r3, [pc, #144]	; (8001fbc <HAL_GPIO_Init+0x2f0>)
 8001f2a:	685a      	ldr	r2, [r3, #4]
 8001f2c:	4923      	ldr	r1, [pc, #140]	; (8001fbc <HAL_GPIO_Init+0x2f0>)
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	604b      	str	r3, [r1, #4]
 8001f34:	e006      	b.n	8001f44 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f36:	4b21      	ldr	r3, [pc, #132]	; (8001fbc <HAL_GPIO_Init+0x2f0>)
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	491f      	ldr	r1, [pc, #124]	; (8001fbc <HAL_GPIO_Init+0x2f0>)
 8001f40:	4013      	ands	r3, r2
 8001f42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d006      	beq.n	8001f5e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f50:	4b1a      	ldr	r3, [pc, #104]	; (8001fbc <HAL_GPIO_Init+0x2f0>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	4919      	ldr	r1, [pc, #100]	; (8001fbc <HAL_GPIO_Init+0x2f0>)
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	600b      	str	r3, [r1, #0]
 8001f5c:	e006      	b.n	8001f6c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f5e:	4b17      	ldr	r3, [pc, #92]	; (8001fbc <HAL_GPIO_Init+0x2f0>)
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	43db      	mvns	r3, r3
 8001f66:	4915      	ldr	r1, [pc, #84]	; (8001fbc <HAL_GPIO_Init+0x2f0>)
 8001f68:	4013      	ands	r3, r2
 8001f6a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6e:	3301      	adds	r3, #1
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	fa22 f303 	lsr.w	r3, r2, r3
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f47f aeaf 	bne.w	8001ce0 <HAL_GPIO_Init+0x14>
  }
}
 8001f82:	bf00      	nop
 8001f84:	bf00      	nop
 8001f86:	372c      	adds	r7, #44	; 0x2c
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bc80      	pop	{r7}
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	10320000 	.word	0x10320000
 8001f94:	10310000 	.word	0x10310000
 8001f98:	10220000 	.word	0x10220000
 8001f9c:	10210000 	.word	0x10210000
 8001fa0:	10120000 	.word	0x10120000
 8001fa4:	10110000 	.word	0x10110000
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	40010000 	.word	0x40010000
 8001fb0:	40010800 	.word	0x40010800
 8001fb4:	40010c00 	.word	0x40010c00
 8001fb8:	40011000 	.word	0x40011000
 8001fbc:	40010400 	.word	0x40010400

08001fc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	460b      	mov	r3, r1
 8001fca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	887b      	ldrh	r3, [r7, #2]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d002      	beq.n	8001fde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	73fb      	strb	r3, [r7, #15]
 8001fdc:	e001      	b.n	8001fe2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3714      	adds	r7, #20
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bc80      	pop	{r7}
 8001fec:	4770      	bx	lr

08001fee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b083      	sub	sp, #12
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	807b      	strh	r3, [r7, #2]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ffe:	787b      	ldrb	r3, [r7, #1]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d003      	beq.n	800200c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002004:	887a      	ldrh	r2, [r7, #2]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800200a:	e003      	b.n	8002014 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800200c:	887b      	ldrh	r3, [r7, #2]
 800200e:	041a      	lsls	r2, r3, #16
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	611a      	str	r2, [r3, #16]
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr

0800201e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800201e:	b480      	push	{r7}
 8002020:	b085      	sub	sp, #20
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
 8002026:	460b      	mov	r3, r1
 8002028:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002030:	887a      	ldrh	r2, [r7, #2]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	4013      	ands	r3, r2
 8002036:	041a      	lsls	r2, r3, #16
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	43d9      	mvns	r1, r3
 800203c:	887b      	ldrh	r3, [r7, #2]
 800203e:	400b      	ands	r3, r1
 8002040:	431a      	orrs	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	611a      	str	r2, [r3, #16]
}
 8002046:	bf00      	nop
 8002048:	3714      	adds	r7, #20
 800204a:	46bd      	mov	sp, r7
 800204c:	bc80      	pop	{r7}
 800204e:	4770      	bx	lr

08002050 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e26c      	b.n	800253c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b00      	cmp	r3, #0
 800206c:	f000 8087 	beq.w	800217e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002070:	4b92      	ldr	r3, [pc, #584]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f003 030c 	and.w	r3, r3, #12
 8002078:	2b04      	cmp	r3, #4
 800207a:	d00c      	beq.n	8002096 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800207c:	4b8f      	ldr	r3, [pc, #572]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f003 030c 	and.w	r3, r3, #12
 8002084:	2b08      	cmp	r3, #8
 8002086:	d112      	bne.n	80020ae <HAL_RCC_OscConfig+0x5e>
 8002088:	4b8c      	ldr	r3, [pc, #560]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002094:	d10b      	bne.n	80020ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002096:	4b89      	ldr	r3, [pc, #548]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d06c      	beq.n	800217c <HAL_RCC_OscConfig+0x12c>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d168      	bne.n	800217c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e246      	b.n	800253c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020b6:	d106      	bne.n	80020c6 <HAL_RCC_OscConfig+0x76>
 80020b8:	4b80      	ldr	r3, [pc, #512]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a7f      	ldr	r2, [pc, #508]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 80020be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c2:	6013      	str	r3, [r2, #0]
 80020c4:	e02e      	b.n	8002124 <HAL_RCC_OscConfig+0xd4>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d10c      	bne.n	80020e8 <HAL_RCC_OscConfig+0x98>
 80020ce:	4b7b      	ldr	r3, [pc, #492]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a7a      	ldr	r2, [pc, #488]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 80020d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020d8:	6013      	str	r3, [r2, #0]
 80020da:	4b78      	ldr	r3, [pc, #480]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a77      	ldr	r2, [pc, #476]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 80020e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	e01d      	b.n	8002124 <HAL_RCC_OscConfig+0xd4>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020f0:	d10c      	bne.n	800210c <HAL_RCC_OscConfig+0xbc>
 80020f2:	4b72      	ldr	r3, [pc, #456]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a71      	ldr	r2, [pc, #452]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 80020f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020fc:	6013      	str	r3, [r2, #0]
 80020fe:	4b6f      	ldr	r3, [pc, #444]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a6e      	ldr	r2, [pc, #440]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002108:	6013      	str	r3, [r2, #0]
 800210a:	e00b      	b.n	8002124 <HAL_RCC_OscConfig+0xd4>
 800210c:	4b6b      	ldr	r3, [pc, #428]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a6a      	ldr	r2, [pc, #424]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002112:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002116:	6013      	str	r3, [r2, #0]
 8002118:	4b68      	ldr	r3, [pc, #416]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a67      	ldr	r2, [pc, #412]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 800211e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002122:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d013      	beq.n	8002154 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212c:	f7ff fcb6 	bl	8001a9c <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002134:	f7ff fcb2 	bl	8001a9c <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b64      	cmp	r3, #100	; 0x64
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e1fa      	b.n	800253c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002146:	4b5d      	ldr	r3, [pc, #372]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d0f0      	beq.n	8002134 <HAL_RCC_OscConfig+0xe4>
 8002152:	e014      	b.n	800217e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002154:	f7ff fca2 	bl	8001a9c <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800215c:	f7ff fc9e 	bl	8001a9c <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b64      	cmp	r3, #100	; 0x64
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e1e6      	b.n	800253c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800216e:	4b53      	ldr	r3, [pc, #332]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1f0      	bne.n	800215c <HAL_RCC_OscConfig+0x10c>
 800217a:	e000      	b.n	800217e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800217c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d063      	beq.n	8002252 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800218a:	4b4c      	ldr	r3, [pc, #304]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f003 030c 	and.w	r3, r3, #12
 8002192:	2b00      	cmp	r3, #0
 8002194:	d00b      	beq.n	80021ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002196:	4b49      	ldr	r3, [pc, #292]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f003 030c 	and.w	r3, r3, #12
 800219e:	2b08      	cmp	r3, #8
 80021a0:	d11c      	bne.n	80021dc <HAL_RCC_OscConfig+0x18c>
 80021a2:	4b46      	ldr	r3, [pc, #280]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d116      	bne.n	80021dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ae:	4b43      	ldr	r3, [pc, #268]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d005      	beq.n	80021c6 <HAL_RCC_OscConfig+0x176>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d001      	beq.n	80021c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e1ba      	b.n	800253c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c6:	4b3d      	ldr	r3, [pc, #244]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	4939      	ldr	r1, [pc, #228]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021da:	e03a      	b.n	8002252 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d020      	beq.n	8002226 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021e4:	4b36      	ldr	r3, [pc, #216]	; (80022c0 <HAL_RCC_OscConfig+0x270>)
 80021e6:	2201      	movs	r2, #1
 80021e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ea:	f7ff fc57 	bl	8001a9c <HAL_GetTick>
 80021ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021f0:	e008      	b.n	8002204 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021f2:	f7ff fc53 	bl	8001a9c <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e19b      	b.n	800253c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002204:	4b2d      	ldr	r3, [pc, #180]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d0f0      	beq.n	80021f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002210:	4b2a      	ldr	r3, [pc, #168]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	4927      	ldr	r1, [pc, #156]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002220:	4313      	orrs	r3, r2
 8002222:	600b      	str	r3, [r1, #0]
 8002224:	e015      	b.n	8002252 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002226:	4b26      	ldr	r3, [pc, #152]	; (80022c0 <HAL_RCC_OscConfig+0x270>)
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222c:	f7ff fc36 	bl	8001a9c <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002234:	f7ff fc32 	bl	8001a9c <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e17a      	b.n	800253c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002246:	4b1d      	ldr	r3, [pc, #116]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1f0      	bne.n	8002234 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0308 	and.w	r3, r3, #8
 800225a:	2b00      	cmp	r3, #0
 800225c:	d03a      	beq.n	80022d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d019      	beq.n	800229a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002266:	4b17      	ldr	r3, [pc, #92]	; (80022c4 <HAL_RCC_OscConfig+0x274>)
 8002268:	2201      	movs	r2, #1
 800226a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800226c:	f7ff fc16 	bl	8001a9c <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002274:	f7ff fc12 	bl	8001a9c <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e15a      	b.n	800253c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002286:	4b0d      	ldr	r3, [pc, #52]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d0f0      	beq.n	8002274 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002292:	2001      	movs	r0, #1
 8002294:	f000 fa9a 	bl	80027cc <RCC_Delay>
 8002298:	e01c      	b.n	80022d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800229a:	4b0a      	ldr	r3, [pc, #40]	; (80022c4 <HAL_RCC_OscConfig+0x274>)
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a0:	f7ff fbfc 	bl	8001a9c <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022a6:	e00f      	b.n	80022c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022a8:	f7ff fbf8 	bl	8001a9c <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d908      	bls.n	80022c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e140      	b.n	800253c <HAL_RCC_OscConfig+0x4ec>
 80022ba:	bf00      	nop
 80022bc:	40021000 	.word	0x40021000
 80022c0:	42420000 	.word	0x42420000
 80022c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022c8:	4b9e      	ldr	r3, [pc, #632]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 80022ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1e9      	bne.n	80022a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f000 80a6 	beq.w	800242e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022e2:	2300      	movs	r3, #0
 80022e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022e6:	4b97      	ldr	r3, [pc, #604]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10d      	bne.n	800230e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022f2:	4b94      	ldr	r3, [pc, #592]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	4a93      	ldr	r2, [pc, #588]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 80022f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022fc:	61d3      	str	r3, [r2, #28]
 80022fe:	4b91      	ldr	r3, [pc, #580]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002306:	60bb      	str	r3, [r7, #8]
 8002308:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800230a:	2301      	movs	r3, #1
 800230c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800230e:	4b8e      	ldr	r3, [pc, #568]	; (8002548 <HAL_RCC_OscConfig+0x4f8>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002316:	2b00      	cmp	r3, #0
 8002318:	d118      	bne.n	800234c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800231a:	4b8b      	ldr	r3, [pc, #556]	; (8002548 <HAL_RCC_OscConfig+0x4f8>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a8a      	ldr	r2, [pc, #552]	; (8002548 <HAL_RCC_OscConfig+0x4f8>)
 8002320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002324:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002326:	f7ff fbb9 	bl	8001a9c <HAL_GetTick>
 800232a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800232c:	e008      	b.n	8002340 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800232e:	f7ff fbb5 	bl	8001a9c <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b64      	cmp	r3, #100	; 0x64
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e0fd      	b.n	800253c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002340:	4b81      	ldr	r3, [pc, #516]	; (8002548 <HAL_RCC_OscConfig+0x4f8>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002348:	2b00      	cmp	r3, #0
 800234a:	d0f0      	beq.n	800232e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d106      	bne.n	8002362 <HAL_RCC_OscConfig+0x312>
 8002354:	4b7b      	ldr	r3, [pc, #492]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	4a7a      	ldr	r2, [pc, #488]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 800235a:	f043 0301 	orr.w	r3, r3, #1
 800235e:	6213      	str	r3, [r2, #32]
 8002360:	e02d      	b.n	80023be <HAL_RCC_OscConfig+0x36e>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10c      	bne.n	8002384 <HAL_RCC_OscConfig+0x334>
 800236a:	4b76      	ldr	r3, [pc, #472]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	4a75      	ldr	r2, [pc, #468]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 8002370:	f023 0301 	bic.w	r3, r3, #1
 8002374:	6213      	str	r3, [r2, #32]
 8002376:	4b73      	ldr	r3, [pc, #460]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 8002378:	6a1b      	ldr	r3, [r3, #32]
 800237a:	4a72      	ldr	r2, [pc, #456]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 800237c:	f023 0304 	bic.w	r3, r3, #4
 8002380:	6213      	str	r3, [r2, #32]
 8002382:	e01c      	b.n	80023be <HAL_RCC_OscConfig+0x36e>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	2b05      	cmp	r3, #5
 800238a:	d10c      	bne.n	80023a6 <HAL_RCC_OscConfig+0x356>
 800238c:	4b6d      	ldr	r3, [pc, #436]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	4a6c      	ldr	r2, [pc, #432]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 8002392:	f043 0304 	orr.w	r3, r3, #4
 8002396:	6213      	str	r3, [r2, #32]
 8002398:	4b6a      	ldr	r3, [pc, #424]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	4a69      	ldr	r2, [pc, #420]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 800239e:	f043 0301 	orr.w	r3, r3, #1
 80023a2:	6213      	str	r3, [r2, #32]
 80023a4:	e00b      	b.n	80023be <HAL_RCC_OscConfig+0x36e>
 80023a6:	4b67      	ldr	r3, [pc, #412]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	4a66      	ldr	r2, [pc, #408]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 80023ac:	f023 0301 	bic.w	r3, r3, #1
 80023b0:	6213      	str	r3, [r2, #32]
 80023b2:	4b64      	ldr	r3, [pc, #400]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	4a63      	ldr	r2, [pc, #396]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 80023b8:	f023 0304 	bic.w	r3, r3, #4
 80023bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d015      	beq.n	80023f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c6:	f7ff fb69 	bl	8001a9c <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023cc:	e00a      	b.n	80023e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ce:	f7ff fb65 	bl	8001a9c <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023dc:	4293      	cmp	r3, r2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e0ab      	b.n	800253c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e4:	4b57      	ldr	r3, [pc, #348]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0ee      	beq.n	80023ce <HAL_RCC_OscConfig+0x37e>
 80023f0:	e014      	b.n	800241c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f2:	f7ff fb53 	bl	8001a9c <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023f8:	e00a      	b.n	8002410 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023fa:	f7ff fb4f 	bl	8001a9c <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	f241 3288 	movw	r2, #5000	; 0x1388
 8002408:	4293      	cmp	r3, r2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e095      	b.n	800253c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002410:	4b4c      	ldr	r3, [pc, #304]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1ee      	bne.n	80023fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800241c:	7dfb      	ldrb	r3, [r7, #23]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d105      	bne.n	800242e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002422:	4b48      	ldr	r3, [pc, #288]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	4a47      	ldr	r2, [pc, #284]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 8002428:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800242c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	2b00      	cmp	r3, #0
 8002434:	f000 8081 	beq.w	800253a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002438:	4b42      	ldr	r3, [pc, #264]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f003 030c 	and.w	r3, r3, #12
 8002440:	2b08      	cmp	r3, #8
 8002442:	d061      	beq.n	8002508 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	69db      	ldr	r3, [r3, #28]
 8002448:	2b02      	cmp	r3, #2
 800244a:	d146      	bne.n	80024da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800244c:	4b3f      	ldr	r3, [pc, #252]	; (800254c <HAL_RCC_OscConfig+0x4fc>)
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002452:	f7ff fb23 	bl	8001a9c <HAL_GetTick>
 8002456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002458:	e008      	b.n	800246c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800245a:	f7ff fb1f 	bl	8001a9c <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e067      	b.n	800253c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800246c:	4b35      	ldr	r3, [pc, #212]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1f0      	bne.n	800245a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002480:	d108      	bne.n	8002494 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002482:	4b30      	ldr	r3, [pc, #192]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	492d      	ldr	r1, [pc, #180]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 8002490:	4313      	orrs	r3, r2
 8002492:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002494:	4b2b      	ldr	r3, [pc, #172]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a19      	ldr	r1, [r3, #32]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a4:	430b      	orrs	r3, r1
 80024a6:	4927      	ldr	r1, [pc, #156]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024ac:	4b27      	ldr	r3, [pc, #156]	; (800254c <HAL_RCC_OscConfig+0x4fc>)
 80024ae:	2201      	movs	r2, #1
 80024b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b2:	f7ff faf3 	bl	8001a9c <HAL_GetTick>
 80024b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024b8:	e008      	b.n	80024cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ba:	f7ff faef 	bl	8001a9c <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e037      	b.n	800253c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024cc:	4b1d      	ldr	r3, [pc, #116]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d0f0      	beq.n	80024ba <HAL_RCC_OscConfig+0x46a>
 80024d8:	e02f      	b.n	800253a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024da:	4b1c      	ldr	r3, [pc, #112]	; (800254c <HAL_RCC_OscConfig+0x4fc>)
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e0:	f7ff fadc 	bl	8001a9c <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e8:	f7ff fad8 	bl	8001a9c <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e020      	b.n	800253c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024fa:	4b12      	ldr	r3, [pc, #72]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1f0      	bne.n	80024e8 <HAL_RCC_OscConfig+0x498>
 8002506:	e018      	b.n	800253a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	69db      	ldr	r3, [r3, #28]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d101      	bne.n	8002514 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e013      	b.n	800253c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002514:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	429a      	cmp	r2, r3
 8002526:	d106      	bne.n	8002536 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002532:	429a      	cmp	r2, r3
 8002534:	d001      	beq.n	800253a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e000      	b.n	800253c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3718      	adds	r7, #24
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	40021000 	.word	0x40021000
 8002548:	40007000 	.word	0x40007000
 800254c:	42420060 	.word	0x42420060

08002550 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e0d0      	b.n	8002706 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002564:	4b6a      	ldr	r3, [pc, #424]	; (8002710 <HAL_RCC_ClockConfig+0x1c0>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	429a      	cmp	r2, r3
 8002570:	d910      	bls.n	8002594 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002572:	4b67      	ldr	r3, [pc, #412]	; (8002710 <HAL_RCC_ClockConfig+0x1c0>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f023 0207 	bic.w	r2, r3, #7
 800257a:	4965      	ldr	r1, [pc, #404]	; (8002710 <HAL_RCC_ClockConfig+0x1c0>)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	4313      	orrs	r3, r2
 8002580:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002582:	4b63      	ldr	r3, [pc, #396]	; (8002710 <HAL_RCC_ClockConfig+0x1c0>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	429a      	cmp	r2, r3
 800258e:	d001      	beq.n	8002594 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e0b8      	b.n	8002706 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d020      	beq.n	80025e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0304 	and.w	r3, r3, #4
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d005      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025ac:	4b59      	ldr	r3, [pc, #356]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	4a58      	ldr	r2, [pc, #352]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80025b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0308 	and.w	r3, r3, #8
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d005      	beq.n	80025d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025c4:	4b53      	ldr	r3, [pc, #332]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	4a52      	ldr	r2, [pc, #328]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80025ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025d0:	4b50      	ldr	r3, [pc, #320]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	494d      	ldr	r1, [pc, #308]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d040      	beq.n	8002670 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d107      	bne.n	8002606 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f6:	4b47      	ldr	r3, [pc, #284]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d115      	bne.n	800262e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e07f      	b.n	8002706 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b02      	cmp	r3, #2
 800260c:	d107      	bne.n	800261e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800260e:	4b41      	ldr	r3, [pc, #260]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d109      	bne.n	800262e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e073      	b.n	8002706 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800261e:	4b3d      	ldr	r3, [pc, #244]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e06b      	b.n	8002706 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800262e:	4b39      	ldr	r3, [pc, #228]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f023 0203 	bic.w	r2, r3, #3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	4936      	ldr	r1, [pc, #216]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 800263c:	4313      	orrs	r3, r2
 800263e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002640:	f7ff fa2c 	bl	8001a9c <HAL_GetTick>
 8002644:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002646:	e00a      	b.n	800265e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002648:	f7ff fa28 	bl	8001a9c <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	f241 3288 	movw	r2, #5000	; 0x1388
 8002656:	4293      	cmp	r3, r2
 8002658:	d901      	bls.n	800265e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e053      	b.n	8002706 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800265e:	4b2d      	ldr	r3, [pc, #180]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f003 020c 	and.w	r2, r3, #12
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	429a      	cmp	r2, r3
 800266e:	d1eb      	bne.n	8002648 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002670:	4b27      	ldr	r3, [pc, #156]	; (8002710 <HAL_RCC_ClockConfig+0x1c0>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0307 	and.w	r3, r3, #7
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	429a      	cmp	r2, r3
 800267c:	d210      	bcs.n	80026a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800267e:	4b24      	ldr	r3, [pc, #144]	; (8002710 <HAL_RCC_ClockConfig+0x1c0>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f023 0207 	bic.w	r2, r3, #7
 8002686:	4922      	ldr	r1, [pc, #136]	; (8002710 <HAL_RCC_ClockConfig+0x1c0>)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	4313      	orrs	r3, r2
 800268c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800268e:	4b20      	ldr	r3, [pc, #128]	; (8002710 <HAL_RCC_ClockConfig+0x1c0>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	429a      	cmp	r2, r3
 800269a:	d001      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e032      	b.n	8002706 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d008      	beq.n	80026be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026ac:	4b19      	ldr	r3, [pc, #100]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	4916      	ldr	r1, [pc, #88]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0308 	and.w	r3, r3, #8
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d009      	beq.n	80026de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026ca:	4b12      	ldr	r3, [pc, #72]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	490e      	ldr	r1, [pc, #56]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026de:	f000 f821 	bl	8002724 <HAL_RCC_GetSysClockFreq>
 80026e2:	4602      	mov	r2, r0
 80026e4:	4b0b      	ldr	r3, [pc, #44]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	091b      	lsrs	r3, r3, #4
 80026ea:	f003 030f 	and.w	r3, r3, #15
 80026ee:	490a      	ldr	r1, [pc, #40]	; (8002718 <HAL_RCC_ClockConfig+0x1c8>)
 80026f0:	5ccb      	ldrb	r3, [r1, r3]
 80026f2:	fa22 f303 	lsr.w	r3, r2, r3
 80026f6:	4a09      	ldr	r2, [pc, #36]	; (800271c <HAL_RCC_ClockConfig+0x1cc>)
 80026f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026fa:	4b09      	ldr	r3, [pc, #36]	; (8002720 <HAL_RCC_ClockConfig+0x1d0>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff f98a 	bl	8001a18 <HAL_InitTick>

  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40022000 	.word	0x40022000
 8002714:	40021000 	.word	0x40021000
 8002718:	08003048 	.word	0x08003048
 800271c:	20000044 	.word	0x20000044
 8002720:	20000048 	.word	0x20000048

08002724 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002724:	b480      	push	{r7}
 8002726:	b087      	sub	sp, #28
 8002728:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800272a:	2300      	movs	r3, #0
 800272c:	60fb      	str	r3, [r7, #12]
 800272e:	2300      	movs	r3, #0
 8002730:	60bb      	str	r3, [r7, #8]
 8002732:	2300      	movs	r3, #0
 8002734:	617b      	str	r3, [r7, #20]
 8002736:	2300      	movs	r3, #0
 8002738:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800273a:	2300      	movs	r3, #0
 800273c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800273e:	4b1e      	ldr	r3, [pc, #120]	; (80027b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f003 030c 	and.w	r3, r3, #12
 800274a:	2b04      	cmp	r3, #4
 800274c:	d002      	beq.n	8002754 <HAL_RCC_GetSysClockFreq+0x30>
 800274e:	2b08      	cmp	r3, #8
 8002750:	d003      	beq.n	800275a <HAL_RCC_GetSysClockFreq+0x36>
 8002752:	e027      	b.n	80027a4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002754:	4b19      	ldr	r3, [pc, #100]	; (80027bc <HAL_RCC_GetSysClockFreq+0x98>)
 8002756:	613b      	str	r3, [r7, #16]
      break;
 8002758:	e027      	b.n	80027aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	0c9b      	lsrs	r3, r3, #18
 800275e:	f003 030f 	and.w	r3, r3, #15
 8002762:	4a17      	ldr	r2, [pc, #92]	; (80027c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002764:	5cd3      	ldrb	r3, [r2, r3]
 8002766:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d010      	beq.n	8002794 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002772:	4b11      	ldr	r3, [pc, #68]	; (80027b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	0c5b      	lsrs	r3, r3, #17
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	4a11      	ldr	r2, [pc, #68]	; (80027c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800277e:	5cd3      	ldrb	r3, [r2, r3]
 8002780:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a0d      	ldr	r2, [pc, #52]	; (80027bc <HAL_RCC_GetSysClockFreq+0x98>)
 8002786:	fb02 f203 	mul.w	r2, r2, r3
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002790:	617b      	str	r3, [r7, #20]
 8002792:	e004      	b.n	800279e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a0c      	ldr	r2, [pc, #48]	; (80027c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002798:	fb02 f303 	mul.w	r3, r2, r3
 800279c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	613b      	str	r3, [r7, #16]
      break;
 80027a2:	e002      	b.n	80027aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027a4:	4b05      	ldr	r3, [pc, #20]	; (80027bc <HAL_RCC_GetSysClockFreq+0x98>)
 80027a6:	613b      	str	r3, [r7, #16]
      break;
 80027a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027aa:	693b      	ldr	r3, [r7, #16]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	371c      	adds	r7, #28
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bc80      	pop	{r7}
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	40021000 	.word	0x40021000
 80027bc:	007a1200 	.word	0x007a1200
 80027c0:	08003058 	.word	0x08003058
 80027c4:	08003068 	.word	0x08003068
 80027c8:	003d0900 	.word	0x003d0900

080027cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027d4:	4b0a      	ldr	r3, [pc, #40]	; (8002800 <RCC_Delay+0x34>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a0a      	ldr	r2, [pc, #40]	; (8002804 <RCC_Delay+0x38>)
 80027da:	fba2 2303 	umull	r2, r3, r2, r3
 80027de:	0a5b      	lsrs	r3, r3, #9
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	fb02 f303 	mul.w	r3, r2, r3
 80027e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027e8:	bf00      	nop
  }
  while (Delay --);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	1e5a      	subs	r2, r3, #1
 80027ee:	60fa      	str	r2, [r7, #12]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1f9      	bne.n	80027e8 <RCC_Delay+0x1c>
}
 80027f4:	bf00      	nop
 80027f6:	bf00      	nop
 80027f8:	3714      	adds	r7, #20
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr
 8002800:	20000044 	.word	0x20000044
 8002804:	10624dd3 	.word	0x10624dd3

08002808 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e041      	b.n	800289e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d106      	bne.n	8002834 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f7ff f85a 	bl	80018e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2202      	movs	r2, #2
 8002838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3304      	adds	r3, #4
 8002844:	4619      	mov	r1, r3
 8002846:	4610      	mov	r0, r2
 8002848:	f000 fa6e 	bl	8002d28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
	...

080028a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d001      	beq.n	80028c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e035      	b.n	800292c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2202      	movs	r2, #2
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68da      	ldr	r2, [r3, #12]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f042 0201 	orr.w	r2, r2, #1
 80028d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a16      	ldr	r2, [pc, #88]	; (8002938 <HAL_TIM_Base_Start_IT+0x90>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d009      	beq.n	80028f6 <HAL_TIM_Base_Start_IT+0x4e>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ea:	d004      	beq.n	80028f6 <HAL_TIM_Base_Start_IT+0x4e>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a12      	ldr	r2, [pc, #72]	; (800293c <HAL_TIM_Base_Start_IT+0x94>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d111      	bne.n	800291a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2b06      	cmp	r3, #6
 8002906:	d010      	beq.n	800292a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f042 0201 	orr.w	r2, r2, #1
 8002916:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002918:	e007      	b.n	800292a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f042 0201 	orr.w	r2, r2, #1
 8002928:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3714      	adds	r7, #20
 8002930:	46bd      	mov	sp, r7
 8002932:	bc80      	pop	{r7}
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	40012c00 	.word	0x40012c00
 800293c:	40000400 	.word	0x40000400

08002940 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b02      	cmp	r3, #2
 8002954:	d122      	bne.n	800299c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b02      	cmp	r3, #2
 8002962:	d11b      	bne.n	800299c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f06f 0202 	mvn.w	r2, #2
 800296c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 f9b4 	bl	8002cf0 <HAL_TIM_IC_CaptureCallback>
 8002988:	e005      	b.n	8002996 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 f9a7 	bl	8002cde <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 f9b6 	bl	8002d02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	f003 0304 	and.w	r3, r3, #4
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	d122      	bne.n	80029f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	2b04      	cmp	r3, #4
 80029b6:	d11b      	bne.n	80029f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f06f 0204 	mvn.w	r2, #4
 80029c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2202      	movs	r2, #2
 80029c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d003      	beq.n	80029de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 f98a 	bl	8002cf0 <HAL_TIM_IC_CaptureCallback>
 80029dc:	e005      	b.n	80029ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f97d 	bl	8002cde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 f98c 	bl	8002d02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	f003 0308 	and.w	r3, r3, #8
 80029fa:	2b08      	cmp	r3, #8
 80029fc:	d122      	bne.n	8002a44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	f003 0308 	and.w	r3, r3, #8
 8002a08:	2b08      	cmp	r3, #8
 8002a0a:	d11b      	bne.n	8002a44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f06f 0208 	mvn.w	r2, #8
 8002a14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2204      	movs	r2, #4
 8002a1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f960 	bl	8002cf0 <HAL_TIM_IC_CaptureCallback>
 8002a30:	e005      	b.n	8002a3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f953 	bl	8002cde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 f962 	bl	8002d02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	f003 0310 	and.w	r3, r3, #16
 8002a4e:	2b10      	cmp	r3, #16
 8002a50:	d122      	bne.n	8002a98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	f003 0310 	and.w	r3, r3, #16
 8002a5c:	2b10      	cmp	r3, #16
 8002a5e:	d11b      	bne.n	8002a98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f06f 0210 	mvn.w	r2, #16
 8002a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2208      	movs	r2, #8
 8002a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f936 	bl	8002cf0 <HAL_TIM_IC_CaptureCallback>
 8002a84:	e005      	b.n	8002a92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f929 	bl	8002cde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 f938 	bl	8002d02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d10e      	bne.n	8002ac4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d107      	bne.n	8002ac4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f06f 0201 	mvn.w	r2, #1
 8002abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7fe fe28 	bl	8001714 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ace:	2b80      	cmp	r3, #128	; 0x80
 8002ad0:	d10e      	bne.n	8002af0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002adc:	2b80      	cmp	r3, #128	; 0x80
 8002ade:	d107      	bne.n	8002af0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 fa6b 	bl	8002fc6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002afa:	2b40      	cmp	r3, #64	; 0x40
 8002afc:	d10e      	bne.n	8002b1c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b08:	2b40      	cmp	r3, #64	; 0x40
 8002b0a:	d107      	bne.n	8002b1c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f8fc 	bl	8002d14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	f003 0320 	and.w	r3, r3, #32
 8002b26:	2b20      	cmp	r3, #32
 8002b28:	d10e      	bne.n	8002b48 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	f003 0320 	and.w	r3, r3, #32
 8002b34:	2b20      	cmp	r3, #32
 8002b36:	d107      	bne.n	8002b48 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f06f 0220 	mvn.w	r2, #32
 8002b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 fa36 	bl	8002fb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b48:	bf00      	nop
 8002b4a:	3708      	adds	r7, #8
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d101      	bne.n	8002b6c <HAL_TIM_ConfigClockSource+0x1c>
 8002b68:	2302      	movs	r3, #2
 8002b6a:	e0b4      	b.n	8002cd6 <HAL_TIM_ConfigClockSource+0x186>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2202      	movs	r2, #2
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68ba      	ldr	r2, [r7, #8]
 8002b9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ba4:	d03e      	beq.n	8002c24 <HAL_TIM_ConfigClockSource+0xd4>
 8002ba6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002baa:	f200 8087 	bhi.w	8002cbc <HAL_TIM_ConfigClockSource+0x16c>
 8002bae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bb2:	f000 8086 	beq.w	8002cc2 <HAL_TIM_ConfigClockSource+0x172>
 8002bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bba:	d87f      	bhi.n	8002cbc <HAL_TIM_ConfigClockSource+0x16c>
 8002bbc:	2b70      	cmp	r3, #112	; 0x70
 8002bbe:	d01a      	beq.n	8002bf6 <HAL_TIM_ConfigClockSource+0xa6>
 8002bc0:	2b70      	cmp	r3, #112	; 0x70
 8002bc2:	d87b      	bhi.n	8002cbc <HAL_TIM_ConfigClockSource+0x16c>
 8002bc4:	2b60      	cmp	r3, #96	; 0x60
 8002bc6:	d050      	beq.n	8002c6a <HAL_TIM_ConfigClockSource+0x11a>
 8002bc8:	2b60      	cmp	r3, #96	; 0x60
 8002bca:	d877      	bhi.n	8002cbc <HAL_TIM_ConfigClockSource+0x16c>
 8002bcc:	2b50      	cmp	r3, #80	; 0x50
 8002bce:	d03c      	beq.n	8002c4a <HAL_TIM_ConfigClockSource+0xfa>
 8002bd0:	2b50      	cmp	r3, #80	; 0x50
 8002bd2:	d873      	bhi.n	8002cbc <HAL_TIM_ConfigClockSource+0x16c>
 8002bd4:	2b40      	cmp	r3, #64	; 0x40
 8002bd6:	d058      	beq.n	8002c8a <HAL_TIM_ConfigClockSource+0x13a>
 8002bd8:	2b40      	cmp	r3, #64	; 0x40
 8002bda:	d86f      	bhi.n	8002cbc <HAL_TIM_ConfigClockSource+0x16c>
 8002bdc:	2b30      	cmp	r3, #48	; 0x30
 8002bde:	d064      	beq.n	8002caa <HAL_TIM_ConfigClockSource+0x15a>
 8002be0:	2b30      	cmp	r3, #48	; 0x30
 8002be2:	d86b      	bhi.n	8002cbc <HAL_TIM_ConfigClockSource+0x16c>
 8002be4:	2b20      	cmp	r3, #32
 8002be6:	d060      	beq.n	8002caa <HAL_TIM_ConfigClockSource+0x15a>
 8002be8:	2b20      	cmp	r3, #32
 8002bea:	d867      	bhi.n	8002cbc <HAL_TIM_ConfigClockSource+0x16c>
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d05c      	beq.n	8002caa <HAL_TIM_ConfigClockSource+0x15a>
 8002bf0:	2b10      	cmp	r3, #16
 8002bf2:	d05a      	beq.n	8002caa <HAL_TIM_ConfigClockSource+0x15a>
 8002bf4:	e062      	b.n	8002cbc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6818      	ldr	r0, [r3, #0]
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	6899      	ldr	r1, [r3, #8]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685a      	ldr	r2, [r3, #4]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	f000 f95e 	bl	8002ec6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68ba      	ldr	r2, [r7, #8]
 8002c20:	609a      	str	r2, [r3, #8]
      break;
 8002c22:	e04f      	b.n	8002cc4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6818      	ldr	r0, [r3, #0]
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	6899      	ldr	r1, [r3, #8]
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685a      	ldr	r2, [r3, #4]
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	f000 f947 	bl	8002ec6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689a      	ldr	r2, [r3, #8]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c46:	609a      	str	r2, [r3, #8]
      break;
 8002c48:	e03c      	b.n	8002cc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6818      	ldr	r0, [r3, #0]
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	6859      	ldr	r1, [r3, #4]
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	461a      	mov	r2, r3
 8002c58:	f000 f8be 	bl	8002dd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2150      	movs	r1, #80	; 0x50
 8002c62:	4618      	mov	r0, r3
 8002c64:	f000 f915 	bl	8002e92 <TIM_ITRx_SetConfig>
      break;
 8002c68:	e02c      	b.n	8002cc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6818      	ldr	r0, [r3, #0]
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	6859      	ldr	r1, [r3, #4]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	461a      	mov	r2, r3
 8002c78:	f000 f8dc 	bl	8002e34 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2160      	movs	r1, #96	; 0x60
 8002c82:	4618      	mov	r0, r3
 8002c84:	f000 f905 	bl	8002e92 <TIM_ITRx_SetConfig>
      break;
 8002c88:	e01c      	b.n	8002cc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6818      	ldr	r0, [r3, #0]
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	6859      	ldr	r1, [r3, #4]
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	461a      	mov	r2, r3
 8002c98:	f000 f89e 	bl	8002dd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2140      	movs	r1, #64	; 0x40
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 f8f5 	bl	8002e92 <TIM_ITRx_SetConfig>
      break;
 8002ca8:	e00c      	b.n	8002cc4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	4610      	mov	r0, r2
 8002cb6:	f000 f8ec 	bl	8002e92 <TIM_ITRx_SetConfig>
      break;
 8002cba:	e003      	b.n	8002cc4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	73fb      	strb	r3, [r7, #15]
      break;
 8002cc0:	e000      	b.n	8002cc4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002cc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	b083      	sub	sp, #12
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ce6:	bf00      	nop
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bc80      	pop	{r7}
 8002cee:	4770      	bx	lr

08002cf0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bc80      	pop	{r7}
 8002d00:	4770      	bx	lr

08002d02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b083      	sub	sp, #12
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bc80      	pop	{r7}
 8002d12:	4770      	bx	lr

08002d14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bc80      	pop	{r7}
 8002d24:	4770      	bx	lr
	...

08002d28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a25      	ldr	r2, [pc, #148]	; (8002dd0 <TIM_Base_SetConfig+0xa8>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d007      	beq.n	8002d50 <TIM_Base_SetConfig+0x28>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d46:	d003      	beq.n	8002d50 <TIM_Base_SetConfig+0x28>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a22      	ldr	r2, [pc, #136]	; (8002dd4 <TIM_Base_SetConfig+0xac>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d108      	bne.n	8002d62 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a1a      	ldr	r2, [pc, #104]	; (8002dd0 <TIM_Base_SetConfig+0xa8>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d007      	beq.n	8002d7a <TIM_Base_SetConfig+0x52>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d70:	d003      	beq.n	8002d7a <TIM_Base_SetConfig+0x52>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a17      	ldr	r2, [pc, #92]	; (8002dd4 <TIM_Base_SetConfig+0xac>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d108      	bne.n	8002d8c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68fa      	ldr	r2, [r7, #12]
 8002d9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a07      	ldr	r2, [pc, #28]	; (8002dd0 <TIM_Base_SetConfig+0xa8>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d103      	bne.n	8002dc0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	691a      	ldr	r2, [r3, #16]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	615a      	str	r2, [r3, #20]
}
 8002dc6:	bf00      	nop
 8002dc8:	3714      	adds	r7, #20
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bc80      	pop	{r7}
 8002dce:	4770      	bx	lr
 8002dd0:	40012c00 	.word	0x40012c00
 8002dd4:	40000400 	.word	0x40000400

08002dd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b087      	sub	sp, #28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	f023 0201 	bic.w	r2, r3, #1
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	011b      	lsls	r3, r3, #4
 8002e08:	693a      	ldr	r2, [r7, #16]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	f023 030a 	bic.w	r3, r3, #10
 8002e14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	621a      	str	r2, [r3, #32]
}
 8002e2a:	bf00      	nop
 8002e2c:	371c      	adds	r7, #28
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bc80      	pop	{r7}
 8002e32:	4770      	bx	lr

08002e34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b087      	sub	sp, #28
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	f023 0210 	bic.w	r2, r3, #16
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	031b      	lsls	r3, r3, #12
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e70:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	011b      	lsls	r3, r3, #4
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	621a      	str	r2, [r3, #32]
}
 8002e88:	bf00      	nop
 8002e8a:	371c      	adds	r7, #28
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bc80      	pop	{r7}
 8002e90:	4770      	bx	lr

08002e92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e92:	b480      	push	{r7}
 8002e94:	b085      	sub	sp, #20
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
 8002e9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ea8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	f043 0307 	orr.w	r3, r3, #7
 8002eb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	609a      	str	r2, [r3, #8]
}
 8002ebc:	bf00      	nop
 8002ebe:	3714      	adds	r7, #20
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bc80      	pop	{r7}
 8002ec4:	4770      	bx	lr

08002ec6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b087      	sub	sp, #28
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	60f8      	str	r0, [r7, #12]
 8002ece:	60b9      	str	r1, [r7, #8]
 8002ed0:	607a      	str	r2, [r7, #4]
 8002ed2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ee0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	021a      	lsls	r2, r3, #8
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	609a      	str	r2, [r3, #8]
}
 8002efa:	bf00      	nop
 8002efc:	371c      	adds	r7, #28
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr

08002f04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d101      	bne.n	8002f1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f18:	2302      	movs	r3, #2
 8002f1a:	e041      	b.n	8002fa0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2202      	movs	r2, #2
 8002f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a14      	ldr	r2, [pc, #80]	; (8002fac <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d009      	beq.n	8002f74 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f68:	d004      	beq.n	8002f74 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a10      	ldr	r2, [pc, #64]	; (8002fb0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d10c      	bne.n	8002f8e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f7a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	68ba      	ldr	r2, [r7, #8]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68ba      	ldr	r2, [r7, #8]
 8002f8c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3714      	adds	r7, #20
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bc80      	pop	{r7}
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	40012c00 	.word	0x40012c00
 8002fb0:	40000400 	.word	0x40000400

08002fb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bc80      	pop	{r7}
 8002fc4:	4770      	bx	lr

08002fc6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fce:	bf00      	nop
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bc80      	pop	{r7}
 8002fd6:	4770      	bx	lr

08002fd8 <__libc_init_array>:
 8002fd8:	b570      	push	{r4, r5, r6, lr}
 8002fda:	2600      	movs	r6, #0
 8002fdc:	4d0c      	ldr	r5, [pc, #48]	; (8003010 <__libc_init_array+0x38>)
 8002fde:	4c0d      	ldr	r4, [pc, #52]	; (8003014 <__libc_init_array+0x3c>)
 8002fe0:	1b64      	subs	r4, r4, r5
 8002fe2:	10a4      	asrs	r4, r4, #2
 8002fe4:	42a6      	cmp	r6, r4
 8002fe6:	d109      	bne.n	8002ffc <__libc_init_array+0x24>
 8002fe8:	f000 f822 	bl	8003030 <_init>
 8002fec:	2600      	movs	r6, #0
 8002fee:	4d0a      	ldr	r5, [pc, #40]	; (8003018 <__libc_init_array+0x40>)
 8002ff0:	4c0a      	ldr	r4, [pc, #40]	; (800301c <__libc_init_array+0x44>)
 8002ff2:	1b64      	subs	r4, r4, r5
 8002ff4:	10a4      	asrs	r4, r4, #2
 8002ff6:	42a6      	cmp	r6, r4
 8002ff8:	d105      	bne.n	8003006 <__libc_init_array+0x2e>
 8002ffa:	bd70      	pop	{r4, r5, r6, pc}
 8002ffc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003000:	4798      	blx	r3
 8003002:	3601      	adds	r6, #1
 8003004:	e7ee      	b.n	8002fe4 <__libc_init_array+0xc>
 8003006:	f855 3b04 	ldr.w	r3, [r5], #4
 800300a:	4798      	blx	r3
 800300c:	3601      	adds	r6, #1
 800300e:	e7f2      	b.n	8002ff6 <__libc_init_array+0x1e>
 8003010:	0800306c 	.word	0x0800306c
 8003014:	0800306c 	.word	0x0800306c
 8003018:	0800306c 	.word	0x0800306c
 800301c:	08003070 	.word	0x08003070

08003020 <memset>:
 8003020:	4603      	mov	r3, r0
 8003022:	4402      	add	r2, r0
 8003024:	4293      	cmp	r3, r2
 8003026:	d100      	bne.n	800302a <memset+0xa>
 8003028:	4770      	bx	lr
 800302a:	f803 1b01 	strb.w	r1, [r3], #1
 800302e:	e7f9      	b.n	8003024 <memset+0x4>

08003030 <_init>:
 8003030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003032:	bf00      	nop
 8003034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003036:	bc08      	pop	{r3}
 8003038:	469e      	mov	lr, r3
 800303a:	4770      	bx	lr

0800303c <_fini>:
 800303c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800303e:	bf00      	nop
 8003040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003042:	bc08      	pop	{r3}
 8003044:	469e      	mov	lr, r3
 8003046:	4770      	bx	lr
